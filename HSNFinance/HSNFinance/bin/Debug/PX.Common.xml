<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PX.Common</name>
    </assembly>
    <members>
        <member name="T:PX.Common.AsyncOP">
            <summary>
            This is base class for asynchronous operation.
            </summary>
        </member>
        <member name="M:PX.Common.AsyncOP.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:PX.Common.AsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:PX.Common.AsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:PX.Common.AsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
        </member>
        <member name="T:PX.Common.AsyncOP_State">
            <summary>
            Specifies asynchronous operation state.
            </summary>
        </member>
        <member name="F:PX.Common.AsyncOP_State.WaitingForStart">
            <summary>
            Operation waits for start.
            </summary>
        </member>
        <member name="F:PX.Common.AsyncOP_State.Active">
            <summary>
            Operation processing is in progress.
            </summary>
        </member>
        <member name="F:PX.Common.AsyncOP_State.Completed">
            <summary>
            Operations is completed.
            </summary>
        </member>
        <member name="F:PX.Common.AsyncOP_State.Disposed">
            <summary>
            Operation is disposed.
            </summary>
        </member>
        <member name="T:PX.Common.AsyncResultState">
            <summary>
            (For internal use only). This class provides holder for IAsyncResult interface and extends it's features.
            </summary>
        </member>
        <member name="M:PX.Common.AsyncResultState.#ctor(System.Object,System.Delegate,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="asyncObject">Caller's async object.</param>
            <param name="asyncDelegate">Delegate which is called asynchronously.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
        </member>
        <member name="M:PX.Common.AsyncResultState.SetAsyncResult(System.IAsyncResult)">
            <summary>
            Sets AsyncResult value.
            </summary>
            <param name="asyncResult">Asycnhronous result to wrap.</param>
        </member>
        <member name="M:PX.Common.AsyncResultState.CompletedCallback(System.IAsyncResult)">
            <summary>
            This method is called by AsyncDelegate when asynchronous operation completes. 
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="P:PX.Common.AsyncResultState.AsyncObject">
            <summary>
            Gets or sets caller's async object.
            </summary>
        </member>
        <member name="P:PX.Common.AsyncResultState.AsyncDelegate">
            <summary>
            Gets delegate which is called asynchronously.
            </summary>
        </member>
        <member name="P:PX.Common.AsyncResultState.AsyncResult">
            <summary>
            Gets source asynchronous result what we wrap.
            </summary>
        </member>
        <member name="P:PX.Common.AsyncResultState.IsEndCalled">
            <summary>
            Gets if the user called the End*() method.
            </summary>
        </member>
        <member name="P:PX.Common.AsyncResultState.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:PX.Common.AsyncResultState.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:PX.Common.AsyncResultState.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:PX.Common.AsyncResultState.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:PX.Common.Authentication.AuthenticateEventArgs">
            <summary>
            This class provides data for server userName/password authentications.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.AuthenticateEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="authorizationID">Authorization ID.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the argumnets has invalid value.</exception>
        </member>
        <member name="P:PX.Common.Authentication.AuthenticateEventArgs.IsAuthenticated">
            <summary>
            Gets or sets if specified user is authenticated.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.AuthenticateEventArgs.AuthorizationID">
            <summary>
            Gets authorization ID.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.AuthenticateEventArgs.UserName">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.AuthenticateEventArgs.Password">
            <summary>
            Gets password.
            </summary>
        </member>
        <member name="T:PX.Common.Authentication.AuthType">
            <summary>
            Authentication type.
            </summary>
        </member>
        <member name="F:PX.Common.Authentication.AuthType.PLAIN">
            <summary>
            Clear text username/password authentication.
            </summary>
        </member>
        <member name="F:PX.Common.Authentication.AuthType.APOP">
            <summary>
            APOP.This is used by POP3 only. RFC 1939 7. APOP.
            </summary>
        </member>
        <member name="F:PX.Common.Authentication.AuthType.CRAM_MD5">
            <summary>
            CRAM-MD5 authentication. RFC 2195 AUTH CRAM-MD5.
            </summary>
        </member>
        <member name="F:PX.Common.Authentication.AuthType.DIGEST_MD5">
            <summary>
            DIGEST-MD5 authentication. RFC 2831 AUTH DIGEST-MD5.
            </summary>
        </member>
        <member name="T:PX.Common.Authentication.HttpDigest">
            <summary>
            Implements http digest access authentication. Defined in RFC 2617.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="digestResponse">Server/Client returned digest response.</param>
            <param name="requestMethod">Request method.</param>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Client constructor. This is used to build valid Authorization response to server.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <param name="cnonce">Client nonce value.</param>
            <param name="uri">Request URI.</param>
            <param name="digestResponse">Server authenticate resposne.</param>
            <param name="requestMethod">Request method.</param>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.#ctor(System.String,System.String,System.String)">
            <summary>
            Server constructor. This is used to build valid Authenticate response to client.
            </summary>
            <param name="realm">Realm(domain).</param>
            <param name="nonce">Nonce value.</param>
            <param name="opaque">Opaque value.</param>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.Authenticate(System.String,System.String)">
            <summary>
            Authenticates specified user and password using this class parameters.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns true if authenticated, otherwise false.</returns>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.Parse(System.String)">
            <summary>
            Parses authetication info from client digest response.
            </summary>
            <param name="digestResponse">Client returned digest response.</param>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.CalculateRspAuth(System.String,System.String)">
            <summary>
            Calculates 'rspauth' value.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns 'rspauth' value.</returns>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.CalculateResponse(System.String,System.String)">
            <summary>
            Calculates response value.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">User password.</param>
            <returns>Returns calculated rsponse value.</returns>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.ToString">
            <summary>
            Converts this to valid digest string.
            </summary>
            <returns>Returns digest string.</returns>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.ToChallange">
            <summary>
            Creates 'Challange' data using this class info. 
            </summary>
            <returns>Returns Challange data.</returns>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.ToChallange(System.Boolean)">
            <summary>
            Creates 'Challange' data using this class info. 
            </summary>
            <param name="addAuthMethod">Specifies if 'digest ' authe method string constant is added.</param>
            <returns>Returns Challange data.</returns>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.ToAuthorization">
            <summary>
            Creates 'Authorization' data using this class info.
            </summary>
            <returns>Return Authorization data.</returns>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.ToAuthorization(System.Boolean)">
            <summary>
            Creates 'Authorization' data using this class info.
            </summary>
            <param name="addAuthMethod">Specifies if 'digest ' authe method string constant is added.</param>
            <returns>Return Authorization data.</returns>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.CreateNonce">
            <summary>
            Creates valid nonce value.
            </summary>
            <returns>Returns nonce value.</returns>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.CreateOpaque">
            <summary>
            Creates valid opaque value.
            </summary>
            <returns>Renturn opaque value.</returns>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.RequestMethod">
            <summary>
            Gets or sets request method.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.Realm">
            <summary>
            Gets or sets a string to be displayed to users so they know which username and password 
            to use. This string should contain at least the name of the host performing the 
            authentication and might additionally indicate the collection of users who might have access.
            An example might be "registered_users@gotham.news.com".
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.Nonce">
            <summary>
            Gets or sets a server-specified unique data string. It is recommended that this 
            string be base64 or hexadecimal data. 
            Suggested value: base64(time-stamp hex(time-stamp ":" ETag ":" private-key)).
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is specified.</exception>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.Opaque">
            <summary>
            Gets or sets string of data, specified by the server, which should be returned by the client unchanged.
            It is recommended that this string be base64 or hexadecimal data.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is specified.</exception>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.Algorithm">
            <summary>
            Gets or sets algorithm to use to produce the digest and a checksum.
            This is normally MD5 or MD5-sess.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.Response">
            <summary>
            Gets a string of 32 hex digits computed by HTTP digest algorithm, 
            which proves that the user knows a password.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.UserName">
            <summary>
            Gets or sets user name.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.Password">
            <summary>
            Gets or sets password.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.Uri">
            <summary>
            Gets the URI from Request-URI.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.Qop">
            <summary>
            Gets or sets value what indicates "quality of protection" the client has applied to
            the message. If present, its value MUST be one of the alternatives the server indicated
            it supports in the WWW-Authenticate header. This directive is optional in order to preserve 
            backward compatibility.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.CNonce">
            <summary>
            Gets or sets Client nonce value. This MUST be specified if a qop directive is sent (see above), and
            MUST NOT be specified if the server did not send a qop directive in the WWW-Authenticate header field.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.NonceCount">
            <summary>
            Gets or stets nonce count. This MUST be specified if a qop directive is sent (see above), and
            MUST NOT be specified if the server did not send a qop directive in the WWW-Authenticate 
            header field.  The nc-value is the hexadecimal count of the number of requests.
            </summary>
        </member>
        <member name="T:PX.Common.Authentication.SaslDigestMD5Challenge">
            <summary>
            This class represents SASL DIGEST-MD5 authentication <b>digest-challenge</b>. Defined in RFC 2831.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.SaslDigestMD5Challenge.#ctor(System.String[],System.String,System.String[],System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="realm">Realm value.</param>
            <param name="nonce">Nonce value.</param>
            <param name="qopOptions">Quality of protections supported. Normally this is "auth".</param>
            <param name="stale">Stale value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>realm</b>,<b>nonce</b> or <b>qopOptions</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Authentication.SaslDigestMD5Challenge.#ctor">
            <summary>
            Internal parse constructor.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.SaslDigestMD5Challenge.Parse(System.String)">
            <summary>
            Parses DIGEST-MD5 challenge from challenge-string.
            </summary>
            <param name="challenge">Challenge string.</param>
            <returns>Returns DIGEST-MD5 challenge.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>challenge</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when challenge parsing + validation fails.</exception>
        </member>
        <member name="M:PX.Common.Authentication.SaslDigestMD5Challenge.ToChallenge">
            <summary>
            Returns DIGEST-MD5 "digest-challenge" string.
            </summary>
            <returns>Returns DIGEST-MD5 "digest-challenge" string.</returns>
        </member>
        <member name="P:PX.Common.Authentication.SaslDigestMD5Challenge.Realm">
            <summary>
            Gets realm value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslDigestMD5Challenge.Nonce">
            <summary>
            Gets nonce value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslDigestMD5Challenge.QopOptions">
            <summary>
            Gets qop-options value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslDigestMD5Challenge.Stale">
            <summary>
            Gets if stale value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslDigestMD5Challenge.Maxbuf">
            <summary>
            Gets maxbuf value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslDigestMD5Challenge.Charset">
            <summary>
            Gets charset value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslDigestMD5Challenge.Algorithm">
            <summary>
            Gets algorithm value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslDigestMD5Challenge.CipherOpts">
            <summary>
            Gets cipher-opts value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="T:PX.Common.Authentication.SaslDigestMD5Response">
            <summary>
            This class represents SASL DIGEST-MD5 authentication <b>digest-response</b>. Defined in RFC 2831.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.SaslDigestMD5Response.#ctor(PX.Common.Authentication.SaslDigestMD5Challenge,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="challenge">Client challenge.</param>
            <param name="realm">Realm value. This must be one value of the challenge Realm.</param>
            <param name="userName">User name.</param>
            <param name="password">User password.</param>
            <param name="cnonce">Client nonce value.</param>
            <param name="nonceCount">Nonce count. One-based client authentication attempt number. Normally this value is 1.</param>
            <param name="qop">Indicates what "quality of protection" the client accepted. This must be one value of the challenge QopOptions.</param>
            <param name="digestUri">Digest URI.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>challenge</b>,<b>realm</b>,<b>password</b>,<b>nonce</b>,<b>qop</b> or <b>digestUri</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Authentication.SaslDigestMD5Response.#ctor">
            <summary>
            Internal parse constructor.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.SaslDigestMD5Response.Parse(System.String)">
            <summary>
            Parses DIGEST-MD5 response from response-string.
            </summary>
            <param name="digestResponse">Response string.</param>
            <returns>Returns DIGEST-MD5 response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>digestResponse</b> isnull reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when response parsing + validation fails.</exception>
        </member>
        <member name="M:PX.Common.Authentication.SaslDigestMD5Response.Authenticate(System.String,System.String)">
            <summary>
            Authenticates user.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns true if user authenticated, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> or <b>password</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Authentication.SaslDigestMD5Response.ToResponse">
            <summary>
            Creates digest response for challenge.
            </summary>
            <returns>Returns digest response.</returns>
        </member>
        <member name="M:PX.Common.Authentication.SaslDigestMD5Response.ToRspauthResponse(System.String,System.String)">
            <summary>
            Creates <b>response-auth</b> response for client.
            </summary>
            <returns>Returns <b>response-auth</b> response.</returns>
        </member>
        <member name="M:PX.Common.Authentication.SaslDigestMD5Response.CalculateResponse(System.String,System.String)">
            <summary>
            Calculates digest response.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns digest response.</returns>
        </member>
        <member name="M:PX.Common.Authentication.SaslDigestMD5Response.a1(System.String,System.String)">
            <summary>
            Calculates A1 value.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns A1 value.</returns>
        </member>
        <member name="M:PX.Common.Authentication.SaslDigestMD5Response.a2">
            <summary>
            Calculates A2 value.
            </summary>
            <returns>Returns A2 value.</returns>
        </member>
        <member name="M:PX.Common.Authentication.SaslDigestMD5Response.h(System.Byte[])">
            <summary>
            Computes MD5 hash.
            </summary>
            <param name="value">Value to process.</param>
            <returns>Return MD5 hash.</returns>
        </member>
        <member name="M:PX.Common.Authentication.SaslDigestMD5Response.hex(System.Byte[])">
            <summary>
            Converts value to hex string.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Returns hex string.</returns>
        </member>
        <member name="P:PX.Common.Authentication.SaslDigestMD5Response.UserName">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslDigestMD5Response.Realm">
            <summary>
            Gets realm(domain) name.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslDigestMD5Response.Nonce">
            <summary>
            Gets nonce value.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslDigestMD5Response.Cnonce">
            <summary>
            Gets cnonce value.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslDigestMD5Response.NonceCount">
            <summary>
            Gets nonce count.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslDigestMD5Response.Qop">
            <summary>
            Gets "quality of protection" value.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslDigestMD5Response.DigestUri">
            <summary>
            Gets digest URI value.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslDigestMD5Response.Response">
            <summary>
            Gets response value.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslDigestMD5Response.Charset">
            <summary>
            Gets charset value.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslDigestMD5Response.Cipher">
            <summary>
            Gets cipher value.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslDigestMD5Response.Authzid">
            <summary>
            Gets authorization ID.
            </summary>
        </member>
        <member name="T:PX.Common.Authentication.SaslServerMechanism">
            <summary>
            This base class for server SASL authentication mechanisms.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.SaslServerMechanism.Reset">
            <summary>
            Resets any authentication state data.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.SaslServerMechanism.Continue(System.String)">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientRespone</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanism.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanism.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanism.Name">
            <summary>
            Gets IANA-registered SASL authentication mechanism name.
            </summary>
            <remarks>The registered list is available from: http://www.iana.org/assignments/sasl-mechanisms .</remarks>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanism.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanism.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanism.Tags">
            <summary>
            Gets user data items collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:PX.Common.Authentication.SaslServerMechanismCramMd5">
            <summary>
            Implements "CRAM-MD5" authenticaiton. Defined in RFC 2195.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.SaslServerMechanismCramMd5.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="requireSSL">Specifies if this mechanism is available to SSL connections only.</param>
        </member>
        <member name="M:PX.Common.Authentication.SaslServerMechanismCramMd5.Reset">
            <summary>
            Resets any authentication state data.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.SaslServerMechanismCramMd5.Continue(System.String)">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientResponse</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Authentication.SaslServerMechanismCramMd5.HmacMd5(System.String,System.String)">
            <summary>
            Calculates keyed md5 hash from specifieed text and with specified hash key.
            </summary>
            <param name="hashKey">MD5 key.</param>
            <param name="text">Text to hash.</param>
            <returns>Returns MD5 hash.</returns>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanismCramMd5.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanismCramMd5.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanismCramMd5.Name">
            <summary>
            Returns always "CRAM-MD5".
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanismCramMd5.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanismCramMd5.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="E:PX.Common.Authentication.SaslServerMechanismCramMd5.GetUserInfo">
            <summary>
            Is called when authentication mechanism needs to get user info to complete atuhentication.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.SaslServerMechanismCramMd5.OnGetUserInfo(System.String)">
            <summary>
            Raises <b>GetUserInfo</b> event.
            </summary>
            <param name="userName">User name.</param>
            <returns>Returns specified user info.</returns>
        </member>
        <member name="T:PX.Common.Authentication.SaslServerMechanismDigestMd5">
            <summary>
            Implements "DIGEST-MD5" authenticaiton. Defined in RFC 2831.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.SaslServerMechanismDigestMd5.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="requireSSL">Specifies if this mechanism is available to SSL connections only.</param>
        </member>
        <member name="M:PX.Common.Authentication.SaslServerMechanismDigestMd5.Reset">
            <summary>
            Resets any authentication state data.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.SaslServerMechanismDigestMd5.Continue(System.String)">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientResponse</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanismDigestMd5.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanismDigestMd5.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanismDigestMd5.Name">
            <summary>
            Returns always "DIGEST-MD5".
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanismDigestMd5.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanismDigestMd5.Realm">
            <summary>
            Gets or sets realm value.
            </summary>
            <remarks>Normally this is host or domain name.</remarks>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanismDigestMd5.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="E:PX.Common.Authentication.SaslServerMechanismDigestMd5.GetUserInfo">
            <summary>
            Is called when authentication mechanism needs to get user info to complete atuhentication.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.SaslServerMechanismDigestMd5.OnGetUserInfo(System.String)">
            <summary>
            Raises <b>GetUserInfo</b> event.
            </summary>
            <param name="userName">User name.</param>
            <returns>Returns specified user info.</returns>
        </member>
        <member name="T:PX.Common.Authentication.SaslServerMechanismLogin">
            <summary>
            Implements "LOGIN" authenticaiton.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.SaslServerMechanismLogin.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="requireSSL">Specifies if this mechanism is available to SSL connections only.</param>
        </member>
        <member name="M:PX.Common.Authentication.SaslServerMechanismLogin.Reset">
            <summary>
            Resets any authentication state data.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.SaslServerMechanismLogin.Continue(System.String)">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientResponse</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanismLogin.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanismLogin.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanismLogin.Name">
            <summary>
            Returns always "LOGIN".
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanismLogin.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanismLogin.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="E:PX.Common.Authentication.SaslServerMechanismLogin.Authenticate">
            <summary>
            Is called when authentication mechanism needs to authenticate specified user.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.SaslServerMechanismLogin.OnAuthenticate(System.String,System.String,System.String)">
            <summary>
            Raises <b>Authenticate</b> event.
            </summary>
            <param name="authorizationID">Authorization ID.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns authentication result.</returns>
        </member>
        <member name="T:PX.Common.Authentication.SaslServerMechanismPlain">
            <summary>
            Implements "PLAIN" authenticaiton. Defined in RFC 4616.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.SaslServerMechanismPlain.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="requireSSL">Specifies if this mechanism is available to SSL connections only.</param>
        </member>
        <member name="M:PX.Common.Authentication.SaslServerMechanismPlain.Reset">
            <summary>
            Resets any authentication state data.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.SaslServerMechanismPlain.Continue(System.String)">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientResponse</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanismPlain.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanismPlain.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanismPlain.Name">
            <summary>
            Returns always "PLAIN".
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanismPlain.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.SaslServerMechanismPlain.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="E:PX.Common.Authentication.SaslServerMechanismPlain.Authenticate">
            <summary>
            Is called when authentication mechanism needs to authenticate specified user.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.SaslServerMechanismPlain.OnAuthenticate(System.String,System.String,System.String)">
            <summary>
            Raises <b>Authenticate</b> event.
            </summary>
            <param name="authorizationID">Authorization ID.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns authentication result.</returns>
        </member>
        <member name="T:PX.Common.Authentication.UserInfoEventArgs">
            <summary>
            This class provides data for server authentication mechanisms <b>GetUserInfo</b> event.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.UserInfoEventArgs.#ctor(System.String)">
            <summary>
            Default constructor.
            Default constructor.
            </summary>
            <param name="userName">User name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:PX.Common.Authentication.UserInfoEventArgs.UserExists">
            <summary>
            Gets or sets if specified user exists.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.UserInfoEventArgs.UserName">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.UserInfoEventArgs.Password">
            <summary>
            Gets or sets user password.
            </summary>
        </member>
        <member name="T:PX.Common.BindInfoProtocol">
            <summary>
            Specifies BindInfo protocol.
            </summary>
        </member>
        <member name="F:PX.Common.BindInfoProtocol.TCP">
            <summary>
            TCP protocol.
            </summary>
        </member>
        <member name="F:PX.Common.BindInfoProtocol.UDP">
            <summary>
            UDP protocol.
            </summary>
        </member>
        <member name="M:PX.Common.PXBufferedResponse.WriteBinary(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Writes binary data in streaming mode to the current response.
            </summary>
            <param name="data">Binary data to write.</param>
            <param name="startIndex">Start index to write</param>
        </member>
        <member name="T:PX.Common.Collection.DList`2">
            <summary>
            Dynamicaly dictionary container.
            </summary>
            <typeparam name="Key">Key type.</typeparam>
            <typeparam name="Value">Item type.</typeparam>
        </member>
        <member name="M:PX.Common.Collection.DList`2.OnInitBySource(PX.Common.Collection.KList{`0,`1})">
            <summary>
            Initialize containder by parent source
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:PX.Common.Collection.DList`2.OnAddItem(`0,`1)">
            <summary>
            Add element.
            </summary>
            <param name="key">Key value.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:PX.Common.Collection.DList`2.OnRemoveItem(`0,`1)">
            <summary>
            Remove element.
            </summary>
            <param name="key">Key value.</param>
            <param name="item">Item</param>
        </member>
        <member name="M:PX.Common.Collection.DList`2.OnClear">
            <summary>
            Remove all items in container
            </summary>
        </member>
        <member name="M:PX.Common.Collection.DList`2.GetItem(`0)">
            <summary>
            Get element by key value
            </summary>
            <param name="key">Key value.</param>
            <returns>null - if element not found.</returns>
        </member>
        <member name="P:PX.Common.Collection.DList`2.Item(`0)">
            <summary>
            Get element by key value
            </summary>
            <param name="key">Key value</param>        
        </member>
        <member name="T:PX.Common.Collection.KList`2">
            <summary>
            List of elemets with keys.
            </summary>
            <remarks>Dictionary not used</remarks>
            <typeparam name="Key">Key type.</typeparam>
            <typeparam name="Item">Item type.</typeparam>
        </member>
        <member name="M:PX.Common.Collection.KList`2.OnInitBySource(PX.Common.Collection.KList{`0,`1})">
            <summary>
            Initialize container by source.
            </summary>
            <param name="source">Source container.</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.GetKeyForItem(`1)">
            <summary>
            Define the Key value by item.
            </summary>
            <param name="item">Item.</param>
            <returns>Key value.</returns>
        </member>
        <member name="P:PX.Common.Collection.KList`2.Comparer">
            <summary>
            Comparer for key.
            </summary>
        </member>
        <member name="P:PX.Common.Collection.KList`2.Item(System.Int32)">
            <summary>
            Get element by index.
            </summary>
            <param name="index">Index item.</param>		
        </member>
        <member name="P:PX.Common.Collection.KList`2.Item(`0)">
            <summary>
            Get element by key
            </summary>
            <param name="key">Key value.</param>        		
        </member>
        <member name="M:PX.Common.Collection.KList`2.TryGetValue(`0,`1@)">
            <summary>
            Try Get element by key
            </summary>
            <param name="key">Key value.</param> 
            <param name="value">Result value</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.Add(`1)">
            <summary>
            Add an item to container
            </summary>
            <param name="item">item</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.Remove(`0)">
            <summary>
            Remove the element by key
            </summary>
            <param name="key">Key value</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.Remove(`0[])">
            <summary>
            Remove selected element by keys
            </summary>
            <param name="keys">Key values</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.RemoveAll(`0[])">
            <summary>
            Remove all items from container excluse selected
            </summary>
            <param name="excludeKeys">Keys for excluded items</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.Clear">
            <summary>
            Remove all items from container.
            </summary>
        </member>
        <member name="M:PX.Common.Collection.KList`2.Insert(System.Int32,`1)">
            <summary>
            Insert elemtn in specified position
            </summary>
            <param name="index">Position/</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copy elements to array
            </summary>
            <param name="array">Array to copy</param>
            <param name="arrayIndex">Start index.</param>
        </member>
        <member name="P:PX.Common.Collection.KList`2.Count">
            <summary>
            Get the count of element in container.
            </summary>
        </member>
        <member name="P:PX.Common.Collection.KList`2.IsReadOnly">
            <summary>
            Get the read only state of container.
            </summary>
        </member>
        <member name="M:PX.Common.Collection.KList`2.Contains(`0)">
            <summary>
            Get state of contain for key
            </summary>
            <param name="key">Key value</param>	
        </member>
        <member name="M:PX.Common.Collection.KList`2.GetItem(`0)">
            <summary>
            Get element by key
            </summary>
            <param name="key">Key value.</param>
            <returns>null - if element not found.</returns>
        </member>
        <member name="M:PX.Common.Collection.KList`2.IndexOf(`1)">
            <summary>
            Define the index of element by the item.
            </summary>
            <param name="item">Item.</param>		
        </member>
        <member name="M:PX.Common.Collection.KList`2.IndexOf(`0)">
            <summary>
            Define the index of element by the key.
            </summary>
            <param name="key">Key value.</param>		
        </member>
        <member name="M:PX.Common.Collection.KList`2.SetItem(System.Int32,`1)">
            <summary>
            Set element to specified position.
            </summary>
            <param name="index">Position.</param>
            <param name="item">New element.</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.OnAddItem(`0,`1)">
            <summary>
            Process add item
            </summary>
            <param name="key">Key</param>
            <param name="item">Item</param>
        </member>
        <member name="P:PX.Common.Collection.KList`2.IsIgnoreDuplicateKey">
            <summary>
            Define state of duplicate key reaction.
            </summary>
            <remarks>
            false - throw the <see>System.ArgumentException</see>
            true  - ignore duplicate key items.
            </remarks>
        </member>
        <member name="M:PX.Common.Collection.KList`2.Move(System.Int32,System.Int32)">
            <summary>
            Move the element to position
            </summary>
            <param name="index">Old Position</param>
            <param name="newIndex">New Position</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.Move(`0,System.Int32)">
            <summary>
            Move the element to position
            </summary>
            <param name="key">Key value</param>
            <param name="index">new position</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.MoveBefore(`0,`0)">
            <summary>
            Move the element to position
            </summary>		
        </member>
        <member name="M:PX.Common.Collection.KList`2.MoveAfter(`0,`0)">
            <summary>
            Move the element to position
            </summary>		
        </member>
        <member name="M:PX.Common.Collection.KList`2.OnClear">
            <summary>
            Process clear conteiner
            </summary>
        </member>
        <member name="M:PX.Common.Collection.KList`2.OnRemoveItem(`0,`1)">
            <summary>
            Process remove item
            </summary>
            <param name="key">Key value.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.ChaneItemKey(`1,`0)">
            <summary>
            Change key item
            </summary>
            <remarks>Key in item must be changed after the call.</remarks>
            <param name="item">Item</param>
            <param name="newKey">New key.</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.RemoveItem(`1)">
            <summary>
            Remove item
            </summary>
            <param name="item">Item.</param>
            <returns>true - if item removed successfuly.</returns>
        </member>
        <member name="M:PX.Common.Collection.KList`2.ContainsItem(`1)">
            <summary>
            Define the item is present in container
            </summary>
            <param name="item">Item.</param>		
        </member>
        <member name="T:PX.Common.Collection.WeakSet`1">
            <summary>
            Represents a typed weak set, which references objects while still allowing them to be reclaimed by garbage collection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PX.Common.IMap`2">
            <summary>
            Represents a generic collection of key1/key2 pairs (one-to-one relation).
            </summary>
            <typeparam name="TKey">First key type.</typeparam>
            <typeparam name="TValue">Second key type.</typeparam>
        </member>
        <member name="P:PX.Common.IMap`2.Reversed">
            <summary>
            Returns current implementation with reversed generic interface but with the same data.
            </summary>
        </member>
        <member name="T:PX.Common.Map`2">
            <summary>
            Implements a generic collection of key1/key2 pairs (one-to-one relation) with O(1) search, insert and delete on both key types.
            </summary>
            <typeparam name="TKey">First key type.</typeparam>
            <typeparam name="TValue">Second key type.</typeparam>
        </member>
        <member name="M:PX.Common.Map`2.#ctor(PX.Common.IMap{`1,`0},PX.Common.NullableDictionary{`1,`0},PX.Common.NullableDictionary{`0,`1})">
            <summary>
            Constructor for reversed Map.
            </summary>
        </member>
        <member name="T:PX.Common.MultiValueDictionary`2.InnerCollectionView">
            <summary>
            An inner class that functions as a view of an ICollection within a MultiValueDictionary
            </summary>
        </member>
        <member name="T:PX.Common.MultiValueDictionary`2.Enumerator">
            <summary>
            The Enumerator class for a <see cref="T:PX.Common.MultiValueDictionary`2"/> 
            that iterates over <typeparamref name="TKey"/>-<see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> pairs.
            </summary>
        </member>
        <member name="M:PX.Common.MultiValueDictionary`2.Enumerator.#ctor(PX.Common.MultiValueDictionary{`0,`1})">
            <summary>
            Constructor for the enumerator
            </summary>
            <param name="multiValueDictionary">A MultiValueDictionary to iterate over</param>
        </member>
        <member name="M:PX.Common.MultiValueDictionary`2.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:PX.Common.MultiValueDictionary`2.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="F:PX.Common.MultiValueDictionary`2.NewCollectionFactory">
            <summary>
            The function to construct a new <see cref="T:System.Collections.Generic.ICollection`1"/>
            </summary>
        </member>
        <member name="F:PX.Common.MultiValueDictionary`2._version">
            <summary>
            The current version of this MultiValueDictionary used to determine MultiValueDictionary modification during enumeration.
            </summary>
        </member>
        <member name="M:PX.Common.MultiValueDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified <typeparamref name="TKey"/> and <typeparamref name="TValue"/> to the <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the element to add.</param>
            <param name="value">The <typeparamref name="TValue"/> of the element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <remarks>
            Unlike the Add for <see cref="T:System.Collections.IDictionary"/>, the <see cref="T:PX.Common.MultiValueDictionary`2"/> Add will not throw any exceptions.
            If the given <typeparamref name="TKey"/> is already in the <see cref="T:PX.Common.MultiValueDictionary`2"/>, 
            then <typeparamref name="TValue"/> will be added to <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> associated with <paramref name="key"/>
            </remarks>
            <remarks>
            A call to this Add method will always invalidate any currently running enumeration regardless of
            whether the Add method actually modified the <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </remarks>
        </member>
        <member name="M:PX.Common.MultiValueDictionary`2.AddRange(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds a number of key-value pairs to this <see cref="T:PX.Common.MultiValueDictionary`2"/>, where the key for each value is <paramref name="key"/>,
            and the value for a pair is an element from <paramref name="values"/>
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of all entries to add</param>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of values to add</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> and <paramref name="values"/> must be non-null</exception>
            <remarks>
            A call to this AddRange method will always invalidate any currently running enumeration regardless of
            whether the AddRange method actually modified the <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </remarks>
        </member>
        <member name="M:PX.Common.MultiValueDictionary`2.Remove(`0)">
            <summary>
            Removes every <typeparamref name="TValue"/> associated with the given <typeparamref name="TKey"/> from the <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the elements to remove</param>
            <returns>
            <c>true</c> if the removal was successful; otherwise <c>false</c>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:PX.Common.MultiValueDictionary`2.Remove(`0,`1)">
            <summary>
            Removes the first instance (if any) of the given <typeparamref name="TKey"/>-<typeparamref name="TValue"/> pair from this <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the element to remove</param>
            <param name="value">The <typeparamref name="TValue"/> of the element to remove</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> must be non-null</exception>
            <returns>
            <c>true</c> if the removal was successful; otherwise <c>false</c>
            </returns>
            <remarks>
            If the <typeparamref name="TValue"/> being removed is the last one associated with its <typeparamref name="TKey"/>,
            then that <typeparamref name="TKey"/> will be removed from the <see cref="T:PX.Common.MultiValueDictionary`2"/>
            and its associated <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> will be freed as if 
            a call to <see cref="M:System.Collections.Generic.MultiValueDictionary`2.Remove(`0)"/> had been made.
            </remarks>
        </member>
        <member name="M:PX.Common.MultiValueDictionary`2.Contains(`0,`1)">
            <summary>
            Determines if the given <typeparamref name="TKey"/>-<typeparamref name="TValue"/> pair exists within this <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the element.</param>
            <param name="value">The <typeparamref name="TValue"/> of the element.</param>
            <returns>
            <c>true</c> if found; otherwise <c>false</c>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> must be non-null</exception>
        </member>
        <member name="M:PX.Common.MultiValueDictionary`2.ContainsValue(`1)">
            <summary>
            Determines if the given <typeparamref name="TValue"/> exists within this <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </summary>
            <param name="value">A <typeparamref name="TValue"/> to search the <see cref="T:PX.Common.MultiValueDictionary`2"/> for</param>
            <returns>
            <c>true</c> if the <see cref="T:PX.Common.MultiValueDictionary`2"/> contains the <paramref name="value"/>; otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:PX.Common.MultiValueDictionary`2.Clear">
            <summary>
            Removes every <typeparamref name="TKey"/> and <typeparamref name="TValue"/> from this <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </summary>
        </member>
        <member name="P:PX.Common.MultiValueDictionary`2.Values">
            <summary>
            Gets an enumerable of <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> from this <see cref="T:PX.Common.MultiValueDictionary`2"/>,
            where each <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> is the collection of every <typeparamref name="TValue"/> associated
            with a <typeparamref name="TKey"/> present in the <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </summary>
            <value>
            An IEnumerable of each <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> in this <see cref="T:PX.Common.MultiValueDictionary`2"/>
            </value>
        </member>
        <member name="P:PX.Common.MultiValueDictionary`2.Item(`0)">
            <summary>
            Get every <typeparamref name="TValue"/> associated with the given <typeparamref name="TKey"/>.
            If <paramref name="key"/> is not found in this <see cref="T:PX.Common.MultiValueDictionary`2"/>,
            will throw a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the elements to retrieve.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> must be non-null</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/> does not have any associated <typeparamref name="TValue"/>s in this <see cref="T:PX.Common.MultiValueDictionary`2"/>.</exception>
            <value>
            An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> containing every <typeparamref name="TValue"/> associated with <paramref name="key"/>.
            </value>
            <remarks>
            Note that the <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> returned will change alongside any changes to the <see cref="T:PX.Common.MultiValueDictionary`2"/>
            </remarks>
        </member>
        <member name="P:PX.Common.MultiValueDictionary`2.Count">
            <summary>
            Returns the number of <typeparamref name="TKey"/>s with one or more associated <typeparamref name="TValue"/> 
            in this <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </summary>
            <value>
            The number of <typeparamref name="TKey"/>s in this <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </value>
        </member>
        <member name="T:PX.Common.NullableDictionary`2">
            <summary>
            Dictionary that allows null key value.
            </summary>
        </member>
        <member name="T:PX.Common.PreEnumeratedEnumerable`1">
            <summary>
            Pre-enumerates the first item in the sequence to initialize the source provider.
            </summary>
        </member>
        <member name="T:PX.Common.PXKeyedCollection`2">
            <summary>
            Represents a collection of values stored by key that can be computed for each value from the value itself.
            </summary>
        </member>
        <member name="M:PX.Common.PXKeyedCollection`2.#ctor(System.Func{`1,`0})">
            <param name="keyFunc">Function that computes corresponding key from a value.</param>
        </member>
        <member name="T:PX.Common.Trie">
            <summary>
            Double-array implementation of a trie (prefix tree).
            </summary>
            <remarks>
            Look-up is O(1) on average and O(k) in the worst case, 
            and insertion is about O(k^2) in the worst case, where k is the number of input symbols.
            
            References:
            1. Karoonboonyanan, T. An Implementation of Double-Array Trie
            2. Aoe, J. An Efficient Digital Search Algorithm by Using a Double-Array Structure
            3. Kanda, S., Morita K., Fuketa M., Aoe J. Experimental Observations of Construction Methods for Double Array Structures Using Linear Functions.
            </remarks>
        </member>
        <member name="M:PX.Common.Trie.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that the capacity of internal array is at least the given minimum value.
            If the currect capacity of the list is less than min, 
            the capacity is increased to twice the current capacity or to min,
            whichever is larger.
            </summary>
            <param name="min"></param>
        </member>
        <member name="M:PX.Common.Trie.Relocate(System.Int32,System.Int32)">
            <summary>
            Move base for state <paramref name="s"/> to a new place beginning at <paramref name="b"/>.
            </summary>
        </member>
        <member name="P:PX.Common.WebConfig.MicrosoftRedisSessionStateStoreProviderSettings.ConnectionString">
            <summary>
            Valid StackExchange.Redis connection string.
            </summary>
        </member>
        <member name="T:PX.Common.WebConfig.DynamoDBSessionStateStoreProviderSettings">
            <summary>
            Amazon DynamoDB.
            </summary>
        </member>
        <member name="F:PX.Common.WebConfig._designMode">
            <summary>
            Gets true, if we are in design mode of Visual Studio etc..
            </summary>
        </member>
        <member name="F:PX.Common.WebConfig.PortalSiteID">
            <summary>
            Identificator for Portal instances. Not used in ERP.
            </summary>
        </member>
        <member name="T:PX.Common.Cryptography.TimeConstantComparer">
            <summary>
            Helper class to do equality checks without leaking timing information.
            </summary>
        </member>
        <member name="M:PX.Common.Cryptography.TimeConstantComparer.IsEqual(System.String,System.String)">
            <summary>
            Checks two strings for equality without leaking timing information.
            </summary>
            <param name="s1">string 1.</param>
            <param name="s2">string 2.</param>
            <returns>
            	<c>true</c> if the specified strings are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:PX.Common.Disposables.CompositeDisposable">
            <summary>
            Represents a group of disposable resources that are disposed together.
            </summary>
        </member>
        <member name="M:PX.Common.Disposables.CompositeDisposable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PX.Common.Disposables.CompositeDisposable"/> class with no disposables contained by it initially.
            </summary>
        </member>
        <member name="M:PX.Common.Disposables.CompositeDisposable.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PX.Common.Disposables.CompositeDisposable"/> class with the specified number of disposables.
            </summary>
            <param name="capacity">The number of disposables that the new CompositeDisposable can initially store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than zero.</exception>
        </member>
        <member name="M:PX.Common.Disposables.CompositeDisposable.#ctor(System.IDisposable[])">
            <summary>
            Initializes a new instance of the <see cref="T:PX.Common.Disposables.CompositeDisposable"/> class from a group of disposables.
            </summary>
            <param name="disposables">Disposables that will be disposed together.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="disposables"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Any of the disposables in the <paramref name="disposables"/> collection is null.</exception>
        </member>
        <member name="M:PX.Common.Disposables.CompositeDisposable.#ctor(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Initializes a new instance of the <see cref="T:PX.Common.Disposables.CompositeDisposable"/> class from a group of disposables.
            </summary>
            <param name="disposables">Disposables that will be disposed together.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="disposables"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Any of the disposables in the <paramref name="disposables"/> collection is null.</exception>
        </member>
        <member name="P:PX.Common.Disposables.CompositeDisposable.Count">
            <summary>
            Gets the number of disposables contained in the <see cref="T:PX.Common.Disposables.CompositeDisposable"/>.
            </summary>
        </member>
        <member name="M:PX.Common.Disposables.CompositeDisposable.Add(System.IDisposable)">
            <summary>
            Adds a disposable to the <see cref="T:PX.Common.Disposables.CompositeDisposable"/> or disposes the disposable if the <see cref="T:PX.Common.Disposables.CompositeDisposable"/> is disposed.
            </summary>
            <param name="item">Disposable to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:PX.Common.Disposables.CompositeDisposable.Remove(System.IDisposable)">
            <summary>
            Removes and disposes the first occurrence of a disposable from the <see cref="T:PX.Common.Disposables.CompositeDisposable"/>.
            </summary>
            <param name="item">Disposable to remove.</param>
            <returns>true if found; false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:PX.Common.Disposables.CompositeDisposable.Dispose">
            <summary>
            Disposes all disposables in the group and removes them from the group.
            </summary>
        </member>
        <member name="M:PX.Common.Disposables.CompositeDisposable.Clear">
            <summary>
            Removes and disposes all disposables from the <see cref="T:PX.Common.Disposables.CompositeDisposable"/>, but does not dispose the <see cref="T:PX.Common.Disposables.CompositeDisposable"/>.
            </summary>
        </member>
        <member name="M:PX.Common.Disposables.CompositeDisposable.Contains(System.IDisposable)">
            <summary>
            Determines whether the <see cref="T:PX.Common.Disposables.CompositeDisposable"/> contains a specific disposable.
            </summary>
            <param name="item">Disposable to search for.</param>
            <returns>true if the disposable was found; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:PX.Common.Disposables.CompositeDisposable.CopyTo(System.IDisposable[],System.Int32)">
            <summary>
            Copies the disposables contained in the <see cref="T:PX.Common.Disposables.CompositeDisposable"/> to an array, starting at a particular array index.
            </summary>
            <param name="array">Array to copy the contained disposables to.</param>
            <param name="arrayIndex">Target index at which to copy the first disposable of the group.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero. -or - <paramref name="arrayIndex"/> is larger than or equal to the array length.</exception>
        </member>
        <member name="P:PX.Common.Disposables.CompositeDisposable.IsReadOnly">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="M:PX.Common.Disposables.CompositeDisposable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:PX.Common.Disposables.CompositeDisposable"/>.
            </summary>
            <returns>An enumerator to iterate over the disposables.</returns>
        </member>
        <member name="M:PX.Common.Disposables.CompositeDisposable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:PX.Common.Disposables.CompositeDisposable"/>.
            </summary>
            <returns>An enumerator to iterate over the disposables.</returns>
        </member>
        <member name="T:PX.Common.Disposables.Disposable">
            <summary>
            Provides a set of static methods for creating <see cref="T:System.IDisposable"/> objects.
            </summary>
        </member>
        <member name="P:PX.Common.Disposables.Disposable.Empty">
            <summary>
            Gets the disposable that does nothing when disposed.
            </summary>
        </member>
        <member name="T:PX.Common.Disposables.Disposable.DefaultDisposable">
            <summary>
            Represents a disposable that does nothing on disposal.
            </summary>
        </member>
        <member name="F:PX.Common.Disposables.Disposable.DefaultDisposable.Instance">
            <summary>
            Singleton default disposable.
            </summary>
        </member>
        <member name="M:PX.Common.Disposables.Disposable.DefaultDisposable.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:PX.Common.Disposables.Disposable.Create(System.Action)">
            <summary>
            Creates a disposable object that invokes the specified action when disposed.
            </summary>
            <param name="dispose">Action to run during the first call to <see cref="M:System.IDisposable.Dispose"/>. The action is guaranteed to be run at most once.</param>
            <returns>The disposable object that runs the given action upon disposal.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dispose"/> is <c>null</c>.</exception>
        </member>
        <member name="T:PX.Common.Disposables.Disposable.AnonymousDisposable">
            <summary>
            Represents an Action-based disposable.
            </summary>
        </member>
        <member name="M:PX.Common.Disposables.Disposable.AnonymousDisposable.#ctor(System.Action)">
            <summary>
            Constructs a new disposable with the given action used for disposal.
            </summary>
            <param name="dispose">Disposal action which will be run upon calling Dispose.</param>
        </member>
        <member name="M:PX.Common.Disposables.Disposable.AnonymousDisposable.Dispose">
            <summary>
            Calls the disposal action if and only if the current instance hasn't been disposed yet.
            </summary>
        </member>
        <member name="M:PX.Common.Drawing.GetColorNames">
            <summary>
            Gets the default color names.
            </summary>
        </member>
        <member name="M:PX.Common.Drawing.ScaleImage(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Scales an image.
            </summary>
            <param name="image">An image to scale.</param>
            <param name="width">Destination image width.</param>
            <param name="height">Destination image height.</param>
            <returns>Scaled image.</returns>
        </member>
        <member name="M:PX.Common.Drawing.ScaleImageFromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Scales an image represented as an array of bytes.
            </summary>
            <param name="binData">An array of bytes representing an image to scale.</param>
            <param name="width">Destination image width.</param>
            <param name="height">Destination image height.</param>
            <returns>Scaled image as an array of bytes.</returns>
        </member>
        <member name="T:PX.Common.EnumerableExtensions">
            <summary>
            This class contains extension methods for enumerable objects.
            </summary>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.HasFirst``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines whether the collection has at least the specified number of elements.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="count">Number of elements.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.HasAtLeast(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Determines whether the collection has at least the specified number of elements.
            </summary>
            <param name="sequence">An <see cref="T:System.Collections.IEnumerable"/> to iterate over.</param>
            <param name="elementsCount">Number of elements.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.HasAtLeast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines if the collection has the specified number of elements, counting from the beginning.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="elementsCount">Number of elements.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Returns a collection of pairs <see cref="T:System.Tuple`2"/> joining
            the first element of the first collection with the first element
            of the second collection and so on, until either of the collections ends.
            </summary>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <typeparam name="T2">Generic type parameter.</typeparam>
            <param name="collection1">The first collection.</param>
            <param name="collection2">The second collection.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.UnZip``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
            <summary>
            Unzips input collection of <see cref="T:System.Tuple`2"/> pairs into pair of collections: one contains <see cref="P:System.Tuple`2.Item1"/> 
            and the other contains <see cref="P:System.Tuple`2.Item2"/>.
            </summary>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <typeparam name="T2">Generic type parameter.</typeparam>
            <param name="zippedCol">The zipped collection to act on.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.UnZip``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},``2})">
            <summary>
            Unzips input collection of <see cref="T:System.Tuple`2"/> pairs into <typeparamref name="TOut"/> item by applying selector delegate.
            The result selector takes the sequences of <see cref="P:System.Tuple`2.Item1"/> and <see cref="P:System.Tuple`2.Item2"/> and returns <typeparamref name="TOut"/> item.
            </summary>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <typeparam name="T2">Generic type parameter.</typeparam>
            <typeparam name="TOut">Type of the out.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="resultSelector">A function to transform the sequences of <see cref="P:System.Tuple`2.Item1"/> and <see cref="P:System.Tuple`2.Item2"/> into the result value.</param>
            <returns>
            A TOut.
            </returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.UnZip``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Unzips input collection of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> pairs into pair of collections: one contains keys and the other contains values. 
            </summary>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <typeparam name="T2">Generic type parameter.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.UnZip``3(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},``2})">
            <summary>
            Unzips input collection of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> pairs into <typeparamref name="TOut"/> item by applying selector delegate. 
            The result selector takes the sequences of keys and values and returns <typeparamref name="TOut"/> item.
            </summary>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <typeparam name="T2">Generic type parameter.</typeparam>
            <typeparam name="TOut">Type of the out.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="resultSelector">A function to transform the sequences of keys and values into the result value.</param>
            <returns/>>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.UnZip``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Unzips input collection of <typeparamref name="TIn"/> items into pair of collections: one contains items of <typeparamref name="T1"/> type 
            and the other contains items of <typeparamref name="T2"/> type. Method applies <paramref name="leftSelector"/> and <paramref name="rightSelector"/>
            to each <typeparamref name="TIn"/> item of collection. The resulting two new sequences are returned as a tuple: (left sequence, right sequence).
            </summary>
            <typeparam name="TIn">Type of the elements in input collection.</typeparam>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <typeparam name="T2">Generic type parameter.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="leftSelector">The left selector.</param>
            <param name="rightSelector">The right selector.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.UnZip``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},``3})">
            <summary>
            Unzips the input collection of <typeparamref name="TIn"/> items to a <typeparamref name="TOut"/> item
            by applying three selector delegates.
            Left and right selectors are applied to each <typeparamref name="TIn"/> item of the collection resulting in two new sequences.
            Then the result selector is applied to these sequences and returns a <typeparamref name="TOut"/> item.
            </summary>
            <typeparam name="TIn">Type of the elements in input collection.</typeparam>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <typeparam name="T2">Generic type parameter.</typeparam>
            <typeparam name="TOut">Type of the result.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="leftSelector">The left selector.</param>
            <param name="rightSelector">The right selector.</param>
            <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each item of the collection.
            </summary>
            <remarks>The method is a fluent analog of the foreach cycle.</remarks>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.ForEachSelect``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            An iterator method that performs the specified action on each item of the collection and then returns that item.
            </summary>
            <remarks>Similar to ForEach.</remarks>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="action">The action.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets distinct items of the collection based on the values retrieved by the <paramref name="distinctMember"/> selector.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="distinctMember">The distinct member selector.</param>
            <returns/>
            <completionlist cref="!:"/>
            <example>
            Example of usage:
            <code>
            source.Distinct(x => x.Property);
            </code>
            </example>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.CheckedAny``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns <c>false</c> if the collection is <c>null</c> or empty.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns <c>true</c> if collection is null or empty.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.AppendObsolete``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Adds a single <paramref name="element"/> to the end of <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of enumerable to return.</typeparam>
            <returns>
            IEnumerable containing all the input elements, followed by the specified additional element.
            </returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.PrependObsolete``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Adds a single element to the start of an IEnumerable.
            </summary>
            <typeparam name="T">Type of enumerable to return.</typeparam>
            <returns>
            IEnumerable containing the specified additional element, followed by all the input elements.
            </returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Append``1(``0[],``0)">
            <summary>
            Adds a single <paramref name="element"/> to the end of the <paramref name="source"/> array.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">An array.</param>
            <param name="element">The element.</param>
            <returns>
            Array containing all the input elements, followed by the specified additional element.
            </returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Prepend``1(``0[],``0)">
            <summary>
            Adds a single element to the beginning of the <paramref name="tail"/> array.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="tail">An array.</param>
            <param name="head">The element to insert.</param>
            <returns>
            Array containing the specified additional element followed by all the input elements.
            </returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Append``1(``0[],``0[])">
            <summary>
            Adds an array of <paramref name="elements"/> to the end of <paramref name="source"/> array.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">An array.</param>
            <param name="elements">An array of elements.</param>
            <returns>
            Array containing all the input elements, followed by the specified additional elements.
            </returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Prepend``1(``0[],``0[])">
            <summary>
            Adds an array of <paramref name="head"/> elements to the start of <paramref name="tail"/> array.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="tail">An array.</param>
            <param name="head">The elements to insert at start.</param>
            <returns>
            Array containing the specified additional elements, followed by all the input elements.
            </returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the collection without <c>null</c> elements.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="collection">The collection to act on.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
             Adds a collection of pairs <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="dictionary">The dictionary to add items to.</param>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.SetRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Sets new values for the <see cref="T:System.Collections.Generic.IDictionary`2"/> <paramref name="dictionary"/> keys 
            from the given collection of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> pairs.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="dictionary">The dictionary in which to replace values.</param>
            <param name="items">The pairs collection.</param>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.AddRange``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a collection of <paramref name="items"/> to <paramref name="set"/>.
            </summary>
            <typeparam name="TKey">Type of the set elements.</typeparam>
            <param name="set">The set to add items to.</param>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.RemoveRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes the entries corresponding to the given collection of keys from the dictionary.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="dictionary">The dictionary to act on.</param>
            <param name="items">The keys to remove.</param>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Select``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``0,``1,``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Projects each element of a dictionary into a new form.</summary>
            <param name="source">A dictionary to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each key/value pair.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <see langword="null" /> to use existing <see cref="T:System.Collections.Generic.EqualityComparer`1" /> from the <paramref name="source" /> for the type of the key.</param>
            <typeparam name="TKey">The type of the key of <paramref name="source" />.</typeparam>
            <typeparam name="TValue">The type of the value of <paramref name="source" />.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Select``2(System.Collections.Generic.Dictionary{``0,``1},System.Func{``0,``1,``1})">
            <summary>Projects each element of a dictionary into a new form.</summary>
            <param name="source">A dictionary to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each key/value pair.</param>
            <typeparam name="TKey">The type of the key of <paramref name="source" />.</typeparam>
            <typeparam name="TValue">The type of the value of <paramref name="source" />.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.Dictionary`2" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.NextOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Returns the next element of the sequence <paramref name="source"/>
            after the element that satisfies the condition <paramref name="predicate"/>
            or the default value if no such element is found or there
            is no next element.
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="predicate">The predicate (the condition).</param>
            <param name="defaultValue">(Optional) The default value.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.FirstOrAny``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Returns the first element of the sequence <paramref name="source"/> that satisfies the condition <paramref name="predicate"/>,
            the last item of the sequence if no such element is found, or the default
            value if the sequence is empty.
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="predicate">The predicate (the condition).</param>
            <param name="defaultValue">(Optional) The default value.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the sequence of elements from the original collection not equal to the given <paramref name="value"/>.
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="value">The value to exclude from <paramref name="source"/>.</param>
            <returns/>
            <remarks>
            The equality comparison is done by the .Net <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> comparer.
            </remarks>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.AsSingleEnumerable``1(``0)">
            <summary>
            Transforms <paramref name="item"/> into <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            If <paramref name="item"/> is <c>null</c>, the method returns an empty collection;
            otherwise, it returns one-element collection containing the item.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="item">The item to use.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Modify``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Applies an action to each element of the collection and returns the original collection with modified elements.
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="action">The action to perform on each element.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2},System.Func{``1,System.Boolean})">
            <summary>
            Applies an accumulator function to a sequence.
            The <paramref name="seed"/> parameter is used as the initial accumulator value,
            the <paramref name="func"/> aggregation function is applied to the <paramref name="source"/> sequence,
            and the <paramref name="resultSelector"/> function is applied to the intermediate result;
            the <paramref name="exitPredicate"/> condition determines whether the aggregation process should be stopped.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <typeparam name="TResult">The type of the resulting value.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to aggregate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
            <param name="exitPredicate">A function to determine the exit condition based on the accumulator state.</param>
            <returns>The transformed accumulator value.</returns>
            <remarks>
            This is an extended version of the LINQ <tt>Aggregate</tt> method with the additional
            <tt>exitPredicate</tt> parameter that allows to stop calculations before the end of the sequence is reached.
            </remarks>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1[])">
            <summary>
            Ordering with priorities. The method extends the LINQ <tt>OrderBy</tt> method with an array of priorities
            (values of the same type as the selector output).
            <paramref name="keySelector"/> is applied to each item of the <paramref name="source"/> collection,
            then the index in the <paramref name="priority"/> array is found.
            The collection is sorted according to these indexes:
            the item with the lower index in the priority array goes first,
            the item not present in the priority array goes last.
            After that the LINQ <tt>ThenBy(keySelector)</tt> method is applied.
            </summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="TField">Type of the key.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="keySelector">The key selector.</param>
            <param name="priority">A variable-length parameters list containing keys in priority order.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.GetHashCodeOfSequence(System.Collections.IEnumerable)">
            <summary>
            Calculates the hash of all elements of a sequence and combines them to a single one.
            </summary>
            <param name="sequence">An <see cref="T:System.Collections.IEnumerable"/> to iterate over.</param>
            <returns>
            The hash of a sequence.
            </returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Returns the set of unique elements in the <paramref name="first"/> sequence
            that are not present in the <paramref name="second"/> sequence,
            according to the <paramref name="keySelector"/> key selector.
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <typeparam name="TKey">Type of the key.</typeparam>
            <param name="first">The first sequence to act on.</param>
            <param name="second">The second sequence to act on.</param>
            <param name="keySelector">The key selector.</param>
            <param name="keyComparer">(Optional) The key comparer.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IntersectBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Returns the set of unique elements in the <paramref name="first"/> sequence
            that are present in the <paramref name="second"/> sequence, according to the <paramref name="keySelector"/> key selector.
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <typeparam name="TKey">Type of the key.</typeparam>
            <param name="first">The first sequence to act on.</param>
            <param name="second">The second sequence to act on.</param>
            <param name="keySelector">The key selector.</param>
            <param name="keyComparer">(Optional) The key comparer.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.SelectIndexesWhere``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Selects the indexes of those elements of <paramref name="enumerable"/>
            for which <paramref name="condition"/> is <c>true</c>.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="enumerable">The enumerable object to act on.</param>
            <param name="condition">The condition.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/> wrapper for the dictionary.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="dict">The dictionary to act on.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Converts a collection of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="enumerable">The collection of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to act on.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.ToStack``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts a collection to a stack.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="enumerable">The enumerable object to act on.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.ToQueue``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts a collection to a queue.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="enumerable">The enumerable object to act on.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.ToHashSetAcu``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Converts a collection to a hash set.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="enumerable">The enumerable to act on.</param>
            <param name="comparer">(Optional) The comparer.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.ToLinkedList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts a collection to a linked list.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="enumerable">The enumerable object to act on.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Find``1(System.Collections.Generic.LinkedList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Iterates over <paramref name="list"/> from the beginning
            searching for the first item that satisfies <paramref name="predicate"/>. 
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The linked list to act on.</param>
            <param name="predicate">The predicate.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.FindLast``1(System.Collections.Generic.LinkedList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Iterates over <paramref name="list"/> starting from its end
            searching for the item that satisfies the predicate. 
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The linked list to act on.</param>
            <param name="predicate">The predicate.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.ToEmptyList``1(``0)">
            <summary>
            Creates an empty <see cref="T:System.Collections.Generic.List`1"/> of objects of the same type as <paramref name="instanceOfTargetedType"/>.
            </summary>
            <typeparam name="T">Type of a <paramref name="instanceOfTargetedType"/></typeparam>
            <param name="instanceOfTargetedType">An object whose type is used to create a list.</param>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> extension method that converts collection to a list with initially specified size internal array.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="capacity">The initial capacity.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Denormalize``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <exclude/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Denormalize``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <exclude/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Consume``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Iterates through the <paramref name="enumerable"/> collection without saving its elements.
            </summary>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Consume(System.Collections.IEnumerable)">
            <summary>
            Iterates through the <paramref name="enumerable"/> collection without saving its elements.
            </summary>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Dequeue``1(System.Collections.Generic.Queue{``0},System.Int32)">
            <summary>
            Removes and returns the <paramref name="dequeueCount"/> of objects at the beginning of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Pop``1(System.Collections.Generic.Stack{``0},System.Int32)">
            <summary>
            Removes and returns the <paramref name="popCount"/> of objects at the top of the <see cref="T:System.Collections.Generic.Stack`1"/>.
            </summary>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <exclude/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.DisuniteBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Disunites a collection into two collections, where the first one contains elements for which the <paramref name="predicate"/> is met, and where the second collection contains the other ones.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="enumerable">The enumerable to act on.</param>
            <param name="predicate">The predicate.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is among <paramref name="values"/>.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="values">The values collection.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsIn``1(``0,``0,``0)">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is among the specified two values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsIn``1(``0,``0,``0,``0)">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is among the specified three values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsIn``1(``0,``0,``0,``0,``0)">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is among the specified four values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="forthValue">The forth value.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsIn``1(``0,``0,``0,``0,``0,``0,``0[])">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is among the specified values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="forthValue">The forth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="otherValues">The rest of values.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsIn``1(System.Nullable{``0},System.Nullable{``0},System.Nullable{``0},System.Nullable{``0},System.Nullable{``0},System.Nullable{``0},System.Nullable{``0}[])">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is among the specified values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="forthValue">The forth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="otherValues">The rest of values.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is not among <paramref name="values"/>.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="values">The collection of values.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsNotIn``1(``0,``0,``0)">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is not among the two values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsNotIn``1(``0,``0,``0,``0)">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is not among the three values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsNotIn``1(``0,``0,``0,``0,``0)">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is not among the three values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="forthValue">The fourth value.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsNotIn``1(``0,``0,``0,``0,``0,``0,``0[])">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is not among the specified values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="forthValue">The forth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="otherValues">The rest of values.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsNotIn``1(System.Nullable{``0},System.Nullable{``0},System.Nullable{``0},System.Nullable{``0},System.Nullable{``0},System.Nullable{``0},System.Nullable{``0}[])">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is not among the specified values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="forthValue">The forth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="otherValues">The rest of values.</param>
            <returns></returns>
        </member>
        <member name="T:PX.Common.EventArgs`1">
            <summary>
            This class universal event arguments for transporting single value.
            </summary>
            <typeparam name="T">Event data.</typeparam>
        </member>
        <member name="M:PX.Common.EventArgs`1.#ctor(`0)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Event data.</param>
        </member>
        <member name="P:PX.Common.EventArgs`1.Value">
            <summary>
            Gets event data.
            </summary>
        </member>
        <member name="T:PX.Common.ExceptionEventArgs">
            <summary>
            This class provides data for error events and methods.
            </summary>
        </member>
        <member name="M:PX.Common.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Default constructor.
            </summary>
            <param name="exception">Exception.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>exception</b> is null reference value.</exception>
        </member>
        <member name="P:PX.Common.ExceptionEventArgs.Exception">
            <summary>
            Gets exception.
            </summary>
        </member>
        <member name="M:PX.Common.Extensions.StringExtensions.FirstSegment(System.String,System.Char)">
            <summary>Returns substring which contains all characters before first occurence of a specified character.</summary>
            <param name="str">The string to act on.</param>
            <param name="separator">The Unicode character to seek.</param>
        </member>
        <member name="M:PX.Common.Extensions.StringExtensions.FirstSegment(System.String,System.Char[])">
            <summary>Returns substring which contains all characters before first occurence of one of the specified characters.</summary>
            <param name="str">The string to act on.</param>
            <param name="separator">The Unicode characters to seek.</param>
        </member>
        <member name="M:PX.Common.Extensions.StringExtensions.LastSegment(System.String,System.Char)">
            <summary>Returns substring which contains all characters after last occurence of a specified character.</summary>
            <param name="str">The string to act on.</param>
            <param name="separator">The Unicode character to seek.</param>
        </member>
        <member name="M:PX.Common.Extensions.StringExtensions.LastSegment(System.String,System.Char[])">
            <summary>Returns substring which contains all characters after last occurence of one of the specified characters.</summary>
            <param name="str">The string to act on.</param>
            <param name="separators">The Unicode characters to seek.</param>
        </member>
        <member name="M:PX.Common.Extensions.StringExtensions.RestSegment(System.String,System.Char,System.UInt16)">
            <summary>Returns substring which contains all characters after some number of occurences of a specified character.</summary>
            <param name="str">The string to act on.</param>
            <param name="separator">The Unicode character to seek.</param>
            <param name="count">The number of character's occurences.</param>
            <exception cref="T:System.IndexOutOfRangeException">The number of character's occurences is less than specified count.</exception>
        </member>
        <member name="M:PX.Common.Extensions.StringExtensions.Segment(System.String,System.Char,System.UInt16)">
            <summary>Splits a string into substrings that are based on the specified character and returns an element with the specified number.</summary>
            <param name="str">The string to act on.</param>
            <param name="separator">The Unicode character to seek.</param>
            <param name="number">The zero-based index of the segment.</param>
            <exception cref="T:System.IndexOutOfRangeException">There is no element with the specified number.</exception>
        </member>
        <member name="M:PX.Common.ExceptionExtensions.CheckIfNull``1(``0,System.String,System.String)">
            <summary>
            Checks the <paramref name="obj"/> for <c>null</c> and throws <see cref="T:System.ArgumentNullException"/> if object is <c>null</c>. Otherwise returns object. 
            Allows combination of assignment of usage of object with check for <c>null</c>.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="obj">The object to act on.</param>
            <param name="paramName">(Optional) Name of the parameter.</param>
            <param name="message">(Optional) The exception message.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns/>
        </member>
        <member name="M:PX.Common.ExceptionExtensions.ThrowOnNull``1(``0,System.String,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if object is <c>null</c>.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="obj">The object to act on.</param>
            <param name="paramName">(Optional) Name of the parameter.</param>
            <param name="message">(Optional) The exception message.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:PX.Common.ExceptionExtensions.CheckIfNullOrWhiteSpace(System.String,System.String,System.String)">
            <summary>
            An extension method for fluent patterns that throws <see cref="T:System.ArgumentNullException"/> if <paramref name="str"/> is null and
            throws <see cref="T:System.ArgumentException"/> if <paramref name="str"/> contains only whitespaces or is empty.
            Otherwise returns the <paramref name="str"/>.
            </summary>
            <param name="str">The string to act on.</param>
            <param name="paramName">(Optional) Name of the parameter for <see cref="T:System.ArgumentNullException"/> or <see cref="T:System.ArgumentException"/>.</param>
            <param name="message">(Optional) The error message.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.ExceptionExtensions.ThrowOnNullOrWhiteSpace(System.String,System.String,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if string is null or contains only whitespaces.
            </summary>
            <param name="str">The string to act on.</param>
            <param name="paramName">(Optional) Name of the parameter.</param>
            <param name="message">(Optional) The exception message.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:PX.Common.ExceptionExtensions.RethrowResult`1.Case``1(System.Action{``0})">
            <summary>
            This method is intended to use inside exception filters <b>only</b>.
            <br/>
            Only the first method that matches the exception type <typeparamref name="T"/> is executed.
            </summary>
            <returns><see cref="T:PX.Common.ExceptionExtensions.RethrowResult`1"/> to use in the fluent call chain. Always interpreted as <see langword="false" /> by the exception filter.</returns>
            <example><code>catch (Exception ex) when(ex.Rethrow().Case&lt;PXSetPropertyException&gt;(PXTrace.WriteError))</code></example>
        </member>
        <member name="M:PX.Common.ExceptionExtensions.RethrowResult`1.Default(System.Action{`0})">
            <summary>
            This method is intended to use inside exception filters <b>only</b>.
            <br/>
            It is executed only when none of <see cref="M:PX.Common.ExceptionExtensions.RethrowResult`1.Case``1(System.Action{``0})"/> methods have been executed previously.
            </summary>
            <returns>Always <see langword="false" /> to fail the condition in the exception filter and thus skip the <see langword="catch" /> block.</returns>
            <example><code>catch (Exception ex) when(ex.Rethrow().Case&lt;PXSetPropertyException&gt;(PXTrace.WriteError).Default(e => PXTrace.WriteDebug("Failed"))</code></example>
        </member>
        <member name="M:PX.Common.ExceptionExtensions.Rethrow``1(``0)">
            <summary>
            This method is intended to use inside exception filters <b>only</b>.
            <br/>
            Only the first <see cref="M:PX.Common.ExceptionExtensions.RethrowResult`1.Case``1(System.Action{``0})"/> method that matches the exception type is executed.
            </summary>
            <returns><see cref="T:PX.Common.ExceptionExtensions.RethrowResult`1"/> to use in the fluent call chain. Always interpreted as <see langword="false" /> by the exception filter.</returns>
            <example><code>catch (Exception ex) when(ex.Rethrow().Case&lt;PXSetPropertyException&gt;(PXTrace.WriteError))</code></example>
        </member>
        <member name="M:PX.Common.ExceptionExtensions.Rethrow``1(``0,System.Action{``0})">
            <summary>
            This method is intended to use inside exception filters <b>only</b>.
            </summary>
            <returns>Always <see langword="false" /> to fail the condition in the exception filter and thus skip the <see langword="catch" /> block.</returns>
            <example><code>catch (Exception ex) when(ex.Rethrow(PXTrace.WriteError))</code></example>
        </member>
        <member name="M:PX.Common.ServiceLocatorExtensions.TryGetInstance``1(CommonServiceLocator.IServiceLocator,``0@)">
            <summary>
            Tries to get an instance of the given <typeparamref name="TService" />.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <param name="serviceLocator"></param>
            <param name="service">The requested service instance.</param>
            <returns><see langword="true"/>, if the service has been successfully resolved; <see langword="false"/>, if the service is not registered or there are errors resolving the service instance.</returns>
        </member>
        <member name="M:PX.Common.ServiceLocatorExtensions.TryGetInstance``1(CommonServiceLocator.IServiceLocator,System.String,``0@)">
            <summary>
            Tries to get an instance of the given <typeparamref name="TService" />.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <param name="serviceLocator"></param>
            <param name="key">Name the object was registered with.</param>
            <param name="service">The requested service instance.</param>
            <returns><see langword="true"/>, if the service has been successfully resolved; <see langword="false"/>, if the service is not registered, or there are errors resolving the service instance.</returns>
        </member>
        <member name="T:PX.Common.FormatHelper`1">
            <summary>
            Implements ability to parse custom format strings (C# format) and apply formatting according to described rules.
            </summary>
        </member>
        <member name="T:PX.Common.GCHelper">
            <summary>
            Contains optimized methods for the .NET Garbage Collector (GC).
            </summary>
        </member>
        <member name="M:PX.Common.GCHelper.ForcedCollect(System.Boolean)">
            <summary>
            Runs garbage collector for all generations two times: one as usual and one with maximum memory pressure (by default).
            </summary>
            <param name="alwaysAddPresure">If true, GC always collects garbage with memory pressure (both times).</param>
        </member>
        <member name="T:PX.Common.GenericCall">
            <summary>
            Provides the ability to call generic methods from non-generic context. 
            </summary>
        </member>
        <member name="M:PX.Common.GenericCall.Of``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Captures a generic method call, which further will be called with replaced generic arguments.
            </summary>
            <param name="genericCallExpression">Expression that calls the method</param>
        </member>
        <member name="M:PX.Common.GenericCall.OfFunction`1.ButWith(System.Type,System.Type[])">
            <summary>
            Calls the captured generic method with generic arguments sequentially replaced with corresponding types.
            Each type substitutes generic argument corresponding to its index.
            All types which index is out of range will be ignored.
            Arguments without a substitute or with a null-substitute will not be replaced.
            </summary>
            <param name="firstArgument">Type to replace first generic argument of the captured generic method.</param>
            <param name="furtherArguments">Types to replace sequentially second and further generic arguments of the captured generic method.</param>
            <returns>Value that the captured method returns</returns>
        </member>
        <member name="M:PX.Common.GenericCall.OfFunction`1.ButWithPositionalRemap(System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.Type})">
            <summary>
            Calls the captured generic method with generic arguments replaced in specific positions with corresponding types.
            </summary>
            <param name="argumentsPositionalMap">
            Types to replace generic arguments in specific positions of the captured generic method.
            Each type substitutes generic argument corresponding to its index.
            All types which index is out of range will be ignored.
            Arguments without a substitute or with a null-substitute will not be replaced.
            </param>
            <returns>Value that the captured method returns</returns>
        </member>
        <member name="M:PX.Common.GenericCall.OfFunction`1.ButWithTypeRemap(System.Collections.Generic.IReadOnlyDictionary{System.Type,System.Type})">
            <summary>
            Calls the captured generic method with specific generic arguments replaced with corresponding types.
            </summary>
            <param name="argumentsTypeMap">
            Types to replace specific generic arguments of the captured generic method.
            Each type substitutes specific generic argument corresponding to its target type.
            All types which target type is not presented in generic arguments of the captured method will be ignored.
            Arguments without a substitute or with a null-substitute will not be replaced.
            </param>
            <returns>Value that the captured method returns</returns>
        </member>
        <member name="M:PX.Common.GenericCall.Of(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Captures a generic method call, which further will be called with replaced generic arguments.
            </summary>
            <param name="genericCallExpression">Expression that calls the method</param>
        </member>
        <member name="M:PX.Common.GenericCall.OfAction.ButWith(System.Type,System.Type[])">
            <summary>
            Calls the captured generic method with generic arguments sequentially replaced with corresponding types.
            Each type substitutes generic argument corresponding to its index.
            All types which index is out of range will be ignored.
            Arguments without a substitute or with a null-substitute will not be replaced.
            </summary>
            <param name="firstArgument">Type to replace first generic argument of the captured generic method.</param>
            <param name="furtherArguments">Types to replace sequentially second and further generic arguments of the captured generic method.</param>
        </member>
        <member name="M:PX.Common.GenericCall.OfAction.ButWithPositionalRemap(System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.Type})">
            <summary>
            Calls the captured generic method with generic arguments replaced in specific positions with corresponding types.
            </summary>
            <param name="argumentsPositionalMap">
            Types to replace generic arguments in specific positions of the captured generic method.
            Each type substitutes generic argument corresponding to its index.
            All types which index is out of range will be ignored.
            Arguments without a substitute or with a null-substitute will not be replaced.
            </param>
        </member>
        <member name="M:PX.Common.GenericCall.OfAction.ButWithTypeRemap(System.Collections.Generic.IReadOnlyDictionary{System.Type,System.Type})">
            <summary>
            Calls the captured generic method with specific generic arguments replaced with corresponding types.
            </summary>
            <param name="argumentsTypeMap">
            Types to replace specific generic arguments of the captured generic method.
            Each type substitutes specific generic argument corresponding to its target type.
            All types which target type is not presented in generic arguments of the captured method will be ignored.
            Arguments without a substitute or with a null-substitute will not be replaced.
            </param>
        </member>
        <member name="T:PX.Common.GetComparer">
            <summary>
            Provides <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> or <see cref="T:System.Collections.Generic.IComparer`1"/> by recieved field selector function
            </summary>
        </member>
        <member name="M:PX.Common.GetComparer.OfEqualityBy``2(System.Func{``0,``1})">
            <summary>
            Provides an <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> which performs object equality comparison by selected field
            </summary>
            <typeparam name="T">Type of the comparing objects</typeparam>
            <typeparam name="TValue">Type of selected field of comparing objects</typeparam>
            <param name="fieldSelector">Function that select a field by which comparison is performed</param>
        </member>
        <member name="M:PX.Common.GetComparer.By``2(System.Func{``0,``1})">
            <summary>
            Provides an <see cref="T:System.Collections.Generic.IComparer`1"/> which performs object comparison by selected field that implementing the <see cref="T:System.IComparable`1"/> interface
            </summary>
            <typeparam name="T">Type of the comparing objects</typeparam>
            <typeparam name="TValue">Type of selected field of comparing objects. Must implement the <see cref="T:System.IComparable`1"/> interface</typeparam>
            <param name="fieldSelector">Function that select a field by which comparison is performed</param>
        </member>
        <member name="M:PX.Common.GetComparer.ByNonGeneric``2(System.Func{``0,``1})">
            <summary>
            Provides an <see cref="T:System.Collections.Generic.IComparer`1"/> which performs object comparison by selected field that implementing the <see cref="T:System.IComparable"/> interface
            </summary>
            <typeparam name="T">Type of the comparing objects</typeparam>
            <typeparam name="TValue">Type of selected field of comparing objects. Must implement the <see cref="T:System.IComparable"/> interface</typeparam>
            <param name="fieldSelector">Function that select a field by which comparison is performed</param>
        </member>
        <member name="T:PX.Common.GS1.AI">
            <summary>
            Information Class for an Application Identifier (AI)
            </summary>
        </member>
        <member name="T:PX.Common.GS1.StringData">
            <summary>
            Data that is of any <see cref="T:PX.Common.GS1.DataType"/>.
            </summary>
        </member>
        <member name="T:PX.Common.GS1.DecimalData">
            <summary>
            Data that corresponds to <see cref="F:PX.Common.GS1.DataType.Decimal"/>.
            </summary>
        </member>
        <member name="T:PX.Common.GS1.CurrencyData">
            <summary>
            Data that corresponds to <see cref="F:PX.Common.GS1.DataType.Currency"/>.
            </summary>
        </member>
        <member name="T:PX.Common.GS1.DateTimeData">
            <summary>
            Data that corresponds to <see cref="F:PX.Common.GS1.DataType.DateTime"/>.
            </summary>
        </member>
        <member name="T:PX.Common.GS1.ListData">
            <summary>
            Data that corresponds to <see cref="F:PX.Common.GS1.DataType.List"/>.
            </summary>
        </member>
        <member name="M:PX.Common.GS1.Parser.Parse(System.String,System.Boolean)">
            <summary>
            Parse the ean128 code
            </summary>
            <param name="data">The raw scanner data</param>
            <param name="throwException">If an exception will be thrown if an AI cannot be found</param>
            <returns>The different parts of the ean128 code</returns>
        </member>
        <member name="T:PX.Common.HostEntry">
            <summary>
            This class represent DNS host entry.
            </summary>
        </member>
        <member name="M:PX.Common.HostEntry.#ctor(System.String,System.Net.IPAddress[],System.String[])">
            <summary>
            Default constructor.
            </summary>
            <param name="hostName">DNS host name.</param>
            <param name="ipAddresses">Host IP addresses.</param>
            <param name="aliases">Host aliases(CNAME).</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hostName</b> or <b>ipAddresses</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.HostEntry.HostName">
            <summary>
            Gets DNS host name.
            </summary>
        </member>
        <member name="P:PX.Common.HostEntry.Addresses">
            <summary>
            Gets list of IP addresses that are associated with a host.
            </summary>
        </member>
        <member name="P:PX.Common.HostEntry.Aliases">
            <summary>
            Gets list of aliases(CNAME) that are associated with a host.
            </summary>
        </member>
        <member name="T:PX.Common.IAsyncOP">
            <summary>
            Represents asynchronous operation.
            </summary>
        </member>
        <member name="P:PX.Common.IAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:PX.Common.IAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
        </member>
        <member name="T:PX.Common.IPXIdentity">
            <summary>
            Contains the context information for the current user identity.
            </summary>
        </member>
        <member name="P:PX.Common.IPXIdentity.Username">
            <summary>
            <para>Returns the username for the current user.</para>
            <para>Please note that the tenant ID is not returned as a part of the username;
            it is returned by <see cref="P:PX.Common.IPXIdentity.TenantId"/> property.</para>
            </summary>
        </member>
        <member name="P:PX.Common.IPXIdentity.TenantId">
            <summary>
            Returns Tenant ID (login name) for the current tenant,
            or <see langword="null"/> if there is only a single tenant in the system.
            </summary>
        </member>
        <member name="P:PX.Common.IPXIdentity.BranchId">
            <summary>
            Returns the ID of the current branch, or <see langword="null"/>
            if Multi-Branch Support feature is turned off or there are no branches in the system.
            </summary>
        </member>
        <member name="P:PX.Common.IPXIdentity.Culture">
            <summary>
            Returns the current culture. If it is not defined, invariant culture should be returned.
            </summary>
        </member>
        <member name="P:PX.Common.IPXIdentity.BusinessDate">
            <summary>
            Returns the current business date. If it is not defined, the current date should be returned.
            </summary>
        </member>
        <member name="P:PX.Common.IPXIdentity.TimeZone">
            <summary>
            Returns the current time zone. If it is not defined, invariant timezone should be returned. 
            </summary>
        </member>
        <member name="P:PX.Common.IPXIdentityAccessor.Identity">
            <summary>
            Returns the information about the current user identity,
            or <see langword="null"/> if there is no identity available.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.AclEntry">
            <summary>
            This class represents IMAP ACL entry. Defined in RFC 4314 3.6.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.AclEntry.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="identifier">ACL identifier. Normally this is user or group name.</param>
            <param name="rights">ACL rights string.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>identifier</b> or <b>rights</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:PX.Common.IMAP.AclEntry.Identifier">
            <summary>
            Gets ACL identifier. Normally this is user or group name.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.AclEntry.Rights">
            <summary>
            Gets rights.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.ACLFlags">
            <summary>
            IMAP ACL(access control list) rights.
            </summary>
        </member>
        <member name="F:PX.Common.IMAP.ACLFlags.None">
            <summary>
            No permissions at all.
            </summary>
        </member>
        <member name="F:PX.Common.IMAP.ACLFlags.l">
            <summary>
            Lookup (mailbox is visible to LIST/LSUB commands).
            </summary>
        </member>
        <member name="F:PX.Common.IMAP.ACLFlags.r">
            <summary>
            Read (SELECT the mailbox, perform CHECK, FETCH, PARTIAL,SEARCH, COPY from mailbox).
            </summary>
        </member>
        <member name="F:PX.Common.IMAP.ACLFlags.s">
            <summary>
            Keep seen/unseen information across sessions (STORE SEEN flag).
            </summary>
        </member>
        <member name="F:PX.Common.IMAP.ACLFlags.w">
            <summary>
            Write (STORE flags other than SEEN and DELETED).
            </summary>
        </member>
        <member name="F:PX.Common.IMAP.ACLFlags.i">
            <summary>
            Insert (perform APPEND, COPY into mailbox).
            </summary>
        </member>
        <member name="F:PX.Common.IMAP.ACLFlags.p">
            <summary>
            Post (send mail to submission address for mailbox,not enforced by IMAP4 itself).
            </summary>
        </member>
        <member name="F:PX.Common.IMAP.ACLFlags.c">
            <summary>
            Create (CREATE new sub-mailboxes in any implementation-defined hierarchy).
            </summary>
        </member>
        <member name="F:PX.Common.IMAP.ACLFlags.d">
            <summary>
            Delete (STORE DELETED flag, perform EXPUNGE).
            </summary>
        </member>
        <member name="F:PX.Common.IMAP.ACLFlags.a">
            <summary>
            Administer (perform SETACL).
            </summary>
        </member>
        <member name="F:PX.Common.IMAP.ACLFlags.All">
            <summary>
            All permissions
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.Client.ImapClient">
            <summary>
            IMAP v4 Client. Defined in RFC 3501.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.Client.ImapClient.FetchResponseReader">
            <summary>
            This class implements FETCH response reader.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.FetchResponseReader.#ctor(PX.Common.IMAP.Client.ImapClient,System.String,PX.Common.IMAP.Client.ImapClientFetchHandler)">
            <summary>
            Default constructor.
            </summary>
            <param name="imap">IMAP client.</param>
            <param name="fetchLine">Initial FETCH response line.</param>
            <param name="handler">Fetch data-items handler.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>imap</b>,<b>fetchLine</b> or <b>handler</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.FetchResponseReader.Start">
            <summary>
            Starts reading FETCH response.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.FetchResponseReader.GetReader">
            <summary>
            Gets FETCH current line data reader.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.FetchResponseReader.ReadString">
            <summary>
            Reads string. Quoted-string-string-literal and NIL supported.
            </summary>
            <returns>Returns readed string.</returns>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.Disconnect">
            <summary>
            Closes connection to IMAP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.StartTls">
            <summary>
            Switches connection to secure connection.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is raised when connection is already secure and this method is called or
            when IMAP client is not in valid state(not-connected or not-authenticated state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.Login(System.String,System.String)">
            <summary>
            Authenticates user using IMAP-LOGIN method.
            </summary>
            <param name="user">User name.</param>
            <param name="password">Password.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>user</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when user is already authenticated and this method is called or
            when IMAP client is not in valid state(not-connected state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.GetNamespaces">
            <summary>
            Gets IMAP server namespaces.
            </summary>
            <returns>Returns namespaces responses.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected or not-authenticated state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.GetFolders(System.String)">
            <summary>
            Gets folders list.
            </summary>
            <param name="filter">Folders filter. If this value is null, all folders are returned.</param>
            <returns>Returns folders list.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected or not-authenticated state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
            <remarks>
            The character "*" is a wildcard, and matches zero or more
            characters at this position.  The character "%" is similar to "*",
            but it does not match a hierarchy delimiter.  If the "%" wildcard
            is the last character of a mailbox name argument, matching levels
            of hierarchy are also returned.
            </remarks>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.CreateFolder(System.String)">
            <summary>
            Creates new folder.
            </summary>
            <param name="folder">Folder name with path.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folder</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected or not-authenticated state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.DeleteFolder(System.String)">
            <summary>
            Deletes specified folder.
            </summary>
            <param name="folder">Folder name with path.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folder</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected or not-authenticated state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.RenameFolder(System.String,System.String)">
            <summary>
            Renames exisiting folder name.
            </summary>
            <param name="folder">Folder name with path to rename.</param>
            <param name="newFolder">New folder name with path.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folder</b> or <b>newFolder</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected or not-authenticated state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.GetSubscribedFolders(System.String)">
            <summary>
            Get user subscribed folders list.
            </summary>
            <param name="filter">Folders filter. If this value is null, all folders are returned.</param>
            <returns>Returns subscribed folders list.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected or not-authenticated state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
            <remarks>
            The character "*" is a wildcard, and matches zero or more
            characters at this position.  The character "%" is similar to "*",
            but it does not match a hierarchy delimiter.  If the "%" wildcard
            is the last character of a mailbox name argument, matching levels
            of hierarchy are also returned.
            </remarks>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.SubscribeFolder(System.String)">
            <summary>
            Subscribes specified folder.
            </summary>
            <param name="folder">Foler name with path.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folder</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected or not-authenticated state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.UnsubscribeFolder(System.String)">
            <summary>
            Unsubscribes specified folder.
            </summary>
            <param name="folder">Foler name with path.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folder</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected or not-authenticated state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.FolderStatus(System.String)">
            <summary>
            Gets the specified folder status.
            </summary>
            <param name="folder">Folder name with path.</param>
            <returns>Returns STATUS responses.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folder</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected or not-authenticated state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.SelectFolder(System.String)">
            <summary>
            Selects specified folder.
            </summary>
            <param name="folder">Folder name with path.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folder</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected or not-authenticated state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.ExamineFolder(System.String)">
            <summary>
            Selects folder as read-only, no changes to messages or flags not possible.
            </summary>
            <param name="folder">Folder name with path.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folder</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected or not-authenticated state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.GetFolderQuotaRoots(System.String)">
            <summary>
            Gets specified folder quota roots and their quota resource usage.
            </summary>
            <param name="folder">Folder name with path.</param>
            <returns>Returns quota-roots and their resource limit entries.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folder</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected or not-authenticated state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.GetFolderQuota(System.String)">
            <summary>
            Gets the specified folder quota-root resource limit entries.
            </summary>
            <param name="quotaRootName">Quota root name.</param>
            <returns>Returns quota-root resource limit entries.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>quotaRootName</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected or not-authenticated state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.GetFolderAcl(System.String)">
            <summary>
            Gets the specified folder ACL entries.
            </summary>
            <param name="folder">Folder name with path.</param>
            <returns>Returns folder ACL entries.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folder</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected or not-authenticated state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.SetFolderAcl(System.String,System.String,PX.Common.IMAP.FlagsSetType,PX.Common.IMAP.ACLFlags)">
            <summary>
            Sets the specified folder ACL.
            </summary>
            <param name="folder">Folder name with path.</param>
            <param name="user">User name.</param>
            <param name="setType">Specifies how flags are set.</param>
            <param name="permissions">ACL permissions.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folder</b> or <b>user</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected or not-authenticated state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.DeleteFolderAcl(System.String,System.String)">
            <summary>
            Deletes the specified folder user ACL entry.
            </summary>
            <param name="folder">Folder name with path.</param>
            <param name="user">User name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folder</b> or <b>user</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected or not-authenticated state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.GetFolderRights(System.String,System.String)">
            <summary>
            Gets rights which can be set for the specified identifier.
            </summary>
            <param name="folder">Folder name with path.</param>
            <param name="identifier">ACL entry identifier. Normally this is user or group name.</param>
            <returns>Returns LISTRIGHTS responses.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when<b>folder</b> or <b>identifier</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected or not-authenticated state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.GetFolderMyRights(System.String)">
            <summary>
            Gets myrights to the specified folder.
            </summary>
            <param name="folder">Folder name with path.</param>
            <returns>Returns MYRIGHTS responses.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folder</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected or not-authenticated state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.StoreMessage(System.String,PX.Common.IMAP.MessageFlags,System.DateTime,System.IO.Stream,System.Int32)">
            <summary>
            Stores specified message to the specified folder.
            </summary>
            <param name="folder">Folder name with path.</param>
            <param name="flags">Message flags.</param>
            <param name="internalDate">Message internal data. DateTime.MinValue means server will allocate it.</param>
            <param name="message">Message stream.</param>
            <param name="count">Number of bytes send from <b>message</b> stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folder</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected or not-authenticated state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.StoreMessage(System.String,System.String[],System.DateTime,System.IO.Stream,System.Int32)">
            <summary>
            Stores specified message to the specified folder.
            </summary>
            <param name="folder">Folder name with path.</param>
            <param name="flags">Message flags. Value null means no flags. For example: new string[]{"\Seen","\Answered"}.</param>
            <param name="internalDate">Message internal data. DateTime.MinValue means server will allocate it.</param>
            <param name="message">Message stream.</param>
            <param name="count">Number of bytes send from <b>message</b> stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folder</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected or not-authenticated state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.CloseFolder">
            <summary>
            Closes selected folder, all messages marked as Deleted will be expunged.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected, not-authenticated or not-selected state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.Fetch(System.Boolean,PX.Common.IMAP.SequenceSet,PX.Common.IMAP.FetchDataItem[],PX.Common.IMAP.Client.ImapClientFetchHandler)">
            <summary>
            Fetches specified message items.
            </summary>
            <param name="uid">Specifies if argument <b>seqSet</b> contains messages UID or sequence numbers.</param>
            <param name="seqSet">Sequence set of messages to fetch.</param>
            <param name="items">Fetch items to fetch.</param>
            <param name="handler">Fetch responses handler.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>seqSet</b>,<b>items</b> or <b>handler</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected, not-authenticated or not-selected state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.Search(System.Boolean,System.String,System.String)">
            <summary>
            Searches message what matches specified search criteria.
            </summary>
            <param name="uid">If true then UID SERACH, otherwise normal SEARCH.</param>
            <param name="charset">Charset used in search criteria. Value null means ASCII. The UTF-8 is reccomended value non ASCII searches.</param>
            <param name="criteria">Search criteria.</param>
            <returns>Returns search expression matehced messages sequence-numbers or UIDs(This depends on argument <b>uid</b> value).</returns>
            <exception cref="T:System.ArgumentNullException">Is rised when <b>criteria</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected, not-authenticated or not-selected state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.StoreMessageFlags(System.Boolean,PX.Common.IMAP.SequenceSet,PX.Common.IMAP.FlagsSetType,PX.Common.IMAP.MessageFlags)">
            <summary>
            Stores specified message flags to the sepcified messages.
            </summary>
            <param name="uid">Specifies if <b>seqSet</b> contains UIDs or sequence-numbers.</param>
            <param name="seqSet">Messages sequence-set.</param>
            <param name="setType">Specifies how flags are set.</param>
            <param name="flags">Message flags.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>seqSet</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected, not-authenticated or not-selected state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.StoreMessageFlags(System.Boolean,PX.Common.IMAP.SequenceSet,PX.Common.IMAP.FlagsSetType,System.String[])">
            <summary>
            Stores specified message flags to the sepcified messages.
            </summary>
            <param name="uid">Specifies if <b>seqSet</b> contains UIDs or sequence-numbers.</param>
            <param name="seqSet">Messages sequence-set.</param>
            <param name="setType">Specifies how flags are set.</param>
            <param name="flags">Message flags. Value null means no flags. For example: new string[]{"\Seen","\Answered"}.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>seqSet</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected, not-authenticated or not-selected state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.CopyMessages(System.Boolean,PX.Common.IMAP.SequenceSet,System.String)">
            <summary>
            Copies specified messages from current selected folder to the specified target folder.
            </summary>
            <param name="uid">Specifies if <b>seqSet</b> contains UIDs or message-numberss.</param>
            <param name="seqSet">Messages sequence set.</param>
            <param name="targetFolder">Target folder name with path.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>seqSet</b> or <b>targetFolder</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected, not-authenticated or not-selected state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.MoveMessages(System.Boolean,PX.Common.IMAP.SequenceSet,System.String,System.Boolean)">
            <summary>
            Moves specified messages from current selected folder to the specified target folder.
            </summary>
            <param name="uid">Specifies if <b>seqSet</b> contains UIDs or message-numberss.</param>
            <param name="seqSet">Messages sequence set.</param>
            <param name="targetFolder">Target folder name with path.</param>
            <param name="expunge">If ture messages are expunged from selected folder, otherwise they are marked as <b>Deleted</b>.
            Note: If true - then all messages marked as <b>Deleted</b> are expunged !</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>seqSet</b> or <b>targetFolder</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected, not-authenticated or not-selected state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.Expunge">
            <summary>
            Deletes all messages in selected folder which has "Deleted" flag set.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected, not-authenticated or not-selected state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.Capability">
            <summary>
            Gets IMAP server capabilities.
            </summary>
            <returns>Returns CAPABILITIES responses.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.Noop">
            <summary>
            Sends NOOP command to IMAP server.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not in valid state(not-connected state).</exception>
            <exception cref="T:PX.Common.IMAP.Client.ImapClientException">Is raised when server refuses to complete this command and returns error.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.OnConnected">
            <summary>
            This method is called after TCP client has sucessfully connected.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.SendCommand(System.String)">
            <summary>
            Send specified command to the IMAP server.
            </summary>
            <param name="command">Command to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>command</b> is null reference value.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.ReadResponse(System.Collections.Generic.List{PX.Common.IMAP.ResponseUntaggedCapability},PX.Common.IMAP.Client.ImapClientSelectedFolder,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{PX.Common.IMAP.ResponseUntaggedList},System.Collections.Generic.List{PX.Common.IMAP.ResponseUntaggedLSub},System.Collections.Generic.List{PX.Common.IMAP.ResponseUntaggedAcl},System.Collections.Generic.List{PX.Common.IMAP.ResponseMyRights},System.Collections.Generic.List{PX.Common.IMAP.ResponseUntaggedListRights},System.Collections.Generic.List{PX.Common.IMAP.ResponseUntaggedStatus},System.Collections.Generic.List{PX.Common.IMAP.ResponseUntaggedQuota},System.Collections.Generic.List{PX.Common.IMAP.ResponseUntaggedQuotaRoot},System.Collections.Generic.List{PX.Common.IMAP.ResponseUntaggedNamespace},PX.Common.IMAP.Client.ImapClientFetchHandler)">
            <summary>
            Reads IMAP server responses.
            </summary>
            <param name="folderInfo">Folder info where to store folder related data.
            This applies to SELECT or EXAMINE command only. This value can be null.
            </param>
            <param name="capability">List wehere to store CAPABILITY command result. This value can be null.</param>
            <param name="search">List wehere to store SEARCH command result. This value can be null.</param>
            <param name="list">List where to store LIST command result. This value can be null.</param>
            <param name="lsub">List where to store LSUB command result. This value can be null.</param>
            <param name="acl">List where to store ACL command result. This value can be null.</param>
            <param name="myRights">List where to store MYRIGHTS command result. This value can be null.</param>
            <param name="listRights">List where to store LISTRIGHTS command result. This value can be null.</param>
            <param name="status">List where to store STATUS command result. This value can be null.</param>
            <param name="quota">List where to store QUOTA command result. This value can be null.</param>
            <param name="quotaRoot">List where to store QUOTAROOT command result. This value can be null.</param>
            <param name="nspace">List where to store NAMESPACE command result. This value can be null.</param>
            <param name="fetchHandler">Fetch data-items handler.</param>
            <returns>Returns command completion status response.</returns>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.ReadStringLiteral(System.Int32)">
            <summary>
            Reads IMAP <b>string-literal</b> from remote endpoint.
            </summary>
            <param name="count">Number of bytes to read.</param>
            <returns>Returns readed string-literal.</returns>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.ReadStringLiteral(System.Int32,System.IO.Stream)">
            <summary>
            Reads IMAP <b>string-literal</b> from remote endpoint.
            </summary>
            <param name="count">Number of bytes to read.</param>
            <param name="stream">Stream where to store readed data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.IMAP.Client.ImapClient.AuthenticatedUserIdentity">
            <summary>
            Gets session authenticated user identity, returns null if not authenticated.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and IMAP client is not connected.</exception>
        </member>
        <member name="P:PX.Common.IMAP.Client.ImapClient.GreetingText">
            <summary>
            Get IMAP server greeting text.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and IMAP client is not connected.</exception>
        </member>
        <member name="P:PX.Common.IMAP.Client.ImapClient.FolderSeparator">
            <summary>
            Gets IMAP server folder separator.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and IMAP client is not connected.</exception>
        </member>
        <member name="P:PX.Common.IMAP.Client.ImapClient.SelectedFolder">
            <summary>
            Gets selected folder. Returns null if no folder selected.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and IMAP client is not connected.</exception>
        </member>
        <member name="E:PX.Common.IMAP.Client.ImapClient.UntaggedStatusResponse">
            <summary>
            This event is raised when IMAP server sends untagged status response.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.OnUntaggedStatusResponse(PX.Common.IMAP.ResponseUntagged)">
            <summary>
            Raises <b>UntaggedStatusResponse</b> event.
            </summary>
            <param name="response">Untagged response.</param>
        </member>
        <member name="E:PX.Common.IMAP.Client.ImapClient.MessageExpunged">
            <summary>
            This event is raised when IMAP server expunges message and sends EXPUNGE response.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClient.OnMessageExpunged(PX.Common.IMAP.ResponseUntaggedExpunge)">
            <summary>
            Raises <b>MessageExpunged</b> event.
            </summary>
            <param name="response">Expunge response.</param>
        </member>
        <member name="T:PX.Common.IMAP.Client.ImapClientException">
            <summary>
            IMAP client exception.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="responseLine">IMAP server response line.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>responseLine</b> is null.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientException.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="responseCode">IMAP response code(BAD,NO).</param>
            <param name="responseText">Response text.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>responseCode</b> or <b>responseText</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:PX.Common.IMAP.Client.ImapClientException.StatusCode">
            <summary>
            Gets IMAP server error status code.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.Client.ImapClientException.ResponseText">
            <summary>
            Gets IMAP server response text after status code.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.Client.ImapClientFetchBodyEArgs">
            <summary>
            This class represents FETCH BODY[] data item. Defined in RFC 3501.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientFetchBodyEArgs.#ctor(System.String,System.Int32)">
            <summary>
            Defualt constructor.
            </summary>
            <param name="bodySection">Body section value.</param>
            <param name="offset">Body data offset.</param>
        </member>
        <member name="P:PX.Common.IMAP.Client.ImapClientFetchBodyEArgs.BodySection">
            <summary>
            Gets BODY section value. Value null means not specified(full message).
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.Client.ImapClientFetchBodyEArgs.Offset">
            <summary>
            Gets BODY data returning start offset. Value null means not specified.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.Client.ImapClientFetchBodyEArgs.Stream">
            <summary>
            Gets or sets stream where BODY data is stored.
            </summary>
        </member>
        <member name="E:PX.Common.IMAP.Client.ImapClientFetchBodyEArgs.StoringCompleted">
            <summary>
            This method is called when message storing has completed.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientFetchBodyEArgs.OnStoringCompleted">
            <summary>
            Raises <b>StoringCompleted</b> event.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.Client.ImapClientFetchHandler">
            <summary>
            This class provides IMAP FETCH response handling methods.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientFetchHandler.SetCurrentSeqNo(System.Int32)">
            <summary>
            Sets <b>CurrentSeqNo</b> property value.
            </summary>
            <param name="seqNo">Message sequnece number.</param>
        </member>
        <member name="P:PX.Common.IMAP.Client.ImapClientFetchHandler.CurrentSeqNo">
            <summary>
            Gets current message sequence number. Value -1 means no current message.
            </summary>
        </member>
        <member name="E:PX.Common.IMAP.Client.ImapClientFetchHandler.NextMessage">
            <summary>
            This event is raised when current message changes and next message FETCH data-items will be returned.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientFetchHandler.OnNextMessage">
            <summary>
            Raises <b>NextMessage</b> event.
            </summary>
        </member>
        <member name="E:PX.Common.IMAP.Client.ImapClientFetchHandler.Body">
            <summary>
            Is raised when current message FETCH BODY[] data-item is returned.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientFetchHandler.OnBody(PX.Common.IMAP.Client.ImapClientFetchBodyEArgs)">
            <summary>
            Raises <b>Body</b> event.
            </summary>
            <param name="eArgs">Event args.</param>
        </member>
        <member name="E:PX.Common.IMAP.Client.ImapClientFetchHandler.Envelope">
            <summary>
            Is raised when current message FETCH ENVELOPE data-item is returned.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientFetchHandler.OnEnvelope(PX.Common.IMAP.Envelope)">
            <summary>
            Raises <b>Envelope</b> event.
            </summary>
            <param name="envelope">Envelope value.</param>
        </member>
        <member name="E:PX.Common.IMAP.Client.ImapClientFetchHandler.Flags">
            <summary>
            Is raised when current message FETCH FLAGS data-item is returned.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientFetchHandler.OnFlags(System.String[])">
            <summary>
            Raises <b>Flags</b> event.
            </summary>
            <param name="flags">Message flags.</param>
        </member>
        <member name="E:PX.Common.IMAP.Client.ImapClientFetchHandler.InternalDate">
            <summary>
            Is raised when current message FETCH INTERNALDATE data-item is returned.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientFetchHandler.OnInternalDate(System.DateTime)">
            <summary>
            Raises <b>InternalDate</b> event.
            </summary>
            <param name="date">Message IMAP server internal date.</param>
        </member>
        <member name="E:PX.Common.IMAP.Client.ImapClientFetchHandler.Rfc822">
            <summary>
            Is raised when current message FETCH RFC822 data-item is returned.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientFetchHandler.OnRfc822(PX.Common.IMAP.Client.ImapClientFetchRfc822EArgs)">
            <summary>
            Raises <b>Rfc822</b> event.
            </summary>
            <param name="eArgs">Event args.</param>
        </member>
        <member name="E:PX.Common.IMAP.Client.ImapClientFetchHandler.Rfc822Header">
            <summary>
            Is raised when current message FETCH RFC822.HEADER data-item is returned.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientFetchHandler.OnRfc822Header(System.String)">
            <summary>
            Raises <b>Rfc822Text</b> event.
            </summary>
            <param name="header">Message header.</param>
        </member>
        <member name="E:PX.Common.IMAP.Client.ImapClientFetchHandler.Rfc822Text">
            <summary>
            Is raised when current message FETCH RFC822.TEXT data-item is returned.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientFetchHandler.OnRfc822Text(System.String)">
            <summary>
            Raises <b>Rfc822Text</b> event.
            </summary>
            <param name="text">Message body text.</param>
        </member>
        <member name="E:PX.Common.IMAP.Client.ImapClientFetchHandler.UID">
            <summary>
            Is raised when current message FETCH UID data-item is returned.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientFetchHandler.OnUID(System.Int64)">
            <summary>
            Raises <b>UID</b> event.
            </summary>
            <param name="uid">Message UID value.</param>
        </member>
        <member name="T:PX.Common.IMAP.Client.ImapClientFetchRfc822EArgs">
            <summary>
            This class provides data for the <see cref="E:PX.Common.IMAP.Client.ImapClientFetchHandler.Rfc822"/> event.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientFetchRfc822EArgs.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.Client.ImapClientFetchRfc822EArgs.Stream">
            <summary>
            Gets or sets stream where RFC822 message is stored.
            </summary>
        </member>
        <member name="E:PX.Common.IMAP.Client.ImapClientFetchRfc822EArgs.StoringCompleted">
            <summary>
            This method is called when message storing has completed.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientFetchRfc822EArgs.OnStoringCompleted">
            <summary>
            Raises <b>StoringCompleted</b> event.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.Client.ImapClientSelectedFolder">
            <summary>
            This class represents IMAP client selected folder.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientSelectedFolder.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Folder name with path.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference value.</exception>
            <exception cref="T:System.ArgumentException">Is riased when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientSelectedFolder.ToString">
            <summary>
            Returns this object as human readable string.
            </summary>
            <returns>Returns this object as human readable string.</returns>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientSelectedFolder.SetUidValidity(System.Int64)">
            <summary>
            Sets UidValidity property value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientSelectedFolder.SetFlags(System.String[])">
            <summary>
            Sets Flags property value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientSelectedFolder.SetPermanentFlags(System.String[])">
            <summary>
            Sets PermanentFlags property value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientSelectedFolder.SetReadOnly(System.Boolean)">
            <summary>
            Sets IsReadOnly property value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientSelectedFolder.SetUidNext(System.Int64)">
            <summary>
            Sets UidNext property value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientSelectedFolder.SetFirstUnseen(System.Int32)">
            <summary>
            Sets FirstUnseen property value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientSelectedFolder.SetMessagesCount(System.Int32)">
            <summary>
            Sets MessagesCount property value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientSelectedFolder.SetRecentMessagesCount(System.Int32)">
            <summary>
            Sets RecentMessagesCount property value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:PX.Common.IMAP.Client.ImapClientSelectedFolder.StringArrayToString(System.String[])">
            <summary>
            Coneverts string array to comma separated value.
            </summary>
            <param name="value">String array.</param>
            <returns>Returns string array as comma separated value.</returns>
        </member>
        <member name="P:PX.Common.IMAP.Client.ImapClientSelectedFolder.Name">
            <summary>
            Gets selected folder name(path included).
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.Client.ImapClientSelectedFolder.UidValidity">
            <summary>
            Gets folder UID value. Value null means IMAP server doesn't support <b>UIDVALIDITY</b> feature.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.Client.ImapClientSelectedFolder.Flags">
            <summary>
            Gets flags what folder supports.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.Client.ImapClientSelectedFolder.PermanentFlags">
            <summary>
            Gets permanent flags what folder can store.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.Client.ImapClientSelectedFolder.IsReadOnly">
            <summary>
            Gets if folder is read-only or read-write.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.Client.ImapClientSelectedFolder.UidNext">
            <summary>
            Gets next predicted message UID. Value -1 means that IMAP server doesn't support it.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.Client.ImapClientSelectedFolder.FirstUnseen">
            <summary>
            Gets first unseen message sequence number. Value -1 means no unseen message.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.Client.ImapClientSelectedFolder.MessagesCount">
            <summary>
            Gets number of messages in this folder.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.Client.ImapClientSelectedFolder.RecentMessagesCount">
            <summary>
            Gets number of recent messages in this folder.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.Envelope">
            <summary>
            This class represents IMAP FETCH ENVELOPE data item. Defined in RFC 3501.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Envelope.#ctor(System.DateTime,System.String,PX.Common.Mail.Address[],PX.Common.Mail.Address[],PX.Common.Mail.Address[],PX.Common.Mail.Address[],PX.Common.Mail.Address[],PX.Common.Mail.Address[],System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="date">Message <b>Date</b> header value.</param>
            <param name="subject">Message <b>Subject</b> header value.</param>
            <param name="from">Message <b>From</b> header value.</param>
            <param name="sender">Message <b>Sender</b> header value.</param>
            <param name="replyTo">Message <b>Reply-To</b> header value.</param>
            <param name="to">Message <b>To</b> header value.</param>
            <param name="cc">Message <b>Cc</b> header value.</param>
            <param name="bcc">Message <b>Bcc</b> header value.</param>
            <param name="inReplyTo">Message <b>In-Reply-To</b> header value.</param>
            <param name="messageID">Message <b>Message-ID</b> header value.</param>
        </member>
        <member name="M:PX.Common.IMAP.Envelope.Parse(PX.Common.StringReader)">
            <summary>
            Parses IMAP ENVELOPE from string.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP ENVELOPE string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Envelope.Parse(PX.Common.IMAP.Client.ImapClient.FetchResponseReader)">
            <summary>
            Parses IMAP FETCH ENVELOPE data-item.
            </summary>
            <param name="fetchReader">Fetch reader.</param>
            <returns>Returns parsed IMAP FETCH ENVELOPE data-item.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>fetchReader</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Envelope.ConstructEnvelope(PX.Common.Mail.Message)">
            <summary>
            Construct secified mime entity ENVELOPE string.
            </summary>
            <param name="entity">Mail message.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.IMAP.Envelope.ReadAddresses(PX.Common.StringReader)">
            <summary>
            Reads parenthesized list of addresses.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns read addresses.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Envelope.ReadAddresses(PX.Common.IMAP.Client.ImapClient.FetchResponseReader)">
            <summary>
            Reads parenthesized list of addresses.
            </summary>
            <param name="fetchReader">Fetch reader.</param>
            <returns>Returns read addresses.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>fetchReader</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Envelope.ConstructAddresses(PX.Common.Mail.Mailbox[],PX.Common.MIME.EncodingEncodedWord)">
            <summary>
            Constructs ENVELOPE addresses structure.
            </summary>
            <param name="mailboxes">Mailboxes.</param>
            <param name="wordEncoder">Unicode words encoder.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.IMAP.Envelope.ConstructAddress(PX.Common.Mail.Mailbox,PX.Common.MIME.EncodingEncodedWord)">
            <summary>
            Constructs ENVELOPE address structure.
            </summary>
            <param name="address">Mailbox address.</param>
            <param name="wordEncoder">Unicode words encoder.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.IMAP.Envelope.RemoveCrlf(System.String)">
            <summary>
            Removes CR and LF chars from the specified string.
            </summary>
            <param name="value">String value.</param>
            <returns>Reurns string.</returns>
        </member>
        <member name="M:PX.Common.IMAP.Envelope.ReadAndDecodeWord(System.String)">
            <summary>
            Decodes word from reader.
            </summary>
            <param name="text">Text.</param>
            <returns>Returns decoded word.</returns>
        </member>
        <member name="P:PX.Common.IMAP.Envelope.Date">
            <summary>
            Gets message <b>Date</b> header field value. Value DateTime.Min means no <b>Date</b> header field.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.Envelope.Subject">
            <summary>
            Gets message <b>Subject</b> header field value. Value null means no <b>Subject</b> header field.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.Envelope.From">
            <summary>
            Gets message <b>From</b> header field value. Value null means no <b>From</b> header field.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.Envelope.Sender">
            <summary>
            Gets message <b>Sender</b> header field value. Value null means no <b>Sender</b> header field.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.Envelope.ReplyTo">
            <summary>
            Gets message <b>Reply-To</b> header field value. Value null means no <b>Reply-To</b> header field.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.Envelope.To">
            <summary>
            Gets message <b>To</b> header field value. Value null means no <b>To</b> header field.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.Envelope.Cc">
            <summary>
            Gets message <b>Cc</b> header field value. Value null means no <b>Cc</b> header field.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.Envelope.Bcc">
            <summary>
            Gets message <b>Bcc</b> header field value. Value null means no <b>Bcc</b> header field.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.Envelope.InReplyTo">
            <summary>
            Gets message <b>In-Reply-To</b> header field value. Value null means no <b>In-Reply-To</b> header field.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.Envelope.MessageID">
            <summary>
            Gets message <b>Message-ID</b> header field value. Value null means no <b>Message-ID</b> header field.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.FetchDataItem">
            <summary>
            This class is base class for IMAP FETCH data-items. For more info see RFC 3501. 6.4.5.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.FetchDataItemBody">
            <summary>
            This class represents FETCH BODY[] data item. Defined in RFC 3501.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.FetchDataItemBody.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.FetchDataItemBody.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="section">Body section. Value null means not specified.</param>
            <param name="offset">Data returning offset. Value -1 means not specified.</param>
            <param name="maxCount">Maximum number of bytes to return. Value -1 means not specified.</param>
        </member>
        <member name="M:PX.Common.IMAP.FetchDataItemBody.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.FetchDataItemBody.Section">
            <summary>
            Gets body section. Value null means not specified.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.FetchDataItemBody.Offset">
            <summary>
            Gets start offset. Value -1 means not specified.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.FetchDataItemBody.MaxCount">
            <summary>
            Gets maximum count of bytes to fetch. Value -1 means not specified.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.FetchDataItemBodyPeek">
            <summary>
            This class represents FETCH BODY.PEEK[] data item. Defined in RFC 3501.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.FetchDataItemBodyPeek.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.FetchDataItemBodyPeek.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="section">Body section. Value null means not specified.</param>
            <param name="offset">Data returning offset. Value -1 means not specified.</param>
            <param name="maxCount">Maximum number of bytes to return. Value -1 means not specified.</param>
        </member>
        <member name="M:PX.Common.IMAP.FetchDataItemBodyPeek.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.FetchDataItemBodyPeek.Section">
            <summary>
            Gets body section. Value null means not specified.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.FetchDataItemBodyPeek.Offset">
            <summary>
            Gets start offset. Value -1 means not specified.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.FetchDataItemBodyPeek.MaxCount">
            <summary>
            Gets maximum count of bytes to fetch. Value -1 means not specified.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.FetchDataItemBodyS">
            <summary>
            This class represents FETCH BODY data item. Defined in RFC 3501.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.FetchDataItemBodyStructure">
            <summary>
            This class represents FETCH BODYSTRUCTURE data item. Defined in RFC 3501.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.FetchDataItemEnvelope">
            <summary>
            This class represents FETCH ENVELOPE data item. Defined in RFC 3501.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.FetchDataItemEnvelope.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="T:PX.Common.IMAP.FetchDataItemFlags">
            <summary>
            This class represents FETCH FLAGS data item. Defined in RFC 3501.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.FetchDataItemFlags.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="T:PX.Common.IMAP.FetchDataItemInternalDate">
            <summary>
            This class represents FETCH INTERNALDATE data item. Defined in RFC 3501.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.FetchDataItemInternalDate.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="T:PX.Common.IMAP.FetchDataItemRfc822">
            <summary>
            This class represents FETCH RFC822 data item. Defined in RFC 3501.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.FetchDataItemRfc822.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="T:PX.Common.IMAP.FetchDataItemRfc822Header">
            <summary>
            This class represents FETCH RFC822.HEADER data item. Defined in RFC 3501.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.FetchDataItemRfc822Header.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="T:PX.Common.IMAP.FetchDataItemRfc822Size">
            <summary>
            This class represents FETCH RFC822.SIZE data item. Defined in RFC 3501.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.FetchDataItemRfc822Size.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="T:PX.Common.IMAP.FetchDataItemRfc822Text">
            <summary>
            This class represents FETCH RFC822.TEXT data item. Defined in RFC 3501.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.FetchDataItemRfc822Text.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="T:PX.Common.IMAP.FetchDataItemUid">
            <summary>
            This class represents FETCH UID data item. Defined in RFC 3501.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.FetchDataItemUid.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="T:PX.Common.IMAP.FlagsSetType">
            <summary>
            IMAP flags store type.
            </summary>
        </member>
        <member name="F:PX.Common.IMAP.FlagsSetType.Add">
            <summary>
            Flags are added to existing ones.
            </summary>
        </member>
        <member name="F:PX.Common.IMAP.FlagsSetType.Remove">
            <summary>
            Flags are removed from existing ones.
            </summary>
        </member>
        <member name="F:PX.Common.IMAP.FlagsSetType.Replace">
            <summary>
            Flags are replaced.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.MessageFlags">
            <summary>
            IMAP message flags.
            </summary>
        </member>
        <member name="F:PX.Common.IMAP.MessageFlags.None">
            <summary>
            No flags defined.
            </summary>
        </member>
        <member name="F:PX.Common.IMAP.MessageFlags.Seen">
            <summary>
            Message has been read.
            </summary>
        </member>
        <member name="F:PX.Common.IMAP.MessageFlags.Answered">
            <summary>
            Message has been answered.
            </summary>
        </member>
        <member name="F:PX.Common.IMAP.MessageFlags.Flagged">
            <summary>
            Message is "flagged" for urgent/special attention.
            </summary>
        </member>
        <member name="F:PX.Common.IMAP.MessageFlags.Deleted">
            <summary>
            Message is "deleted" for removal by later EXPUNGE.
            </summary>
        </member>
        <member name="F:PX.Common.IMAP.MessageFlags.Draft">
            <summary>
            Message has not completed composition.
            </summary>
        </member>
        <member name="F:PX.Common.IMAP.MessageFlags.Recent">
            <summary>
            Message is "recently" arrived in this mailbox.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.NamespaceEntry">
            <summary>
            This class represents IMAP NAMESPACE entry. Defined in RFC 2342 5.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.NamespaceEntry.#ctor(System.String,System.Char)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Namespace name.</param>
            <param name="delimiter">Hierarchy delimiter char.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:PX.Common.IMAP.NamespaceEntry.NamespaceName">
            <summary>
            Gets namespace name.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.NamespaceEntry.HierarchyDelimiter">
            <summary>
            Gets namespace hierarchy delimiter char.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.QuotaEntry">
            <summary>
            This class represents IMAP QUOTA entry. Defined in RFC 2087 5.1.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.QuotaEntry.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="resourceName">Resource limit name.</param>
            <param name="currentUsage">Current resourse usage.</param>
            <param name="maxUsage">Maximum allowed resource usage.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>resourceName</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:PX.Common.IMAP.QuotaEntry.ResourceName">
            <summary>
            Gets resource limit name.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.QuotaEntry.CurrentUsage">
            <summary>
            Gets current resource usage.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.QuotaEntry.MaxUsage">
            <summary>
            Gets maximum allowed resource usage.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.Response">
            <summary>
            This is base class for any IMAP server response.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.ResponseServerStatus">
            <summary>
            This class represents IMAP server status(OK,NO,BAD) response. Defined in RFC 3501 7.1.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.ResponseServerStatus.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="commandTag">Command tag.</param>
            <param name="responseCode">Response code.</param>
            <param name="responseText">Response text after response-code.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>commandTag</b>,<b>responseCode</b> or <b>responseText</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseServerStatus.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="commandTag">Command tag.</param>
            <param name="responseCode">Response code.</param>
            <param name="optResponseCode">Optional response code(Response code between []).</param>
            <param name="optResponseArgs">Optional response arguments string.</param>
            <param name="responseText">Response text after response-code.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>commandTag</b>,<b>responseCode</b> or <b>responseText</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseServerStatus.Parse(System.String)">
            <summary>
            Parses IMAP command completion status response from response line.
            </summary>
            <param name="responseLine">Response line.</param>
            <returns>Returns parsed IMAP command completion status response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>responseLine</b> is null reference value.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseServerStatus.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.ResponseServerStatus.CommandTag">
            <summary>
            Gets command tag.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseServerStatus.ResponseCode">
            <summary>
            Gets IMAP server status response code(OK,NO,BAD).
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseServerStatus.OptionalResponseCode">
            <summary>
            Gets IMAP server status response optiona response-code(ALERT,BADCHARSET,CAPABILITY,PARSE,PERMANENTFLAGS,
            READ-ONLY,READ-WRITE,TRYCREATE,UIDNEXT,UIDVALIDITY,UNSEEN).
            Value null means not specified. For more info see RFC 3501 7.1.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseServerStatus.OptionalResponseArgs">
            <summary>
            Gets optional response aruments string. Value null means not specified. For more info see RFC 3501 7.1.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseServerStatus.ResponseText">
            <summary>
            Gets response human readable text after response-code.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.ResponseUntagged">
            <summary>
            This class is base class for IMAP server untagged responses.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.ResponseUntaggedAcl">
            <summary>
            This class represents IMAP ACL response. Defined in RFC 4314 3.6.2.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedAcl.#ctor(System.String,PX.Common.IMAP.AclEntry[])">
            <summary>
            Default constructor.
            </summary>
            <param name="folderName">Folder name with path.</param>
            <param name="entries">ACL entries.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folderName</b> or <b>entries</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedAcl.Parse(System.String)">
            <summary>
            Parses ACL response from acl-response string.
            </summary>
            <param name="aclResponse">ACL response.</param>
            <returns>Returns parsed ACL response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised wehn <b>aclResponse</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedAcl.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedAcl.FolderName">
            <summary>
            Gets folder name.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedAcl.Entires">
            <summary>
            Gets ACL entries.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.ResponseUntaggedCapability">
            <summary>
            This class represents IMAP CAPABILITY response. Defined in RFC 3501 7.2.1.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedCapability.#ctor(System.String[])">
            <summary>
            Default constructor.
            </summary>
            <param name="capabilities">Capabilities list.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>capabilities</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedCapability.Parse(System.String)">
            <summary>
            Parses CAPABILITY response from capability-response string.
            </summary>
            <param name="response">Capability response string.</param>
            <returns>Returns parsed CAPABILITY response.</returns>
            <exception cref="T:System.ArgumentNullException">Is riased when <b>response</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedCapability.Capabilities">
            <summary>
            Gets capabilities list.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.ResponseUntaggedExpunge">
            <summary>
            This class represents IMAP EXPUNGE response. Defined in RFC 3501 7.4.1.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedExpunge.#ctor(System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="seqNo">Message sequence number.</param>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedExpunge.Parse(System.String)">
            <summary>
            Parses EXPUNGE response from expunge-response string.
            </summary>
            <param name="response">Expunge response string.</param>
            <returns>Returns parsed expunge response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>response</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedExpunge.SeqNo">
            <summary>
            Gets message sequence number.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.ResponseUntaggedList">
            <summary>
            This class represents IMAP LIST response. Defined in RFC 3501 7.2.2.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedList.#ctor(System.String,System.Char,System.String[])">
            <summary>
            Default constructor.
            </summary>
            <param name="folder">Folder name with path.</param>
            <param name="delimiter">Hierarchy delimiter char.</param>
            <param name="attributes">Folder attributes.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folder</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedList.Parse(System.String)">
            <summary>
            Parses LIST response from list-response string.
            </summary>
            <param name="listResponse">List response string.</param>
            <returns>Returns parsed list response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>listResponse</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedList.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedList.ToString(System.Boolean)">
            <summary>
            Returns this as string.
            </summary>
            <param name="encode">If true, folder name is encoded with IMAP UTF-7 encoding.</param>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedList.FolderName">
            <summary>
            Gets folder name.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedList.HierarchyDelimiter">
            <summary>
            Gets hierarchy delimiter char.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedList.FolderAttributes">
            <summary>
            Gets folder attributes list.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.ResponseUntaggedListRights">
            <summary>
            This class represents IMAP MYRIGHTS response. Defined in RFC 4314 3.7.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedListRights.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="folder">Folder name with path.</param>
            <param name="identifier">Identifier name. Normally this is user or group name.</param>
            <param name="requiredRights">Required rights.</param>
            <param name="optionalRights">Optional rights.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folder</b> or <b>identifier</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedListRights.Parse(System.String)">
            <summary>
            Parses LISTRIGHTS response from LISTRIGHTS-response string.
            </summary>
            <param name="listRightsResponse">LISTRIGHTS response line.</param>
            <returns>Returns parsed LISTRIGHTS response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>listRightsResponse</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedListRights.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedListRights.FolderName">
            <summary>
            Gets folder name.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedListRights.Identifier">
            <summary>
            Gets identifier. Normaly this is user or group name.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedListRights.RequiredRights">
            <summary>
            Gets required rights.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedListRights.OptionalRights">
            <summary>
            Gets optional rights.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.ResponseUntaggedLSub">
            <summary>
            This class represents IMAP LSUB response. Defined in RFC 3501 7.2.3.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedLSub.#ctor(System.String,System.Char,System.String[])">
            <summary>
            Default constructor.
            </summary>
            <param name="folder">Folder name with path.</param>
            <param name="delimiter">Hierarchy delimiter char.</param>
            <param name="attributes">Folder attributes.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folder</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedLSub.Parse(System.String)">
            <summary>
            Parses LSUB response from lsub-response string.
            </summary>
            <param name="lSubResponse">LSub response string.</param>
            <returns>Returns parsed lsub response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>lSubResponse</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedLSub.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedLSub.ToString(System.Boolean)">
            <summary>
            Returns this as string.
            </summary>
            <param name="encode">If true, folder name is encoded with IMAP UTF-7 encoding.</param>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedLSub.FolderName">
            <summary>
            Gets folder name.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedLSub.HierarchyDelimiter">
            <summary>
            Gets hierarchy delimiter char.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedLSub.FolderAttributes">
            <summary>
            Gets folder attributes list.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.ResponseMyRights">
            <summary>
            This class represents IMAP MYRIGHTS response. Defined in RFC 4314 3.8.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.ResponseMyRights.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="folder">Folder name with path.</param>
            <param name="rights">Rights values.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folder</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseMyRights.Parse(System.String)">
            <summary>
            Parses MYRIGHTS response from MYRIGHTS-response string.
            </summary>
            <param name="myRightsResponse">MYRIGHTS response line.</param>
            <returns>Returns parsed MYRIGHTS response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>myRightsResponse</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseMyRights.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.ResponseMyRights.FolderName">
            <summary>
            Gets folder name.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseMyRights.Rights">
            <summary>
            Gets rights list.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.ResponseUntaggedNamespace">
            <summary>
            This class represents IMAP NAMESPACE response. Defined in RFC 2342 5.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedNamespace.#ctor(PX.Common.IMAP.NamespaceEntry[],PX.Common.IMAP.NamespaceEntry[],PX.Common.IMAP.NamespaceEntry[])">
            <summary>
            Default constructor.
            </summary>
            <param name="personalNamespaces">Personal namespaces.</param>
            <param name="otherUsersNamespaces">Other users namespaces.</param>
            <param name="sharedNamespaces">Shared users namespaces.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>personalNamespaces</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedNamespace.Parse(System.String)">
            <summary>
            Parses NAMESPACE response from namespace-response string.
            </summary>
            <param name="response">NAMESPACE response string.</param>
            <returns>Returns parsed NAMESPACE response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>response</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedNamespace.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedNamespace.PersonalNamespaces">
            <summary>
            Gets personal namespaces. Value null means not specified.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedNamespace.OtherUsersNamespaces">
            <summary>
            Gets other users namespaces. Value null means not specified.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedNamespace.SharedNamespaces">
            <summary>
            Gets shared namespaces. Value null means not specified.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.ResponseUntaggedQuota">
            <summary>
            This class represents IMAP QUOTA response. Defined in RFC 2087 5.1.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedQuota.#ctor(System.String,PX.Common.IMAP.QuotaEntry[])">
            <summary>
            Default constructor.
            </summary>
            <param name="quotaRootName">Qouta root name.</param>
            <param name="entries">Resource limit entries.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>quotaRootName</b> or <b>entries</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedQuota.Parse(System.String)">
            <summary>
            Parses QUOTA response from quota-response string.
            </summary>
            <param name="response">QUOTA response string.</param>
            <returns>Returns parsed QUOTA response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>response</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedQuota.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedQuota.QuotaRootName">
            <summary>
            Gets quota root name.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedQuota.Entries">
            <summary>
            Gets resource limit entries.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.ResponseUntaggedQuotaRoot">
            <summary>
            This class represents IMAP QUOTAROOT response. Defined in RFC 2087 5.2.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedQuotaRoot.#ctor(System.String,System.String[])">
            <summary>
            Default constructor.
            </summary>
            <param name="folder">Folder name with path.</param>
            <param name="quotaRoots">Quota roots.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folder</b> or <b>quotaRoots</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedQuotaRoot.Parse(System.String)">
            <summary>
            Parses QUOTAROOT response from quotaRoot-response string.
            </summary>
            <param name="response">QUOTAROOT response string.</param>
            <returns>Returns parsed QUOTAROOT response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>response</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedQuotaRoot.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedQuotaRoot.FolderName">
            <summary>
            Gets folder name.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedQuotaRoot.QuotaRoots">
            <summary>
            Gets quota roots.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.ResponseUntaggedServerStatus">
            <summary>
            This class represents IMAP server untagged status(OK,NO,BAD,PREAUTH and BYE) response. Defined in RFC 3501 7.1.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedServerStatus.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="responseCode">Response code.</param>
            <param name="optResponseCode">Optional response code(Response code between []).</param>
            <param name="optResponseArgs">Optional response arguments string.</param>
            <param name="responseText">Response text after response-code.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>responseCode</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedServerStatus.Parse(System.String)">
            <summary>
            Parses IMAP command completion status response from response line.
            </summary>
            <param name="responseLine">Response line.</param>
            <returns>Returns parsed IMAP command completion status response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>responseLine</b> is null reference value.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedServerStatus.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedServerStatus.ResponseCode">
            <summary>
            Gets IMAP server status response code(OK,NO,BAD,PREAUTH,BYE).
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedServerStatus.OptionalResponseCode">
            <summary>
            Gets IMAP server status response optiona response-code(ALERT,BADCHARSET,CAPABILITY,PARSE,PERMANENTFLAGS,
            READ-ONLY,READ-WRITE,TRYCREATE,UIDNEXT,UIDVALIDITY,UNSEEN).
            Value null means not specified. For more info see RFC 3501 7.1.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedServerStatus.OptionalResponseArgs">
            <summary>
            Gets optional response aruments string. Value null means not specified. For more info see RFC 3501 7.1.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedServerStatus.ResponseText">
            <summary>
            Gets response human readable text after response-code.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.ResponseUntaggedStatus">
            <summary>
            This class represents IMAP STATUS response. Defined in RFC 3501 7.2.4.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedStatus.#ctor(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="folder">Folder name.</param>
            <param name="messagesCount">Messages count.</param>
            <param name="recentCount">The "recent" flag set messages count.</param>
            <param name="uidNext">Next message predictable UID value.</param>
            <param name="folderUid">Folder UID value.</param>
            <param name="unseenCount">Unseen messages count.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>folder</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IMAP.ResponseUntaggedStatus.Parse(System.String)">
            <summary>
            Parses STATUS response from status-response string.
            </summary>
            <param name="response">Satatus response string.</param>
            <returns>Returns parsed STATUS response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>response</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedStatus.FolderName">
            <summary>
            Gets folder name.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedStatus.MessagesCount">
            <summary>
            Gets messages count.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedStatus.RecentCount">
            <summary>
            Gets "recent" flag set messages count.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedStatus.UidNext">
            <summary>
            Gets next message predictable UID value.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedStatus.FolderUid">
            <summary>
            Gets folder UID value.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.ResponseUntaggedStatus.UnseenCount">
            <summary>
            Gets unseen messages count.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKey">
            <summary>
            This class is base class for IMAP SEARCH searck-key. Defined in RFC 3501 6.4.4.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.SearchKey.ParseKey(PX.Common.StringReader)">
            <summary>
            Parses one search key or search key group.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns one parsed search key or search key group.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyAnswered">
            <summary>
            This class represents IMAP SEARCH <b>ANSWERED</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages with the \Answered flag set.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyAnswered.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>ANSWERED</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>ANSWERED</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyAnswered.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyBcc">
            <summary>
            This class represents IMAP SEARCH <b>BCC (string)</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages that contain the specified string in the message header BCC field.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyBcc.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">String value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyBcc.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>BCC (string)</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>BCC (string)</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyBcc.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeyBcc.Value">
            <summary>
            Gets BCC filter value.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyBefore">
            <summary>
            This class represents IMAP SEARCH <b>BEFORE (date)</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages whose internal date (disregarding time and timezone) is earlier than the specified date.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyBefore.#ctor(System.DateTime)">
            <summary>
            Default constructor.
            </summary>
            <param name="date">Message internal date.</param>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyBefore.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>BEFORE (string)</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>BEFORE (string)</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyBefore.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeyBefore.Date">
            <summary>
            Gets date value.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyBody">
            <summary>
            This class represents IMAP SEARCH <b>BODY (string)</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages that contain the specified string in the body of the message.
            NOTE: IMAP server may skip MIME entities with binary.
            </remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyBody.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">String value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyBody.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>BODY (string)</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>BODY (string)</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyBody.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeyBody.Value">
            <summary>
            Gets BODY filter value.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyCc">
            <summary>
            This class represents IMAP SEARCH <b>CC (string)</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages that contain the specified string in the message header CC field.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyCc.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">String value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyCc.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>CC (string)</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>CC (string)</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyCc.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeyCc.Value">
            <summary>
            Gets CC filter value.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyDeleted">
            <summary>
            This class represents IMAP SEARCH <b>DELETED</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages with the \Deleted flag set.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyDeleted.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>DELETED</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>DELETED</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyDeleted.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyDraft">
            <summary>
            This class represents IMAP SEARCH <b>DRAFT</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages with the \Draft flag set.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyDraft.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>DRAFT</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>DRAFT</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyDraft.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyFlagged">
            <summary>
            This class represents IMAP SEARCH <b>FLAGGED</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages with the \Flagged flag set.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyFlagged.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>FLAGGED</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>FLAGGED</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyFlagged.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyFrom">
            <summary>
            This class represents IMAP SEARCH <b>FROM (string)</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages that contain the specified string in the message header FROM field.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyFrom.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">String value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyFrom.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>FROM (string)</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>FROM (string)</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyFrom.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeyFrom.Value">
            <summary>
            Gets FROM filter value.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyGroup">
            <summary>
            This class represents parenthesized list of IMAP SEARCH keys. Defined in RFC 3501 6.4.4.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyGroup.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>AND</b> key group.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>AND</b> key group.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyGroup.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeyGroup.Keys">
            <summary>
            Gets AND-ded keys collection.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyHeader">
            <summary>
            This class represents IMAP SEARCH <b>HEADER (field-name) (string)</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages that have a header with the specified field-name (as
            defined in [RFC-2822]) and that contains the specified string
            in the text of the header (what comes after the colon).  If the
            string to search is zero-length, this matches all messages that
            have a header line with the specified field-name regardless of
            the contents.
            </remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyHeader.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="fieldName">Header field name. For example: 'Subject'.</param>
            <param name="value">String value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>fieldName</b> or <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyHeader.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>HEADER (field-name) (string)</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>HEADER (field-name) (string)</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyHeader.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeyHeader.FieldName">
            <summary>
            Gets header field name.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeyHeader.Value">
            <summary>
            Gets filter value.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyKeyword">
            <summary>
            This class represents IMAP SEARCH <b>KEYWORD (flag)</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages with the specified keyword flag set.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyKeyword.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">String value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyKeyword.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>KEYWORD (string)</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>KEYWORD (string)</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyKeyword.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeyKeyword.Value">
            <summary>
            Gets keyword value.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyLarger">
            <summary>
            This class represents IMAP SEARCH <b>LARGER (n)</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages with an [RFC-2822] size larger than the specified number of octets.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyLarger.#ctor(System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Message size in bytes.</param>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyLarger.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>LARGER (string)</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>LARGER (string)</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyLarger.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeyLarger.Value">
            <summary>
            Gets value.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyNew">
            <summary>
            This class represents IMAP SEARCH <b>NEW</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages that have the \Recent flag set but not the \Seen flag.
            This is functionally equivalent to "(RECENT UNSEEN)".</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyNew.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>NEW</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>NEW</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyNew.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyNot">
            <summary>
            This class represents IMAP SEARCH <b>NOT (search-key)</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages that do not match the specified search key.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyNot.#ctor(PX.Common.IMAP.SearchKey)">
            <summary>
            Default constructor.
            </summary>
            <param name="key">Search KEY.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>key</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyNot.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>NOT (search-key)</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>NOT (search-key)</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyNot.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeyNot.SearchKey">
            <summary>
            Gets search KEY.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyOld">
            <summary>
            This class represents IMAP SEARCH <b>OLD</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages that do not have the \Recent flag set.  This is
            functionally equivalent to "NOT RECENT" (as opposed to "NOT NEW").</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyOld.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>OLD</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>OLD</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyOld.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyOn">
            <summary>
            This class represents IMAP SEARCH <b>ON (date)</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages whose internal date (disregarding time and timezone) is within the specified date.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyOn.#ctor(System.DateTime)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Date value.</param>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyOn.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>ON (string)</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>ON (string)</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyOn.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeyOn.Date">
            <summary>
            Gets date value.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyOr">
            <summary>
            This class represents IMAP SEARCH <b>OR (search-key1) (search-key2)</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages that match either search key.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyOr.#ctor(PX.Common.IMAP.SearchKey,PX.Common.IMAP.SearchKey)">
            <summary>
            Default constructor.
            </summary>
            <param name="key1">Search key1.</param>
            <param name="key2">Search key2.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>key1</b> or <b>key2</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyOr.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>OR (search-key1) (search-key2)</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>OR (search-key1) (search-key2)</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyOr.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeyOr.SearchKey1">
            <summary>
            Gets search-key1.
            </summary>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeyOr.SearchKey2">
            <summary>
            Gets search-key2.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyRecent">
            <summary>
            This class represents IMAP SEARCH <b>RECENT</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages that have the \Recent flag set.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyRecent.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>RECENT</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>RECENT</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyRecent.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeySeen">
            <summary>
            This class represents IMAP SEARCH <b>SEEN</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages that have the \Seen flag set.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySeen.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>SEEN</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>SEEN</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySeen.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeySentBefore">
            <summary>
            This class represents IMAP SEARCH <b>SENTBEFORE (date)</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages whose [RFC-2822] Date: header (disregarding time and
            timezone) is earlier than the specified date.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySentBefore.#ctor(System.DateTime)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Date value.</param>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySentBefore.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>SENTBEFORE (string)</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>SENTBEFORE (string)</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySentBefore.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeySentBefore.Date">
            <summary>
            Gets date value.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeySentOn">
            <summary>
            This class represents IMAP SEARCH <b>SENTON (date)</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages whose [RFC-2822] Date: header (disregarding time and
            timezone) is within the specified date.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySentOn.#ctor(System.DateTime)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Date value.</param>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySentOn.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>SENTON (string)</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>SENTON (string)</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySentOn.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeySentOn.Date">
            <summary>
            Gets date value.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeySentSince">
            <summary>
            This class represents IMAP SEARCH <b>SENTSINCE (date)</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages whose [RFC-2822] Date: header (disregarding time and
            timezone) is within or later than the specified date.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySentSince.#ctor(System.DateTime)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Date value</param>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySentSince.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>SENTSINCE (string)</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>SENTSINCE (string)</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySentSince.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeySentSince.Date">
            <summary>
            Gets date value.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeySeqSet">
            <summary>
            This class represents IMAP SEARCH <b>sequence-set</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages with message sequence numbers corresponding to the
            specified message sequence number set.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySeqSet.#ctor(PX.Common.IMAP.SequenceSet)">
            <summary>
            Default constructor.
            </summary>
            <param name="seqSet">IMAP sequence-set.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>seqSet</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySeqSet.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>sequence-set</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>sequence-set</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySeqSet.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeySeqSet.Value">
            <summary>
            Gets sequence-set value.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeySince">
            <summary>
            This class represents IMAP SEARCH <b>SINCE (date)</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages whose internal date (disregarding time and timezone)
            is within or later than the specified date.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySince.#ctor(System.DateTime)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Date value.</param>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySince.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>SINCE (string)</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>SINCE (string)</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySince.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeySince.Date">
            <summary>
            Gets date value.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeySmaller">
            <summary>
            This class represents IMAP SEARCH <b>SMALLER (n)</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages with an [RFC-2822] size smaller than the specified number of octets.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySmaller.#ctor(System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Message size in bytes.</param>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySmaller.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>SMALLER (string)</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>SMALLER (string)</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySmaller.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeySmaller.Value">
            <summary>
            Gets value.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeySubject">
            <summary>
            This class represents IMAP SEARCH <b>SUBJECT (string)</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages that contain the specified string in the message header SUBJECT field.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySubject.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">String value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySubject.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>SUBJCET (string)</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>SUBJECT (string)</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeySubject.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeySubject.Value">
            <summary>
            Gets SUBJECT filter value.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyText">
            <summary>
            This class represents IMAP SEARCH <b>TEXT (string)</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages that contain the specified string in the header or body of the message.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyText.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value"></param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyText.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>TEXT (string)</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>TEXT (string)</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyText.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeyText.Value">
            <summary>
            Gets TEXT filter value.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyTo">
            <summary>
            This class represents IMAP SEARCH <b>TO (string)</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks> Messages that contain the specified string in the message header TO field.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyTo.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">String value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyTo.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>TO (string)</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>TO (string)</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyTo.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeyTo.Value">
            <summary>
            Gets TO filter value.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyUid">
            <summary>
            This class represents IMAP SEARCH <b>UID (sequence set)</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages with unique identifiers corresponding to the specified
            unique identifier set.  Sequence set ranges are permitted.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyUid.#ctor(PX.Common.IMAP.SequenceSet)">
            <summary>
            Default constructor.
            </summary>
            <param name="seqSet">IMAP sequence-set.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>seqSet</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyUid.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>UID (sequence set)</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>UID (sequence set)</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyUid.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeyUid.Value">
            <summary>
            Gets sequence-set value.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyUnanswered">
            <summary>
            This class represents IMAP SEARCH <b>UNANSWERED</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages that do not have the \Answered flag set.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyUnanswered.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>UNANSWERED</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>UNANSWERED</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyUnanswered.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyUndeleted">
            <summary>
            This class represents IMAP SEARCH <b>UNDELETED</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages that do not have the \Deleted flag set.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyUndeleted.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>UNDELETED</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>UNDELETED</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyUndeleted.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyUndraft">
            <summary>
            This class represents IMAP SEARCH <b>UNDRAFT</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages that do not have the \Draft flag set.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyUndraft.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>UNDRAFT</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>UNDRAFT</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyUndraft.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyUnflagged">
            <summary>
            This class represents IMAP SEARCH <b>UNFLAGGED</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages that do not have the \Flagged flag set.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyUnflagged.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>UNFLAGGED</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>UNFLAGGED</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyUnflagged.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyUnkeyword">
            <summary>
            This class represents IMAP SEARCH <b>UNKEYWORD (flag)</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages that do not have the specified keyword flag set.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyUnkeyword.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">String value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyUnkeyword.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>UNKEYWORD (string)</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>UNKEYWORD (string)</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyUnkeyword.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.IMAP.SearchKeyUnkeyword.Value">
            <summary>
            Gets keyword value.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.SearchKeyUnseen">
            <summary>
            This class represents IMAP SEARCH <b>UNSEEN</b> key. Defined in RFC 3501 6.4.4.
            </summary>
            <remarks>Messages that do not have the \Seen flag set.</remarks>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyUnseen.Parse(PX.Common.StringReader)">
            <summary>
            Returns parsed IMAP SEARCH <b>UNSEEN</b> key.
            </summary>
            <param name="r">String reader.</param>
            <returns>Returns parsed IMAP SEARCH <b>UNSEEN</b> key.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>r</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when parsing fails.</exception>
        </member>
        <member name="M:PX.Common.IMAP.SearchKeyUnseen.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="T:PX.Common.IMAP.SequenceSet">
            <summary>
            IMAP sequence-set. RFC 3501.
            <code>
            Examples:
            	2        -> seq-number (2)
            	2:4      -> seq-range  (from 2 - 4)
            	2:*      -> seq-range  (from 2 to last)
            	2,3,10:* -> sequence-set (seq-number,seq-number,seq-range)
            	                       (2,3, 10 - last)
            	
            	NOTES:
            		*) comma separates sequence parts
            		*) * means maximum value.
            </code>
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.SequenceSet.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.SequenceSet.Parse(System.String)">
            <summary>
            Parses sequence-set from specified string. Throws exception if invalid sequnce-set value.
            </summary>
            <param name="sequenceSetString">Sequence-set string.</param>
        </member>
        <member name="M:PX.Common.IMAP.SequenceSet.Parse(System.String,System.Int64)">
            <summary>
            Parses sequence-set from specified string. Throws exception if invalid sequnce-set value.
            </summary>
            <param name="sequenceSetString">Sequence-set string.</param>
            <param name="seqMaxValue">Maximum value. This if for replacement of * value.</param>
        </member>
        <member name="M:PX.Common.IMAP.SequenceSet.Contains(System.Int64)">
            <summary>
            Gets if sequence set contains specified number.
            </summary>
            <param name="seqNumber">Number to check.</param>
        </member>
        <member name="M:PX.Common.IMAP.SequenceSet.ToSequenceSetString">
            <summary>
            Converts IMAP_SequenceSet to IMAP sequence-set string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Common.IMAP.SequenceSet.Parse_Seq_Number(System.String,System.Int64)">
            <summary>
            Parses seq-number from specified value. Throws exception if invalid seq-number value.
            </summary>
            <param name="seqNumberValue">Integer number or *.</param>
            <param name="seqMaxValue">Maximum value. This if for replacement of * value.</param>
        </member>
        <member name="P:PX.Common.IMAP.SequenceSet.Items">
            <summary>
            Gets sequence set ranges.
            </summary>
        </member>
        <member name="T:PX.Common.IMAP.Utils">
            <summary>
            Provides utility methods for IMAP.
            </summary>
        </member>
        <member name="M:PX.Common.IMAP.Utils.ParseMessageFlags(System.String)">
            <summary>
            Parses message flags from string.
            </summary>
            <param name="flagsString">Message flags string.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.IMAP.Utils.MessageFlagsToString(PX.Common.IMAP.MessageFlags)">
            <summary>
            Converts message flags to string. Eg. \SEEN \DELETED .
            </summary>
            <param name="msgFlags">IMAP message flags.</param>
            <returns>Returns message flags as string list.</returns>
        </member>
        <member name="M:PX.Common.IMAP.Utils.MessageFlagsToStringArray(PX.Common.IMAP.MessageFlags)">
            <summary>
            Converts standard IMAP message flags to string array.
            </summary>
            <param name="msgFlags">IMAP message flags.</param>
            <returns>Returns IMAP message flags as string array.</returns>
        </member>
        <member name="M:PX.Common.IMAP.Utils.MessageFlagsAdd(System.String[],System.String[])">
            <summary>
            Adds specified flags to flags list.
            </summary>
            <param name="flags">Current message flags.</param>
            <param name="flagsToAdd">Flags to add.</param>
            <returns>Returns new flags.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>flags</b> or <b>flagsToAdd</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Utils.MessageFlagsRemove(System.String[],System.String[])">
            <summary>
            Removes specified flags from message flags list.
            </summary>
            <param name="flags">Message flags.</param>
            <param name="flagsToRemove">Message flags to remove.</param>
            <returns>Returns new message flags.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>flags</b> or <b>flagsToRemove</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Utils.ACL_to_String(PX.Common.IMAP.ACLFlags)">
            <summary>
            Converts IMAP_ACL_Flags to string.
            </summary>
            <param name="flags">Flags to convert.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.IMAP.Utils.ACL_From_String(System.String)">
            <summary>
            Parses IMAP_ACL_Flags from string.
            </summary>
            <param name="aclString">String from where to convert</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.IMAP.Utils.ParseDate(System.String)">
            <summary>
            Parses IMAP date time from string.
            </summary>
            <param name="date">DateTime string.</param>
            <returns>Returns parsed date-time value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>date</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IMAP.Utils.DateTimeToString(System.DateTime)">
            <summary>
            Converts date time to IMAP date time string.
            </summary>
            <param name="date">DateTime to convert.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.IMAP.Utils.Encode_IMAP_UTF7_String(System.String)">
            <summary>
            Encodes specified data with IMAP modified UTF7 encoding. Defined in RFC 3501 5.1.3.  Mailbox International Naming Convention.
            Example: öö is encoded to &amp;APYA9g-.
            </summary>
            <param name="text">Text to encode.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.IMAP.Utils.Decode_IMAP_UTF7_String(System.String)">
            <summary>
            Decodes IMAP modified UTF7 encoded data. Defined in RFC 3501 5.1.3.  Mailbox International Naming Convention.
            Example: &amp;APYA9g- is decoded to öö.
            </summary>
            <param name="text">Text to encode.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.IMAP.Utils.NormalizeFolder(System.String)">
            <summary>
            Normalizes folder path.  Example: /Inbox/SubFolder/ will be Inbox/SubFolder.
            </summary>
            <param name="folder">Folder path to normalize.</param>
            <returns>Returns normalized folder path.</returns>
        </member>
        <member name="M:PX.Common.IMAP.Utils.IsValidFolderName(System.String)">
            <summary>
            Gets if the specified folder name is valid folder name.
            </summary>
            <param name="folder">Folder name.</param>
            <returns>Returns true if specified folde name is valid.</returns>
        </member>
        <member name="T:PX.Common.IO.Base64">
            <summary>
            This class implements base64 encoder/decoder.  Defined in RFC 4648.
            </summary>
        </member>
        <member name="M:PX.Common.IO.Base64.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.IO.Base64.Encode(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Encodes bytes.
            </summary>
            <param name="buffer">Data buffer.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes available in the buffer.</param>
            <param name="last">Last data block.</param>
            <returns>Returns encoded data.</returns>
        </member>
        <member name="M:PX.Common.IO.Base64.Decode(System.String,System.Boolean)">
            <summary>
            Decodes specified base64 string.
            </summary>
            <param name="value">Base64 string.</param>
            <param name="ignoreNonBase64Chars">If true all invalid base64 chars ignored. If false, FormatException is raised.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:System.FormatException">Is raised when <b>value</b> contains invalid base64 data.</exception>
        </member>
        <member name="M:PX.Common.IO.Base64.Decode(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Decodes specified base64 data.
            </summary>
            <param name="data">Base64 encoded data buffer.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes available in the buffer.</param>
            <param name="ignoreNonBase64Chars">If true all invalid base64 chars ignored. If false, FormatException is raised.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
            <exception cref="T:System.FormatException">Is raised when <b>value</b> contains invalid base64 data.</exception>
        </member>
        <member name="M:PX.Common.IO.Base64.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Decodes base64 encoded bytes.
            </summary>
            <param name="encBuffer">Base64 encoded data buffer.</param>
            <param name="encOffset">Offset in the encBuffer.</param>
            <param name="encCount">Number of bytes available in the encBuffer.</param>
            <param name="buffer">Buffer where to decode data.</param>
            <param name="offset">Offset int the buffer.</param>
            <param name="ignoreNonBase64Chars">If true all invalid base64 chars ignored. If false, FormatException is raised.</param>
            <returns>Returns number of bytes decoded.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>encBuffer</b> or <b>encBuffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
            <exception cref="T:System.FormatException">Is raised when <b>encBuffer</b> contains invalid base64 data.</exception>
        </member>
        <member name="T:PX.Common.IO.Base64Stream">
            <summary>
            This class implements base64 encoder/decoder. Defined in RFC 4648.
            </summary>
        </member>
        <member name="M:PX.Common.IO.Base64Stream.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream which to encode/decode.</param>
            <param name="owner">Specifies if Base64Stream is owner of <b>stream</b>.</param>
            <param name="addLineBreaks">Specifies if encoder inserts CRLF after each 76 bytes.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.Base64Stream.#ctor(System.IO.Stream,System.Boolean,System.Boolean,System.IO.FileAccess)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream which to encode/decode.</param>
            <param name="owner">Specifies if Base64Stream is owner of <b>stream</b>.</param>
            <param name="addLineBreaks">Specifies if encoder inserts CRLF after each 76 bytes.</param>
            <param name="access">This stream access mode.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.Base64Stream.Dispose">
            <summary>
            Celans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.IO.Base64Stream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.Base64Stream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.Base64Stream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="M:PX.Common.IO.Base64Stream.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.Base64Stream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:PX.Common.IO.Base64Stream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes a sequence of bytes, writes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this.Finish has been called and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:PX.Common.IO.Base64Stream.Finish">
            <summary>
            Completes encoding. Call this method if all data has written and no more data. 
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.Base64Stream.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.Base64Stream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.Base64Stream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.Base64Stream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.Base64Stream.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.Base64Stream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="T:PX.Common.IO.DataSizeExceededException">
            <summary>
            The exception that is thrown when maximum allowed data size has exceeded.
            </summary>
        </member>
        <member name="M:PX.Common.IO.DataSizeExceededException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:PX.Common.IO.FifoBuffer">
            <summary>
            Implements FIFO(first in - first out) buffer.
            </summary>
        </member>
        <member name="M:PX.Common.IO.FifoBuffer.#ctor(System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="maxSize">Maximum number of bytes can buffer in FIFO.</param>
            <exception cref="T:System.ArgumentException">Is raised when </exception>
        </member>
        <member name="M:PX.Common.IO.FifoBuffer.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads up to specified count of bytes from the FIFO buffer.
            </summary>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">Index in the buffer.</param>
            <param name="count">Maximum number of bytes to read.</param>
            <returns>Returns number of bytes readed. Returns 0 if no data in the buffer.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of allowed range.</exception>
        </member>
        <member name="M:PX.Common.IO.FifoBuffer.Write(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes specified number of bytes to the FIFO buffer.
            </summary>
            <param name="buffer">Data buffer.</param>
            <param name="offset">Index in the buffer.</param>
            <param name="count">Number of bytes to wrtite.</param>
            <param name="ignoreBufferFull">If true, disables excption raising when FIFO full.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of allowed range.</exception>
            <exception cref="T:PX.Common.IO.DataSizeExceededException">Is raised when ignoreBufferFull = false and FIFO buffer has no room to store data.</exception>
        </member>
        <member name="M:PX.Common.IO.FifoBuffer.Clear">
            <summary>
            Clears buffer data.
            </summary>
        </member>
        <member name="M:PX.Common.IO.FifoBuffer.TrimStart">
            <summary>
            Removes unused space from the buffer beginning.
            </summary>
        </member>
        <member name="P:PX.Common.IO.FifoBuffer.MaxSize">
            <summary>
            Gets maximum number of bytes can buffer in FIFO.
            </summary>
        </member>
        <member name="P:PX.Common.IO.FifoBuffer.Available">
            <summary>
            Gets number of bytes avialable in FIFO.
            </summary>
        </member>
        <member name="T:PX.Common.IO.IncompleteDataException">
            <summary>
            The exception that is thrown when incomplete data received.
            For example for ReadPeriodTerminated() method reaches end of stream before getting period terminator.
            </summary>
        </member>
        <member name="M:PX.Common.IO.IncompleteDataException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.IO.IncompleteDataException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="T:PX.Common.IO.JunkingStream">
            <summary>
            This stream just junks all written data.
            </summary>
        </member>
        <member name="M:PX.Common.IO.JunkingStream.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.IO.JunkingStream.Flush">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="M:PX.Common.IO.JunkingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of the stream to the given value. This method always throws a NotSupportedException.
            </summary>
            <param name="offset">This parameter is not used.</param>
            <param name="origin">This parameter is not used.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.IO.JunkingStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream. This method always throws a NotSupportedException.
            </summary>
            <param name="value">This parameter is not used.</param>
        </member>
        <member name="M:PX.Common.IO.JunkingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream. This method always throws a NotSupportedException.
            </summary>
            <param name="buffer">This parameter is not used.</param>
            <param name="offset">This parameter is not used.</param>
            <param name="size">This parameter is not used.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.IO.JunkingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the stream.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to write to the stream.</param>
            <param name="offset">The location in buffer from which to start writing data.</param>
            <param name="size">The number of bytes to write to the stream.</param>
        </member>
        <member name="P:PX.Common.IO.JunkingStream.CanRead">
            <summary>
            Gets a value indicating whether the stream supports reading. This property always returns false.
            </summary>
        </member>
        <member name="P:PX.Common.IO.JunkingStream.CanSeek">
            <summary>
            Gets a value indicating whether the stream supports seeking. This property always returns false.
            </summary>
        </member>
        <member name="P:PX.Common.IO.JunkingStream.CanWrite">
            <summary>
            Gets a value that indicates whether the stream supports writing.
            </summary>
        </member>
        <member name="P:PX.Common.IO.JunkingStream.Length">
            <summary>
            Gets the length of the data available on the stream. This property always throws a NotSupportedException.
            </summary>
        </member>
        <member name="P:PX.Common.IO.JunkingStream.Position">
            <summary>
            Gets or sets the current position in the stream. This property always throws a NotSupportedException.
            </summary>
        </member>
        <member name="T:PX.Common.IO.LineReader">
            <summary>
            This class implements "line" reader, LF and CRLF lines are supported.
            </summary>
        </member>
        <member name="M:PX.Common.IO.LineReader.#ctor(System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream from where to read lines.</param>
            <param name="owner">Specifies if <b>LineReader</b> is owner of <b>stream</b>.
            If this value is true, closing reader will close <b>stream</b>.</param>
            <param name="bufferSize">Read buffer size, value 1 means no buffering.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:PX.Common.IO.LineReader.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.IO.LineReader.ReadLine">
            <summary>
            Reads line from source stream. Returns null if end of stream(EOS) reached.
            </summary>
            <returns>Returns readed line or null if end of stream reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.LineReader.ReadLine(System.Byte[],System.Int32,System.Int32,PX.Common.IO.SizeExceededAction)">
            <summary>
            Reads binary line and stores it to the specified buffer.
            </summary>
            <param name="buffer">Buffer where to store line data.</param>
            <param name="offset">Start offset in the buffer.</param>
            <param name="count">Maximum number of bytes store to the buffer.</param>
            <param name="exceededAction">Specifies how reader acts when line buffer too small.</param>
            <returns>Returns number of bytes stored to <b>buffer</b> or -1 if end of stream reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:PX.Common.IO.LineSizeExceededException">Is raised when line is bigger than <b>buffer</b> can store.</exception>
        </member>
        <member name="M:PX.Common.IO.LineReader.ReadLine(System.Byte[],System.Int32,System.Int32,PX.Common.IO.SizeExceededAction,System.Int32@)">
            <summary>
            Reads binary line and stores it to the specified buffer.
            </summary>
            <param name="buffer">Buffer where to store line data.</param>
            <param name="offset">Start offset in the buffer.</param>
            <param name="count">Maximum number of bytes store to the buffer.</param>
            <param name="exceededAction">Specifies how reader acts when line buffer too small.</param>
            <param name="rawBytesReaded">Gets raw number of bytes readed from source.</param>
            <returns>Returns number of bytes stored to <b>buffer</b> or -1 if end of stream reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:PX.Common.IO.LineSizeExceededException">Is raised when line is bigger than <b>buffer</b> can store.</exception>
        </member>
        <member name="M:PX.Common.IO.LineReader.SyncStream">
            <summary>
            Sets stream position to the place we have consumed from stream and clears buffer data.
            For example if we have 10 byets in buffer, stream position is actually +10 bigger than 
            we readed, the result is that stream.Position -= 10 and buffer is cleared.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when source stream won't support seeking.</exception>
        </member>
        <member name="P:PX.Common.IO.LineReader.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.LineReader.Stream">
            <summary>
            Gets source stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.LineReader.IsStreamOwner">
            <summary>
            Gets if line reader is <b>Stream</b> owner.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.LineReader.Charset">
            <summary>
            Gets or sets charset to us for deocoding bytes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference is passed.</exception>
        </member>
        <member name="P:PX.Common.IO.LineReader.AvailableInBuffer">
            <summary>
            Gets number of bytes in read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.LineReader.CanSyncStream">
            <summary>
            Gets if line reader can synchronize source stream to actual readed data position.
            </summary>
        </member>
        <member name="T:PX.Common.IO.LineSizeExceededException">
            <summary>
            The exception that is thrown when maximum allowed line size has exceeded.
            </summary>
        </member>
        <member name="M:PX.Common.IO.LineSizeExceededException.#ctor">
            <summary>
            Default coonstructor.
            </summary>
        </member>
        <member name="T:PX.Common.IO.MultiStream">
            <summary>
            This class combines multiple stream into one stream for reading.
            The most common usage for that stream is when you need to insert some data to the beginning of some stream.
            </summary>
        </member>
        <member name="M:PX.Common.IO.MultiStream.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.IO.MultiStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.IO.MultiStream.AppendStream(System.IO.Stream)">
            <summary>
            Appends this stream to read queue.
            </summary>
            <param name="stream">Stream to add.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:PX.Common.IO.MultiStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.MultiStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.MultiStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="M:PX.Common.IO.MultiStream.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.MultiStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.MultiStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.MultiStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.MultiStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.MultiStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.MultiStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when one of the source streams won't support <b>Length</b> property.</exception>
        </member>
        <member name="P:PX.Common.IO.MultiStream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="T:PX.Common.IO.PartialStream">
            <summary>
            Implements read-only stream what operates on specified range of source stream
            </summary>
        </member>
        <member name="M:PX.Common.IO.PartialStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="start">Zero based start positon in source stream.</param>
            <param name="length">Length of stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IO.PartialStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.IO.PartialStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.PartialStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.PartialStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.PartialStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.PartialStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.PartialStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.PartialStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.PartialStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.PartialStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="M:PX.Common.IO.PartialStream.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.PartialStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:PX.Common.IO.QuotedPrintableStream">
            <summary>
            Implements RFC 2045 6.7. Quoted-Printable stream.
            </summary>
        </member>
        <member name="M:PX.Common.IO.QuotedPrintableStream.#ctor(PX.Common.IO.SmartStream,System.IO.FileAccess)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="access">Specifies stream access mode.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.QuotedPrintableStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.QuotedPrintableStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.QuotedPrintableStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.QuotedPrintableStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:PX.Common.IO.QuotedPrintableStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes a sequence of bytes, writes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="P:PX.Common.IO.QuotedPrintableStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.QuotedPrintableStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.QuotedPrintableStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.QuotedPrintableStream.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.QuotedPrintableStream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="T:PX.Common.IO.ReadLineEventArgs">
            <summary>
            This class provides data to <see cref="M:PX.Common.IO.SmartStream.ReadLine(PX.Common.IO.SmartStream.ReadLineAsyncOP,System.Boolean)">SmartStream.ReadLine</see> method.
            </summary>
            <remarks>This class can be reused on multiple calls of <see cref="M:PX.Common.IO.SmartStream.ReadLine(PX.Common.IO.SmartStream.ReadLineAsyncOP,System.Boolean)">SmartStream.ReadLine</see> method.</remarks>
        </member>
        <member name="M:PX.Common.IO.ReadLineEventArgs.#ctor(System.Byte[],PX.Common.IO.SizeExceededAction)">
            <summary>
            Default constructor.
            </summary>
            <param name="buffer">Line buffer.</param>
            <param name="exceededAction">Specifies how line-reader behaves when maximum line size exceeded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.ReadLineEventArgs.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:PX.Common.IO.ReadLineEventArgs.DoLineReading">
            <summary>
            Starts/continues line reading.
            </summary>
            <returns>Returns true if line reading completed.</returns>
        </member>
        <member name="P:PX.Common.IO.ReadLineEventArgs.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.ReadLineEventArgs.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.ReadLineEventArgs.Buffer">
            <summary>
            Gets line buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.ReadLineEventArgs.BytesInBuffer">
            <summary>
            Gets number of bytes stored in the buffer. Line feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.ReadLineEventArgs.LineAscii">
            <summary>
            Gets line as ASCII string.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.ReadLineEventArgs.LineUtf8">
            <summary>
            Gets line as UTF-8 string.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.ReadLineEventArgs.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:PX.Common.IO.ReadLineEventArgs.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:PX.Common.IO.ReadLineEventArgs.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="T:PX.Common.IO.ReadWriteControlledStream">
            <summary>
            This class implements read,write or read-write access stream.
            </summary>
        </member>
        <member name="M:PX.Common.IO.ReadWriteControlledStream.#ctor(System.IO.Stream,System.IO.FileAccess)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="access">This stream access mode.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.ReadWriteControlledStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.ReadWriteControlledStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:PX.Common.IO.ReadWriteControlledStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:PX.Common.IO.ReadWriteControlledStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:PX.Common.IO.ReadWriteControlledStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="P:PX.Common.IO.ReadWriteControlledStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.ReadWriteControlledStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.ReadWriteControlledStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.ReadWriteControlledStream.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.ReadWriteControlledStream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:PX.Common.IO.SizeExceededAction">
            <summary>
            Specifies action what is done if requested action exceeds maximum allowed size.
            </summary>
        </member>
        <member name="F:PX.Common.IO.SizeExceededAction.ThrowException">
            <summary>
            Throws exception at once when maximum size exceeded.
            </summary>
        </member>
        <member name="F:PX.Common.IO.SizeExceededAction.JunkAndThrowException">
            <summary>
            Junks all data what exceeds maximum allowed size and after requested operation completes,
            throws exception.
            </summary>
        </member>
        <member name="T:PX.Common.IO.SmartStream">
            <summary>
            This class is wrapper to normal stream, provides most needed stream methods which are missing from normal stream.
            </summary>
        </member>
        <member name="T:PX.Common.IO.SmartStream.ReadLineAsyncOperation">
            <summary>
            This class implements asynchronous line reading.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOperation.#ctor(PX.Common.IO.SmartStream,System.Byte[],System.Int32,System.Int32,PX.Common.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">The location in <b>buffer</b> to begin storing the data.</param>
            <param name="maxCount">Maximum number of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b>,<b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOperation.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOperation.DoLineReading">
            <summary>
            Does line reading.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOperation.Buffer">
            <summary>
            Gets store buffer.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOperation.BytesReaded">
            <summary>
            Gets number of bytes readed from source stream.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>Buffer</b>.
            </summary>
        </member>
        <member name="T:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation">
            <summary>
            This class implements asynchronous line-based terminated data reader, where terminator is on line itself.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.#ctor(PX.Common.IO.SmartStream,System.String,System.IO.Stream,System.Int64,PX.Common.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="terminator">Data terminator.</param>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b>,<b>terminator</b> or <b>storeStream</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.ReadLine_Completed(System.IAsyncResult)">
            <summary>
            This method is called when asyynchronous line reading has completed.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.Terminator">
            <summary>
            Gets terminator.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>storeStream</b>.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.Exception">
            <summary>
            Gets exception happened on asynchronous operation. Returns null if operation was successfull.
            </summary>
        </member>
        <member name="T:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation">
            <summary>
            This class implements asynchronous read to stream data reader.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.#ctor(PX.Common.IO.SmartStream,System.IO.Stream,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="count">Number of bytes to read from source stream.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> or <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.DoDataReading">
            <summary>
            Does data reading.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>storeStream</b>.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.Exception">
            <summary>
            Gets exception happened on asynchronous operation. Returns null if operation was successfull.
            </summary>
        </member>
        <member name="T:PX.Common.IO.SmartStream.ReadAsyncOperation">
            <summary>
            This class implements asynchronous data reader.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadAsyncOperation.#ctor(PX.Common.IO.SmartStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">The location in <b>buffer</b> to begin storing the data.</param>
            <param name="maxSize">Maximum number of bytes to read.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadAsyncOperation.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadAsyncOperation.DoRead">
            <summary>
            Does asynchronous data reading.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadAsyncOperation.Buffer">
            <summary>
            Gets store buffer.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>Buffer</b>.
            </summary>
        </member>
        <member name="T:PX.Common.IO.SmartStream.ReadLineAsyncOP">
            <summary>
            This class implements read line operation.
            </summary>
            <remarks>This class can be reused on multiple calls of <see cref="M:PX.Common.IO.SmartStream.ReadLine(PX.Common.IO.SmartStream.ReadLineAsyncOP,System.Boolean)">SmartStream.ReadLine</see> method.</remarks>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOP.#ctor(System.Byte[],PX.Common.IO.SizeExceededAction)">
            <summary>
            Default constructor.
            </summary>
            <param name="buffer">Line buffer.</param>
            <param name="exceededAction">Specifies how line-reader behaves when maximum line size exceeded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOP.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOP.Start(System.Boolean,PX.Common.IO.SmartStream)">
            <summary>
            Starts reading line.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <param name="stream">Owner SmartStream.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOP.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOP.DoLineReading(System.Boolean)">
            <summary>
            Starts/continues line reading.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <returns>Returns true if line reading completed.</returns>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOP.SetInfo(System.Int32,System.Exception)">
            <summary>
            Sets specified field values.
            </summary>
            <param name="bytesInBuffer">Number of bytes in buffer.</param>
            <param name="exception">Exception.</param>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.SizeExceededAction">
            <summary>
            Gets line size exceeded action.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.Buffer">
            <summary>
            Gets line buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.BytesInBuffer">
            <summary>
            Gets number of bytes stored in the buffer. Ending line-feed characters included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.LineBytesInBuffer">
            <summary>
            Gets number of line data bytes stored in the buffer. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.LineAscii">
            <summary>
            Gets line as ASCII string. Returns null if EOS(end of stream) reached. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.LineUtf8">
            <summary>
            Gets line as UTF-8 string. Returns null if EOS(end of stream) reached. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.LineUtf32">
            <summary>
            Gets line as UTF-32 string. Returns null if EOS(end of stream) reached. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:PX.Common.IO.SmartStream.ReadLineAsyncOP.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOP.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="T:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP">
            <summary>
            This class implements read period-terminated operation.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.#ctor(System.IO.Stream,System.Int64,System.Int32,PX.Common.IO.SizeExceededAction)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream wehre to sore readed data.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies how period-terminated reader behaves when <b>maxCount</b> exceeded.</param>
            <param name="bufferSize">Define size of buffer for command result.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Start(PX.Common.IO.SmartStream)">
            <summary>
            Starts period-terminated data reading.
            </summary>
            <param name="stream">Owner SmartStream.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.m_pReadLineOP_Completed(System.Object,PX.Common.EventArgs{PX.Common.IO.SmartStream.ReadLineAsyncOP})">
            <summary>
            Is called when asynchronous line reading has completed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.DoRead">
            <summary>
            Continues period-terminated reading.
            </summary>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.ProcessReadedLine">
            <summary>
            Processes readed line.
            </summary>
            <returns>Returns true if read period-terminated operation has completed.</returns>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Stream">
            <summary>
            Gets stream where period terminated data has stored.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.BytesStored">
            <summary>
            Gets number of bytes stored to <see cref="P:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Stream">Stream</see> stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.LinesStored">
            <summary>
            Gets number of lines stored to <see cref="P:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Stream">Stream</see> stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="T:PX.Common.IO.SmartStream.BufferReadAsyncOP">
            <summary>
            This class implements asynchronous read buffering.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BufferReadAsyncOP.#ctor(PX.Common.IO.SmartStream)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BufferReadAsyncOP.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BufferReadAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BufferReadAsyncOP.Start(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Starts asynchronous operation.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <param name="buffer">Buffer where to store readed data.</param>
            <param name="count">Maximum number of bytes to read.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <returns>Returns true if operation completed synchronously, false if asynchronous operation pending.</returns>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BufferReadAsyncOP.ReleaseEvents">
            <summary>
            Releases all events attached to this class.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.BufferReadAsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.BufferReadAsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.BufferReadAsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.BufferReadAsyncOP.Buffer">
            <summary>
            Gets read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.BufferReadAsyncOP.BytesInBuffer">
            <summary>
            Gets number of bytes stored in read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.BufferReadAsyncOP.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:PX.Common.IO.SmartStream.BufferReadAsyncOP.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BufferReadAsyncOP.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream to wrap.</param>
            <param name="owner">Specifies if SmartStream is owner of <b>stream</b>.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BeginReadLine(System.Byte[],System.Int32,System.Int32,PX.Common.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous line reading from the source stream.
            </summary>
            <param name="buffer">Buffer where to store readed line data.</param>
            <param name="offset">The location in <b>buffer</b> to begin storing the data.</param>
            <param name="maxCount">Maximum number of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An IAsyncResult that represents the asynchronous call.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.EndReadLine(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous line reading.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
            <returns>Returns number of bytes stored to <b>buffer</b>. Returns -1 if no more data, end of stream reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndReadLine</b> has already been called for specified <b>asyncResult</b>.</exception>
            <exception cref="T:PX.Common.IO.LineSizeExceededException">Is raised when <b>maxCount</b> value is exceeded.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLine(PX.Common.IO.SmartStream.ReadLineAsyncOP,System.Boolean)">
            <summary>
            Begins line reading.
            </summary>
            <param name="op">Read line opeartion.</param>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BeginReadHeader(System.IO.Stream,System.Int32,PX.Common.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous header reading from the source stream.
            </summary>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies action what is done if <b>maxCount</b> number of bytes has exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An IAsyncResult that represents the asynchronous call.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.EndReadHeader(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous header reading.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
            <returns>Returns number of bytes stored to <b>storeStream</b>.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndReadLine</b> has already been called for specified <b>asyncResult</b>.</exception>
            <exception cref="T:PX.Common.IO.LineSizeExceededException">Is raised when source stream has too big line.</exception>
            <exception cref="T:PX.Common.IO.DataSizeExceededException">Is raised when reading exceeds <b>maxCount</b> specified value.</exception>
            <exception cref="T:PX.Common.IO.IncompleteDataException">Is raised when source stream closed before header-terminator reached.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadHeader(System.IO.Stream,System.Int32,PX.Common.IO.SizeExceededAction)">
            <summary>
            Reads header from stream and stores to the specified <b>storeStream</b>.
            </summary>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies action what is done if <b>maxCount</b> number of bytes has exceeded.</param>
            <returns>Returns how many bytes readed from source stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:PX.Common.IO.LineSizeExceededException">Is raised when source stream has too big line.</exception>
            <exception cref="T:PX.Common.IO.DataSizeExceededException">Is raised when reading exceeds <b>maxCount</b> specified value.</exception>
            <exception cref="T:PX.Common.IO.IncompleteDataException">Is raised when source stream closed before header-terminator reached.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadPeriodTerminated(PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP,System.Boolean)">
            <summary>
            Begins period-terminated data reading.
            </summary>
            <param name="op">Read period terminated opeartion.</param>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BeginReadFixedCount(System.IO.Stream,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous data reading from the source stream.
            </summary>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="count">Number of bytes to read.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An IAsyncResult that represents the asynchronous call.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.EndReadFixedCount(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous data reading.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndReadToStream</b> has already been called for specified <b>asyncResult</b>.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadFixedCount(System.IO.Stream,System.Int64)">
            <summary>
            Reads specified number of bytes from source stream and writes to the specified stream.
            </summary>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="count">Number of bytes to read.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadFixedCountString(System.Int32)">
            <summary>
            Reads specified number of bytes from source stream and converts it to string with current encoding.
            </summary>
            <param name="count">Number of bytes to read.</param>
            <returns>Returns readed data as string.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadAll(System.IO.Stream)">
            <summary>
            Reads all data from source stream and stores to the specified stream.
            </summary>
            <param name="stream">Stream where to store readed data.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.Peek">
            <summary>
            Returns the next available character but does not consume it.
            </summary>
            <returns>An integer representing the next character to be read, or -1 if no more characters are available.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.Write(System.String)">
            <summary>
            Writes specified string data to stream.
            </summary>
            <param name="data">Data to write.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WriteLine(System.String)">
            <summary>
            Writes specified line to stream. If CRLF is missing, it will be added automatically to line data.
            </summary>
            <param name="line">Line to send.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>line</b> is null.</exception>
            <returns>Returns number of raw bytes written.</returns>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WriteStream(System.IO.Stream)">
            <summary>
            Writes all source <b>stream</b> data to stream.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WriteStream(System.IO.Stream,System.Int64)">
            <summary>
            Writes specified number of bytes from source <b>stream</b> to stream.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <param name="count">Number of bytes to write.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when <b>count</b> argument has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WritePeriodTerminated(System.IO.Stream)">
            <summary>
            Writes period handled and terminated data to this stream.
            </summary>
            <param name="stream">Source stream. Reading starts from stream current location.</param>
            <returns>Returns number of bytes written to stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:PX.Common.IO.LineSizeExceededException">Is raised when <b>stream</b> has too big line.</exception>        
        </member>
        <member name="T:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP">
            <summary>
            This class represents <see cref="M:PX.Common.IO.SmartStream.WritePeriodTerminatedAsync(PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.#ctor(System.IO.Stream)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream. Reading starts from stream current location.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.Start(PX.Common.IO.SmartStream)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner SmartStream.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.SetState(PX.Common.AsyncOP_State)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.ReadLineCompleted(PX.Common.IO.SmartStream.ReadLineAsyncOP)">
            <summary>
            Is called when source stream read line reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.SendLineCompleted(System.IAsyncResult)">
            <summary>
            Is called when line sending has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.SendTerminatorCompleted(System.IAsyncResult)">
            <summary>
            Is called when ".CRLF" or "CRLF.CRLF" terminator sending has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="P:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.BytesWritten">
            <summary>
            Gets number of bytes written.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="E:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WritePeriodTerminatedAsync(PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP)">
            <summary>
            Starts writing period handled and terminated data to this stream.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WriteHeader(System.IO.Stream)">
            <summary>
            Reads header from source <b>stream</b> and writes it to stream.
            </summary>
            <param name="stream">Stream from where to read header.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation.
            </summary>
            <param name="buffer">The buffer to read the data into.</param>
            <param name="offset">The byte offset in buffer at which to begin writing data read from the stream.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An IAsyncResult that represents the asynchronous read, which could still be pending.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.EndRead(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous data reading.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>The total number of bytes read into the <b>buffer</b>. This can be less than the number of bytes requested 
            if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The byte offset in buffer from which to begin writing.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <param name="callback">An optional asynchronous callback, to be called when the write is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
            <returns>An IAsyncResult that represents the asynchronous write, which could still be pending.</returns>
        </member>
        <member name="M:PX.Common.IO.SmartStream.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation.
            </summary>
            <param name="asyncResult">A reference to the outstanding asynchronous I/O request.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BufferRead(System.Boolean,PX.Common.IO.SmartStream.BufferCallback)">
            <summary>
            Begins buffering read-buffer.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <param name="asyncCallback">The callback that is executed when asynchronous operation completes. 
            If operation completes synchronously, no callback called.</param>
            <returns>
            Returns true if the I/O operation is pending. The BufferReadAsyncEventArgs.Completed event on the context parameter will be raised upon completion of the operation. 
            Returns false if the I/O operation completed synchronously. The BufferReadAsyncEventArgs.Completed event on the context parameter will not be raised and the context object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation. 
            </returns>
            <exception cref="T:System.InvalidOperationException">Is raised when there is data in read buffer and this method is called.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.SourceStream">
            <summary>
            Gets this stream underlying stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.IsOwner">
            <summary>
            Gets if SmartStream is owner of source stream. This property affects like closing this stream will close SourceStream if IsOwner true.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.LastActivity">
            <summary>
            Gets the last time when data was read or written.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.BytesReaded">
            <summary>
            Gets how many bytes are readed through this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.BytesWritten">
            <summary>
            Gets how many bytes are written through this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.BytesInReadBuffer">
            <summary>
            Gets number of bytes in read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.Encoding">
            <summary>
            Gets or sets string related methods default encoding.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:PX.Common.IO.TempFileStream">
            <summary>
            This class represents auto switching memory/temp-file stream.
            </summary>
        </member>
        <member name="M:PX.Common.IO.TempFileStream.#ctor(System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="memSize">Maximum bytes store to memory, before switching over temporary file.</param>
        </member>
        <member name="M:PX.Common.IO.TempFileStream.Finalize">
            <summary>
            Destructor - Just incase user won't call dispose.
            </summary>
        </member>
        <member name="M:PX.Common.IO.TempFileStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.IO.TempFileStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.TempFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.TempFileStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.TempFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.TempFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.IO.TempFileStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.TempFileStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.TempFileStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.TempFileStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="M:PX.Common.IO.TempFileStream.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.TempFileStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:PX.Common.IPBindInfo">
            <summary>
            Holds IP bind info.
            </summary>
        </member>
        <member name="M:PX.Common.IPBindInfo.#ctor(System.String,PX.Common.BindInfoProtocol,System.Net.IPAddress,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="hostName">Host name.</param>
            <param name="protocol">Bind protocol.</param>
            <param name="ip">IP address to listen.</param>
            <param name="port">Port to listen.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null.</exception>
        </member>
        <member name="M:PX.Common.IPBindInfo.#ctor(System.String,System.Net.IPAddress,System.Int32,PX.Common.SslMode,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Default constructor.
            </summary>
            <param name="hostName">Host name.</param>
            <param name="ip">IP address to listen.</param>
            <param name="port">Port to listen.</param>
            <param name="sslMode">Specifies SSL mode.</param>
            <param name="sslCertificate">Certificate to use for SSL connections.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null.</exception>
        </member>
        <member name="M:PX.Common.IPBindInfo.#ctor(System.String,PX.Common.BindInfoProtocol,System.Net.IPAddress,System.Int32,PX.Common.SslMode,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Default constructor.
            </summary>
            <param name="hostName">Host name.</param>
            <param name="protocol">Bind protocol.</param>
            <param name="ip">IP address to listen.</param>
            <param name="port">Port to listen.</param>
            <param name="sslMode">Specifies SSL mode.</param>
            <param name="sslCertificate">Certificate to use for SSL connections.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IPBindInfo.Equals(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>Returns true if two objects are equal.</returns>
        </member>
        <member name="M:PX.Common.IPBindInfo.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
            <returns>Returns the hash code.</returns>
        </member>
        <member name="P:PX.Common.IPBindInfo.HostName">
            <summary>
            Gets host name.
            </summary>
        </member>
        <member name="P:PX.Common.IPBindInfo.Protocol">
            <summary>
            Gets protocol.
            </summary>
        </member>
        <member name="P:PX.Common.IPBindInfo.EndPoint">
            <summary>
            Gets IP end point.
            </summary>
        </member>
        <member name="P:PX.Common.IPBindInfo.IP">
            <summary>
            Gets IP address.
            </summary>
        </member>
        <member name="P:PX.Common.IPBindInfo.Port">
            <summary>
            Gets port.
            </summary>
        </member>
        <member name="P:PX.Common.IPBindInfo.SslMode">
            <summary>
            Gets SSL mode.
            </summary>
        </member>
        <member name="P:PX.Common.IPBindInfo.SSL_Certificate">
            <summary>
            Gets SSL certificate.
            </summary>
        </member>
        <member name="P:PX.Common.IPBindInfo.Certificate">
            <summary>
            Gets SSL certificate.
            </summary>
        </member>
        <member name="P:PX.Common.IPBindInfo.Tag">
            <summary>
            Gets or sets user data. This is used internally don't use it !!!.
            </summary>
        </member>
        <member name="T:PX.Common.KeyValueCollection`2">
            <summary>
            Represents a collection that can be accessed either with the key or with the index. 
            </summary>
        </member>
        <member name="M:PX.Common.KeyValueCollection`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.KeyValueCollection`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the collection.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:PX.Common.KeyValueCollection`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from the collection.
            </summary>
            <param name="key">Key.</param>
            <returns>Returns if key found and removed, otherwise false.</returns>
        </member>
        <member name="M:PX.Common.KeyValueCollection`2.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:PX.Common.KeyValueCollection`2.ContainsKey(`0)">
            <summary>
            Gets if the collection contains the specified key.
            </summary>
            <param name="key">Key.</param>
            <returns>Returns true if the collection contains specified key.</returns>
        </member>
        <member name="M:PX.Common.KeyValueCollection`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">Key.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found.</param>
            <returns>Returns true if the collection contains specified key and value stored to <b>value</b> argument.</returns>
        </member>
        <member name="M:PX.Common.KeyValueCollection`2.TryGetValueAt(System.Int32,`1@)">
            <summary>
            Gets the value at the specified index.
            </summary>
            <param name="index">Zero based item index.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found.</param>
            <returns>Returns true if the collection contains specified key and value stored to <b>value</b> argument.</returns>
        </member>
        <member name="M:PX.Common.KeyValueCollection`2.ToArray">
            <summary>
            Copies all elements to new array, all elements will be in order they added. This method is thread-safe.
            </summary>
            <returns>Returns elements in a new array.</returns>
        </member>
        <member name="M:PX.Common.KeyValueCollection`2.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns>Returns IEnumerator interface.</returns>
        </member>
        <member name="P:PX.Common.KeyValueCollection`2.Count">
            <summary>
            Gets number of items int he collection.
            </summary>
        </member>
        <member name="P:PX.Common.KeyValueCollection`2.Item(`0)">
            <summary>
            Gets item with the specified key.
            </summary>
            <param name="key">Key.</param>
            <returns>Returns item with the specified key. If the specified key is not found, a get operation throws a KeyNotFoundException.</returns>
        </member>
        <member name="P:PX.Common.DaylightSavingTime.Start">
            <summary>
            Represents start date and time of the DST in the time zone's standard time.
            </summary>
        </member>
        <member name="P:PX.Common.DaylightSavingTime.End">
            <summary>
            Represents end date and time of the DST in the time zone's daylight saving time.
            </summary>
        </member>
        <member name="T:PX.Common.PXLocalizableAttribute">
            <summary>
            Defines attribute which marks a class as messages container and 
            adds a user-defined prefix to exception message (such as "System error", "Data error", etc.)
            If this attribute is applied to a class all const string data members of that class will be considered
            as messages and PXMessages class will be able to localize them by searching an appropriate
            translation in resources files.
            </summary>
        </member>
        <member name="T:PX.Common.Mail.Address">
            <summary>
            This class represents RFC 5322 3.4 Address class. 
            This class is base class for <see cref="T:PX.Common.Mail.Mailbox">mailbox address</see> and <see cref="T:PX.Common.Mail.Group">group address</see>.
            </summary>
        </member>
        <member name="M:PX.Common.Mail.Address.ToString(PX.Common.MIME.EncodingEncodedWord)">
            <summary>
            Returns address as string value.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <returns>Returns address as string value.</returns>
        </member>
        <member name="T:PX.Common.Mail.AddressList">
            <summary>
            This class represents <b>address-list</b>. Defined in RFC 5322 3.4.
            </summary>
            <example>
            <code>
            RFC 5322.
                address-list = (address *("," address))
                address      = mailbox / group
            </code>
            </example>
        </member>
        <member name="M:PX.Common.Mail.AddressList.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.Mail.AddressList.Parse(System.String)">
            <summary>
            Parses <b>address-list</b> from specified string value.
            </summary>
            <param name="value">The <b>address-list</b> string value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when <b>value</b> is not valid <b>address-list</b> value.</exception>
        </member>
        <member name="M:PX.Common.Mail.AddressList.Insert(System.Int32,PX.Common.Mail.Address)">
            <summary>
            Inserts a address into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the item.</param>
            <param name="value">Address to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Mail.AddressList.Add(PX.Common.Mail.Address)">
            <summary>
            Adds specified address to the end of the collection.
            </summary>
            <param name="value">Address to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference value.</exception>
        </member>
        <member name="M:PX.Common.Mail.AddressList.Remove(PX.Common.Mail.Address)">
            <summary>
            Removes specified item from the collection.
            </summary>
            <param name="value">Address to remove.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference value.</exception>
        </member>
        <member name="M:PX.Common.Mail.AddressList.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:PX.Common.Mail.AddressList.ToArray">
            <summary>
            Copies addresses to new array.
            </summary>
            <returns>Returns addresses array.</returns>
        </member>
        <member name="M:PX.Common.Mail.AddressList.ToString">
            <summary>
            Returns address-list as string.
            </summary>
            <returns>Returns address-list as string.</returns>
        </member>
        <member name="M:PX.Common.Mail.AddressList.AcceptChanges">
            <summary>
            Resets IsModified property to false.
            </summary>
        </member>
        <member name="M:PX.Common.Mail.AddressList.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PX.Common.Mail.AddressList.IsModified">
            <summary>
            Gets if list has modified since it was loaded.
            </summary>
        </member>
        <member name="P:PX.Common.Mail.AddressList.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:PX.Common.Mail.AddressList.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>Returns the element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
        </member>
        <member name="P:PX.Common.Mail.AddressList.Mailboxes">
            <summary>
            Gets this address list mailboxes(group address mailboxes + mailboxes).
            </summary>
        </member>
        <member name="T:PX.Common.Mail.Group">
            <summary>
            This class represents "group" address. Defined in RFC 5322 3.4.
            </summary>
        </member>
        <member name="M:PX.Common.Mail.Group.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="displayName">Display name. Value null means not specified.</param>
        </member>
        <member name="M:PX.Common.Mail.Group.ToString">
            <summary>
            Returns mailbox as string.
            </summary>
            <returns>Returns mailbox as string.</returns>
        </member>
        <member name="M:PX.Common.Mail.Group.ToString(PX.Common.MIME.EncodingEncodedWord)">
            <summary>
            Returns address as string value.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <returns>Returns address as string value.</returns>
        </member>
        <member name="P:PX.Common.Mail.Group.DisplayName">
            <summary>
            Gets or sets diplay name. Value null means not specified.
            </summary>
        </member>
        <member name="P:PX.Common.Mail.Group.Members">
            <summary>
            Gets groiup address members collection.
            </summary>
        </member>
        <member name="T:PX.Common.Mail.HeaderAddressList">
            <summary>
            This class represent generic <b>address-list</b> header fields. For example: To header.
            </summary>
            <example>
            <code>
            RFC 5322.
                header       = "FiledName:" address-list CRLF
                address-list = (address *("," address))
                address      = mailbox / group
            </code>
            </example>
        </member>
        <member name="M:PX.Common.Mail.HeaderAddressList.#ctor(System.String,PX.Common.Mail.AddressList)">
            <summary>
            Default constructor.
            </summary>
            <param name="fieldName">Header field name. For example: "To".</param>
            <param name="values">Addresses collection.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>filedName</b> or <b>values</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.Mail.HeaderAddressList.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:PX.Common.Mail.HeaderAddressList.ToString(PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:PX.Common.Mail.HeaderAddressList.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.HeaderAddressList.Name">
            <summary>
            Gets header field name. For example "To".
            </summary>
        </member>
        <member name="P:PX.Common.Mail.HeaderAddressList.Addresses">
            <summary>
            Gets addresses collection.
            </summary>
        </member>
        <member name="T:PX.Common.Mail.HeaderDispositionNotificationOptions">
            <summary>
            Represents "Disposition-Notification-Options:" header. Defined in RFC 2298 2.2.
            </summary>
        </member>
        <member name="M:PX.Common.Mail.HeaderDispositionNotificationOptions.ToString(PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:PX.Common.Mail.HeaderDispositionNotificationOptions.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.HeaderDispositionNotificationOptions.Name">
            <summary>
            Gets header field name. For example "Sender".
            </summary>
        </member>
        <member name="P:PX.Common.Mail.HeaderDispositionNotificationOptions.Address">
            <summary>
            Gets or sets mailbox address.
            </summary>
        </member>
        <member name="T:PX.Common.Mail.HeaderMailbox">
            <summary>
            This class represent generic <b>mailbox</b> header fields. For example: Sender: header.
            </summary>
            <example>
            <code>
            RFC 5322.
                header = "FiledName:" mailbox CRLF
            </code>
            </example>
        </member>
        <member name="M:PX.Common.Mail.HeaderMailbox.#ctor(System.String,PX.Common.Mail.Mailbox)">
            <summary>
            Default constructor.
            </summary>
            <param name="fieldName">Header field name. For example: "Sender".</param>
            <param name="mailbox">Mailbox value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>filedName</b> or <b>mailbox</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.Mail.HeaderMailbox.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Sender: john.doe@domain.com'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:PX.Common.Mail.HeaderMailbox.ToString(PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:PX.Common.Mail.HeaderMailbox.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.HeaderMailbox.Name">
            <summary>
            Gets header field name. For example "Sender".
            </summary>
        </member>
        <member name="P:PX.Common.Mail.HeaderMailbox.Address">
            <summary>
            Gets mailbox address.
            </summary>
        </member>
        <member name="T:PX.Common.Mail.HeaderMailboxList">
            <summary>
            This class represent generic <b>mailbox-list</b> header fields. For example: From header.
            </summary>
            <example>
            <code>
            RFC 5322.
                header       = "FiledName:" mailbox-list CRLF
                mailbox-list =  (mailbox *("," mailbox)) / obs-mbox-list
            </code>
            </example>
        </member>
        <member name="M:PX.Common.Mail.HeaderMailboxList.#ctor(System.String,PX.Common.Mail.MailboxList)">
            <summary>
            Default constructor.
            </summary>
            <param name="filedName">Header field name. For example: "To".</param>
            <param name="values">Addresses collection.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>filedName</b> or <b>values</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.Mail.HeaderMailboxList.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:PX.Common.Mail.HeaderMailboxList.ToString(PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:PX.Common.Mail.HeaderMailboxList.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.HeaderMailboxList.Name">
            <summary>
            Gets header field name. For example "From".
            </summary>
        </member>
        <member name="P:PX.Common.Mail.HeaderMailboxList.Addresses">
            <summary>
            Gets addresses collection.
            </summary>
        </member>
        <member name="T:PX.Common.Mail.HeaderReceived">
             <summary>
             Represents "Received:" header. Defined in RFC 5321 4.4.
             </summary>
             <remarks>
             <code>
             RFC 5321 4.4.
                 Time-stamp-line = "Received:" FWS Stamp CRLF
                 
                 Stamp           = From-domain By-domain Opt-info [CFWS] ";" FWS date-time
                                 ; where "date-time" is as defined in RFC 5322 [4]
                                 ; but the "obs-" forms, especially two-digit
                                 ; years, are prohibited in SMTP and MUST NOT be used.
                                 
                 From-domain     = "FROM" FWS Extended-Domain
            
                 By-domain       = CFWS "BY" FWS Extended-Domain
            
                 Extended-Domain = Domain / ( Domain FWS "(" TCP-info ")" ) / ( address-literal FWS "(" TCP-info ")" )
            
                 TCP-info        = address-literal / ( Domain FWS address-literal )
                                 ; Information derived by server from TCP connection not client EHLO.
            
                 Opt-info        = [Via] [With] [ID] [For] [Additional-Registered-Clauses]
            
                 Via             = CFWS "VIA" FWS Link
            
                 With            = CFWS "WITH" FWS Protocol
            
                 ID              = CFWS "ID" FWS ( Atom / msg-id )
                                 ; msg-id is defined in RFC 5322 [4]
            
                 For            = CFWS "FOR" FWS ( Path / Mailbox )
                 
                 Additional-Registered-Clauses  = CFWS Atom FWS String
            
                 Link           = "TCP" / Addtl-Link
            
                 Addtl-Link     = Atom
                 
                 Protocol       = "ESMTP" / "SMTP" / Attdl-Protocol
                 
                 Mailbox        = Local-part "@" ( Domain / address-literal )
             </code>
             </remarks>
        </member>
        <member name="M:PX.Common.Mail.HeaderReceived.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Default constructor.
            </summary>
            <param name="from">Host from where message was received.</param>
            <param name="by">Host name what received message.</param>
            <param name="time">Date time when message was received.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>from</b> or <b>by</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.Mail.HeaderReceived.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Sender: john.doe@domain.com'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:PX.Common.Mail.HeaderReceived.ToString(PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:PX.Common.Mail.HeaderReceived.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.HeaderReceived.Name">
            <summary>
            Returns always "Received".
            </summary>
        </member>
        <member name="P:PX.Common.Mail.HeaderReceived.From">
            <summary>
            Gets or sets host from where message was received.
            </summary>
            <remarks>Normally this is just EHLO/HELO host name what client reported to SMTP server.</remarks>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value passed.</exception>
        </member>
        <member name="P:PX.Common.Mail.HeaderReceived.From_TcpInfo">
            <summary>
            Gets or sets From TCP-Info value. Value null means not specified.
            </summary>
            <remarks>This value is message sender host IP and optional dns host name.
            This value is based on server connection info, not client reported info(EHLO/HELO).
            </remarks>
        </member>
        <member name="P:PX.Common.Mail.HeaderReceived.By">
            <summary>
            Gets or sets host name what received message.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value passed.</exception>
        </member>
        <member name="P:PX.Common.Mail.HeaderReceived.By_TcpInfo">
            <summary>
            Gets or sets By TCP-Info value. Value null means not specified.
            </summary>
            <remarks>RFC defines it, but i don't see any point about that value.</remarks>
        </member>
        <member name="P:PX.Common.Mail.HeaderReceived.Via">
            <summary>
            Gets or sets non-internet transport. Value null means not specified.
            </summary>
        </member>
        <member name="P:PX.Common.Mail.HeaderReceived.With">
            <summary>
            Gets or sets receiving protocol. Value null means not specified.
            </summary>
        </member>
        <member name="P:PX.Common.Mail.HeaderReceived.ID">
            <summary>
            Gets or sets ID value. Value null means not specified.
            </summary>
        </member>
        <member name="P:PX.Common.Mail.HeaderReceived.For">
            <summary>
            Gets or sets mailbox for who message was received. Value null means not specified.
            </summary>
        </member>
        <member name="P:PX.Common.Mail.HeaderReceived.Time">
            <summary>
            Gets or sets time when message was received.
            </summary>
        </member>
        <member name="T:PX.Common.Mail.HeaderReturnPath">
            <summary>
            Represents "Return-Path:" header. Defined in RFC 5322 3.6.7.
            </summary>
            <example>
            <code>
            RFC 5322 3.6.7.
                return     = "Return-Path:" path CRLF
                path       = angle-addr / ([CFWS] "&lt;" [CFWS] "&gt;" [CFWS])
                angle-addr = [CFWS] "&lt;" addr-spec "&gt;" [CFWS]
            </code>
            </example>
        </member>
        <member name="M:PX.Common.Mail.HeaderReturnPath.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="address">Address. Value null means null-path.</param>
        </member>
        <member name="M:PX.Common.Mail.HeaderReturnPath.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Return-Path: &lt;jhon.doe@domain.com&gt;'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:PX.Common.Mail.HeaderReturnPath.ToString(PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:PX.Common.Mail.HeaderReturnPath.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.HeaderReturnPath.Name">
            <summary>
            Gets header field name. For example "Sender".
            </summary>
        </member>
        <member name="P:PX.Common.Mail.HeaderReturnPath.Address">
            <summary>
            Gets mailbox address. Value null means null-path.
            </summary>
        </member>
        <member name="T:PX.Common.Mail.IEmailAccessTokenProvider">
            <summary>
            Provides AccessToken depending of ApplicationID of OAuthApplication.
            Validate and refresh tokens before return.
            </summary>
        </member>
        <member name="M:PX.Common.Mail.IEmailAccessTokenProvider.GetAccessToken(System.Int32)">
            <summary>
            Returns cached access token for specified OAuthApplication.
            Refresh it, if it expired.
            </summary>
            <param name="oauthApplicationId">
            ApplicationID of PX.PX.OAuthClient.DAC.OAuthApplication 
            which is linked with PX.SM.EMailAccount.OAuthApplicationID.
            </param>
            <returns>Access token.</returns>
            <remarks>
            If authentication fails with provided AccessToken it is required to call
            <see cref="M:PX.Common.Mail.IEmailAccessTokenProvider.RefreshAccessToken(System.Int32)"/> and try again with new access token.
            </remarks>
        </member>
        <member name="M:PX.Common.Mail.IEmailAccessTokenProvider.RefreshAccessToken(System.Int32)">
            <summary>
            Return refreshed access token for specified OAuthApplication.
            </summary>
            <param name="oauthApplicationId">
            ApplicationID of PX.PX.OAuthClient.DAC.OAuthApplication 
            which is linked with PX.SM.EMailAccount.OAuthApplicationID.
            </param>
            <returns>Access token.</returns>
        </member>
        <member name="T:PX.Common.Mail.Mailbox">
            <summary>
            This class represents "mailbox" address. Defined in RFC 5322 3.4.
            </summary>
            <example>
            <code>
            RFC 5322 3.4.
                mailbox    = name-addr / addr-spec
                name-addr  = [display-name] angle-addr
                angle-addr = [CFWS] "&lt;" addr-spec "&gt;" [CFWS]
                addr-spec  = local-part "@" domain
            </code>
            </example>
        </member>
        <member name="M:PX.Common.Mail.Mailbox.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="displayName">Display name. Value null means not specified.</param>
            <param name="address">Email address.</param>		
        </member>
        <member name="M:PX.Common.Mail.Mailbox.ToString">
            <summary>
            Returns mailbox as string.
            </summary>
            <returns>Returns mailbox as string.</returns>
        </member>
        <member name="M:PX.Common.Mail.Mailbox.ToString(PX.Common.MIME.EncodingEncodedWord)">
            <summary>
            Returns address as string value.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <returns>Returns address as string value.</returns>
        </member>
        <member name="P:PX.Common.Mail.Mailbox.DisplayName">
            <summary>
            Gets display name. Value null means not specified.
            </summary>
        </member>
        <member name="P:PX.Common.Mail.Mailbox.Address">
            <summary>
            Gets address.
            </summary>
        </member>
        <member name="P:PX.Common.Mail.Mailbox.LocalPart">
            <summary>
            Gets local-part of address.
            </summary>
        </member>
        <member name="P:PX.Common.Mail.Mailbox.Domain">
            <summary>
            Gets domain part of address.
            </summary>
        </member>
        <member name="T:PX.Common.Mail.MailboxList">
            <summary>
            This class represents <b>mailbox-list</b>. Defined in RFC 5322 3.4.
            </summary>
            <example>
            <code>
            RFC 5322.
                mailbox-list =  (mailbox *("," mailbox)) / obs-mbox-list
            </code>
            </example>
        </member>
        <member name="M:PX.Common.Mail.MailboxList.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.Mail.MailboxList.Parse(System.String)">
            <summary>
            Parses <b>mailbox-list</b> from specified string value.
            </summary>
            <param name="value">The <b>mailbox-list</b> string value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when <b>value</b> is not valid <b>mailbox-list</b> value.</exception>
        </member>
        <member name="M:PX.Common.Mail.MailboxList.Insert(System.Int32,PX.Common.Mail.Mailbox)">
            <summary>
            Inserts a address into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the item.</param>
            <param name="value">Address to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Mail.MailboxList.Add(PX.Common.Mail.Mailbox)">
            <summary>
            Adds specified address to the end of the collection.
            </summary>
            <param name="value">Address to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference value.</exception>
        </member>
        <member name="M:PX.Common.Mail.MailboxList.Remove(PX.Common.Mail.Mailbox)">
            <summary>
            Removes specified item from the collection.
            </summary>
            <param name="value">Address to remove.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference value.</exception>
        </member>
        <member name="M:PX.Common.Mail.MailboxList.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:PX.Common.Mail.MailboxList.ToArray">
            <summary>
            Copies addresses to new array.
            </summary>
            <returns>Returns addresses array.</returns>
        </member>
        <member name="M:PX.Common.Mail.MailboxList.ToString">
            <summary>
            Returns address-list as string.
            </summary>
            <returns>Returns address-list as string.</returns>
        </member>
        <member name="M:PX.Common.Mail.MailboxList.AcceptChanges">
            <summary>
            Resets IsModified property to false.
            </summary>
        </member>
        <member name="M:PX.Common.Mail.MailboxList.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PX.Common.Mail.MailboxList.IsModified">
            <summary>
            Gets if list has modified since it was loaded.
            </summary>
        </member>
        <member name="P:PX.Common.Mail.MailboxList.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:PX.Common.Mail.MailboxList.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>Returns the element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
        </member>
        <member name="T:PX.Common.Mail.MailSender.DebugMailSender">
            <summary>
            Dumps all attachments to the ~/App_Data/Attachments folder.
            </summary>
        </member>
        <member name="T:PX.Common.Mail.Message">
            <summary>
            This class represent electronic mail message. Defined in RFC 5322.
            </summary>
        </member>
        <member name="M:PX.Common.Mail.Message.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.Mail.Message.ParseFromByte(System.Byte[])">
            <summary>
            Parses mail message from the specified byte array.
            </summary>
            <param name="data">Mail message data.</param>
            <returns>Returns parsed mail message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Mail.Message.ParseFromByte(System.Byte[],System.Text.Encoding)">
            <summary>
            Parses mail message from the specified byte array.
            </summary>
            <param name="data">Mail message data.</param>
            <param name="headerEncoding">Header reading encoding. If not sure UTF-8 is recommended.</param>
            <returns>Returns parsed mail message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> or <b>headerEncoding</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Mail.Message.ParseFromFile(System.String)">
            <summary>
            Parses mail message from the specified file.
            </summary>
            <param name="file">File name with path from where to parse mail message.</param>
            <returns>Returns parsed mail message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.Mail.Message.ParseFromFile(System.String,System.Text.Encoding)">
            <summary>
            Parses mail message from the specified file.
            </summary>
            <param name="file">File name with path from where to parse mail message.</param>
            <param name="headerEncoding">Header reading encoding. If not sure UTF-8 is recommended.</param>
            <returns>Returns parsed mail message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> or <b>headerEncoding</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.Mail.Message.ParseFromStream(System.IO.Stream)">
            <summary>
            Parses mail message from the specified stream.
            </summary>
            <param name="stream">Stream from where to parse mail message. Parsing starts from current stream position.</param>
            <returns>Returns parsed mail message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:PX.Common.Mail.Message.ParseFromStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Parses mail message from the specified stream.
            </summary>
            <param name="stream">Stream from where to parse mail message. Parsing starts from current stream position.</param>
            <param name="headerEncoding">Header reading encoding. If not sure UTF-8 is recommended.</param>
            <returns>Returns parsed mail message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>headerEncoding</b> is null.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.Date">
            <summary>
            Gets or sets message date and time. Value <b>DateTime.MinValue</b> means not specified.
            </summary>
            <remarks>Specifies the date and time at which the creator of the message indicated that the 
            message was complete and ready to enter the mail delivery system.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.From">
            <summary>
            Gets or sets message author(s). Value null means not specified.
            </summary>
            <remarks>Specifies the author(s) of the message; that is, the mailbox(es) of the person(s) or 
            system(s) responsible for the writing of the message.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.Sender">
            <summary>
            Gets or sets message sender. Value null means not specified.
            </summary>
            <remarks>Specifies the mailbox of the agent responsible for the actual transmission of the message.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.ReplyTo">
            <summary>
            Gets or sets mailbox for replies to message. Value null means not specified.
            </summary>
            <remarks>When the "Reply-To:" field is present, it indicates the mailbox(es) to which the author of 
            the message suggests that replies be sent.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.To">
            <summary>
            Gets or sets message primary recipient(s). Value null means not specified.
            </summary>
            <remarks>Contains the address(es) of the primary recipient(s) of the message.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.Cc">
            <summary>
            Gets or sets carbon-copy recipient mailbox. Value null means not specified.
            </summary>
            <remarks>Contains the addresses of others who are to receive the message, though the content of the message may not be directed at them.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.Bcc">
            <summary>
            Gets or sets blind-carbon-copy recipient mailbox. Value null means not specified.
            </summary>
            <remarks>Contains addresses of recipients of the message whose addresses are not to be revealed to other recipients of the message.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.MessageID">
            <summary>
            Gets or sets message identifier. Value null means not specified.
            </summary>
            <remarks>Contains a single unique message identifier that refers to a particular version of a particular message. 
            If the message is resent without changes, the original Message-ID is retained.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.IsFailed">
            <summary>
            Gets or sets message identifier. Value null means not specified.
            </summary>
            <remarks>Contains a single unique message identifier that refers to a particular version of a particular message. 
            If the message is resent without changes, the original Message-ID is retained.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.InReplyTo">
            <summary>
            Gets or sets identify replied-to message(s). Value null means not specified.
            </summary>
            <remarks>The message identifier(s) of the original message(s) to which the current message is a reply.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.References">
            <summary>
            Gets or sets related message identifier(s). Value null means not specified.
            </summary>
            <remarks>The message identifier(s) of other message(s) to which the current message may be related. 
            In RFC 2822, the definition was changed to say that this header field contains a list of all Message-IDs
            of messages in the preceding reply chain.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.Subject">
            <summary>
            Gets or sets topic of message. Value null means not specified.
            </summary>
            <remarks>Contains a short string identifying the topic of the message.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.Comments">
            <summary>
            Gets or sets additional comments about the message. Value null means not specified.
            </summary>
            <remarks>Contains any additional comments on the text of the body of the message. 
            Warning: Some mailers will not show this field to recipients.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.Keywords">
            <summary>
            Gets or sets message key words and/or phrases. Value null means not specified.
            </summary>
            <remarks>Contains a comma-separated list of important words and phrases that might be useful for the recipient.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.ResentDate">
            <summary>
            Gets or sets date and time message is resent. Value <b>DateTime.MinValue</b> means not specified.
            </summary>
            <remarks>Contains the date and time that a message is reintroduced into the message transfer system.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.ResentFrom">
            <summary>
            Gets or sets mailbox of person for whom message is resent. Value null means not specified.
            </summary>
            <remarks>Contains the mailbox of the agent who has reintroduced the message into 
            the message transfer system, or on whose behalf the message has been resent.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.ResentSender">
            <summary>
            Gets or sets mailbox of person who actually resends the message. Value null means not specified.
            </summary>
            <remarks>Contains the mailbox of the agent who has reintroduced the message into 
            the message transfer system, if this is different from the Resent-From value.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.ResentTo">
            <summary>
            Gets or sets mailbox to which message is resent. Value null means not specified.
            </summary>
            <remarks>Contains the mailbox(es) to which the message has been resent.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.ResentCc">
            <summary>
            Gets or sets mailbox(es) to which message is cc'ed on resend. Value null means not specified.
            </summary>
            <remarks>Contains the mailbox(es) to which message is cc'ed on resend.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.ResentBcc">
            <summary>
            Gets or sets mailbox(es) to which message is bcc'ed on resend. Value null means not specified.
            </summary>
            <remarks>Contains the mailbox(es) to which message is bcc'ed on resend.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.ResentReplyTo">
            <summary>
            Gets or sets resent reply-to. Value null means not specified.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.ResentMessageID">
            <summary>
            Gets or sets message identifier for resent message. Value null means not specified.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.ReturnPath">
            <summary>
            Gets or sets message return path. Value null means not specified.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.Received">
            <summary>
            Gets mail transfer trace information. Value null means not specified.
            </summary>
            <remarks>Contains information about receipt of the current message by a mail transfer agent on the transfer path.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.DispositionNotificationTo">
            <summary>
            Gets or sets mailboxes where to send disposition notification message. Value null means not specified.
            </summary>
            <remarks>Indicates that the sender wants a disposition notification when this message 
            is received (read, processed, etc.) by its recipients.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.DispositionNotificationOptions">
            <summary>
            Gets or sets disposition notification options. Value null means not specified.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.AcceptLanguage">
            <summary>
            Gets or sets language that the message sender requests to be used for responses. Value null means not specified.
            </summary>
            <remarks>
            Indicates a language that the message sender requests to be used for responses.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.OriginalMessageID">
            <summary>
            Gets or sets original message identifier. Value null means not specified.
            </summary>
            <remarks>Original message identifier used with resend of message with alternative content format; 
            identifies the original message data to which it corresponds.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.PICSLabel">
            <summary>
            Gets or sets PICS rating label. Value null means not specified.
            </summary>
            <remarks>Ratings label to control selection (filtering) of messages according to the PICS protocol.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.ListArchive">
            <summary>
            Gets or sets URL of mailing list archive. Value null means not specified.
            </summary>
            <remarks>Contains the URL to use to browse the archives of the mailing list from which this message was relayed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.ListHelp">
            <summary>
            Gets or sets URL for mailing list information. Value null means not specified.
            </summary>
            <remarks>Contains the URL to use to get information about the mailing list from which this message was relayed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.ListID">
            <summary>
            Gets or sets mailing list identifier. Value null means not specified.
            </summary>
            <remarks>Stores an identification of the mailing list through which this message was distributed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.ListOwner">
            <summary>
            Gets or sets URL for mailing list owner's mailbox. Value null means not specified.
            </summary>
            <remarks>Contains the URL to send e-mail to the owner of the mailing list from which this message was relayed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.ListPost">
            <summary>
            Gets or sets URL for mailing list posting. Value null means not specified.
            </summary>
            <remarks>Contains the URL to use to send contributions to the mailing list from which this message was relayed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.ListSubscribe">
            <summary>
            Gets or sets URL for mailing list subscription. Value null means not specified.
            </summary>
            <remarks>Contains the URL to use to get a subscription to the mailing list from which this message was relayed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.ListUnsubscribe">
            <summary>
            Gets or sets URL for mailing list unsubscription. Value null means not specified.
            </summary>
            <remarks>Contains the URL to use to unsubscribe the mailing list from which this message was relayed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.MessageContext">
            <summary>
            Gets or sets type or context of message. Value null means not specified.
            </summary>
            <remarks>Provides information about the context and presentation characteristics of a message. 
            Can have the values 'voice-message', 'fax-message', 'pager-message', 'multimedia-message', 'text-message', or 'none'.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.Importance">
            <summary>
            Gets or sets message importance. Value null means not specified.
            </summary>
            <remarks>A hint from the originator to the recipients about how important a message is. 
            Values: High, normal, or low.  Not used to control transmission speed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.Priority">
            <summary>
            Gets or sets message priority. Value null means not specified.
            </summary>
            <remarks>Can be 'normal', 'urgent', or 'non-urgent' and can influence transmission speed and delivery.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.Attachments">
            <summary>
            Gets this message attachments.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.BodyText">
            <summary>
            Gets message body text. Returns null if no body text available.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.Mail.Message.BodyHtmlText">
            <summary>
            Gets message body html text. Returns null if no body html text available.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:PX.Common.Mail.TcpInfo">
            <summary>
            Represents Received: header "TCP-info" value. Defined in RFC 5321. 4.4.
            </summary>
            <remarks>
            <code>
            RFC 5321 4.4.
                TCP-info        = address-literal / ( Domain FWS address-literal )
                address-literal = "[" ( IPv4-address-literal / IPv6-address-literal / General-address-literal ) "]"
            </code>
            </remarks>
        </member>
        <member name="M:PX.Common.Mail.TcpInfo.#ctor(System.Net.IPAddress,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="ip">IP address.</param>
            <param name="hostName">Host name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Mail.TcpInfo.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:PX.Common.Mail.TcpInfo.IP">
            <summary>
            Gets IP address.
            </summary>
        </member>
        <member name="P:PX.Common.Mail.TcpInfo.HostName">
            <summary>
            Gets host value. Value null means not specified.
            </summary>
        </member>
        <member name="T:PX.Common.Mail.Utils">
            <summary>
            This class provides mail message related utility methods.
            </summary>
        </member>
        <member name="M:PX.Common.Mail.Utils.SMTP_Mailbox(PX.Common.MIME.MimeReader)">
            <summary>
            Reads SMTP "Mailbox" from the specified MIME reader.
            </summary>
            <param name="mimeReader">MIME reader.</param>
            <returns>Returns SMTP "Mailbox" or null if no SMTP mailbox available.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>reader</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Mask.Format(System.String,System.String)">
            <summary>
            Format text using the specified mask string. 
            </summary>
        </member>
        <member name="M:PX.Common.Mask.Format(System.String,System.String,System.Char)">
            <summary>
            Format text using the specified mask string. 
            </summary>
        </member>
        <member name="M:PX.Common.Mask.Split(System.String,System.String@)">
            <summary>
            Split the specified mask string
            </summary>
        </member>
        <member name="M:PX.Common.Mask.Format(System.Text.StringBuilder,System.String,System.Char)">
            <summary>
            Format text using the specified mask string. 
            </summary>
        </member>
        <member name="M:PX.Common.Mask.EncodeMask(System.String)">
            <summary>
            Encode the specified mask string. 
            </summary>
        </member>
        <member name="M:PX.Common.Mask.Flag(System.Int32,System.Int32)">
            <summary>
            Returns the encoded mask flag from specified char.
            </summary>
        </member>
        <member name="M:PX.Common.Mask.FilterChar(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Filter str[i] character by specified mask flag.
            </summary>
        </member>
        <member name="M:PX.Common.Mask.IsMasked(System.String,System.String,System.Boolean)">
            <summary>
            Checks, whether text is masked by specified mask.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.Body">
            <summary>
            This class is base class for MIME entity bodies.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.Body.#ctor(PX.Common.MIME.HeaderContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.MIME.Body.Parse(PX.Common.MIME.Entity,PX.Common.MIME.HeaderContentType,PX.Common.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:PX.Common.MIME.Body.SetParent(PX.Common.MIME.Entity,System.Boolean)">
            <summary>
            Sets body parent.
            </summary>
            <param name="entity">Owner entity.</param>
            <param name="setContentType">If true sets entity.ContentType header value.</param>
        </member>
        <member name="M:PX.Common.MIME.Body.ToStream(System.IO.Stream,PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.MIME.Body.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.Body.Entity">
            <summary>
            Gets body owner entity. Returns null if body not bounded to any entity yet.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.Body.MediaType">
            <summary>
            Gets body media type. For example: 'text/plain'.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.BodyApplication">
            <summary>
            This class represents MIME application/xxx bodies. Defined in RFC 2046 4.2.
            </summary>
            <remarks>
            The "application" media type is to be used for discrete data which do
            not fit in any of the other categories, and particularly for data to
            be processed by some type of application program.
            </remarks>
        </member>
        <member name="M:PX.Common.MIME.BodyApplication.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyApplication.Parse(PX.Common.MIME.Entity,PX.Common.MIME.HeaderContentType,PX.Common.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>strean</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:PX.Common.MIME.BodyApplicationPkcs7Mime">
            <summary>
            This class represents MIME application/pkcs7-mime body. Defined in RFC 5751 3.2.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.BodyApplicationPkcs7Mime.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.BodyApplicationPkcs7Mime.Parse(PX.Common.MIME.Entity,PX.Common.MIME.HeaderContentType,PX.Common.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>strean</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyApplicationPkcs7Mime.GetCertificates">
            <summary>
            Gets certificates contained in pkcs 7.
            </summary>
            <returns>Returns certificates contained in pkcs 7. Returns null if no certificates.</returns>
        </member>
        <member name="M:PX.Common.MIME.BodyApplicationPkcs7Mime.VerifySignature">
            <summary>
            Checks if signature is valid and data not altered.
            </summary>
            <returns>Returns true if signature is valid, otherwise false.</returns>
            <remarks>This method is valid only if <b>Content-Type</b> parameter <b>smime-type=signed-data</b>.</remarks>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>smime-type != signed-data</b>.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyApplicationPkcs7Mime.GetSignedMime">
            <summary>
            Gets signed mime content. Value null means no content.
            </summary>
            <returns>Returns signed mime content. Value null means no content.</returns>
            <remarks>This method is valid only if <b>Content-Type</b> parameter <b>smime-type=signed-data</b>.</remarks>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>smime-type != signed-data</b>.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyApplicationPkcs7Mime.GetEnvelopedMime(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Decrypts enveloped mime content.
            </summary>
            <param name="cert">Decrypting certificate.</param>
            <returns>Returns decrypted enveloped mime content.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>cert</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>smime-type != enveloped-data</b>.</exception>
        </member>
        <member name="T:PX.Common.MIME.BodyAudio">
            <summary>
            This class represents MIME audio/xxx bodies. Defined in RFC 2046 4.3.
            </summary>
            <remarks>A media type of "audio" indicates that the body contains audio data.</remarks>
        </member>
        <member name="M:PX.Common.MIME.BodyAudio.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyAudio.Parse(PX.Common.MIME.Entity,PX.Common.MIME.HeaderContentType,PX.Common.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:PX.Common.MIME.BodyImage">
            <summary>
            This class represents MIME image/xxx bodies. Defined in RFC 2046 4.2.
            </summary>
            <remarks>
            A media type of "image" indicates that the body contains an image.
            The subtype names the specific image format.
            </remarks>
        </member>
        <member name="M:PX.Common.MIME.BodyImage.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyImage.Parse(PX.Common.MIME.Entity,PX.Common.MIME.HeaderContentType,PX.Common.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:PX.Common.MIME.BodyMessage">
            <summary>
            This class represents MIME message/xxx bodies. Defined in RFC 2046 5.2.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.BodyMessage.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyMessage.Parse(PX.Common.MIME.Entity,PX.Common.MIME.HeaderContentType,PX.Common.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:PX.Common.MIME.BodyMessageDeliveryStatus">
            <summary>
            This class represents MIME <b>message/delivery-status</b> body. Defined in RFC 3464.
            </summary>
            <remarks>
            <code>
            delivery-status-content =  per-message-fields 1*( CRLF per-recipient-fields )
            
            per-message-fields =
                       [ original-envelope-id-field CRLF ]
                       reporting-mta-field CRLF
                       [ dsn-gateway-field CRLF ]
                       [ received-from-mta-field CRLF ]
                       [ arrival-date-field CRLF ]
                       *( extension-field CRLF )
                       
            per-recipient-fields =
                     [ original-recipient-field CRLF ]
                     final-recipient-field CRLF
                     action-field CRLF
                     status-field CRLF
                     [ remote-mta-field CRLF ]
                     [ diagnostic-code-field CRLF ]
                     [ last-attempt-date-field CRLF ]
                     [ final-log-id-field CRLF ]
                     [ will-retry-until-field CRLF ]
                    *( extension-field CRLF )
            </code>
            </remarks>
        </member>
        <member name="M:PX.Common.MIME.BodyMessageDeliveryStatus.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.BodyMessageDeliveryStatus.Parse(PX.Common.MIME.Entity,PX.Common.MIME.HeaderContentType,PX.Common.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyMessageDeliveryStatus.ToStream(System.IO.Stream,PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.MIME.BodyMessageDeliveryStatus.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.BodyMessageDeliveryStatus.MessageFields">
            <summary>
            Gets per-message fields collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="P:PX.Common.MIME.BodyMessageDeliveryStatus.RecipientBlocks">
            <summary>
            Gets reciepent report blocks collection.
            </summary>
            <remarks>Each block contains per-recipient-fields.</remarks>
        </member>
        <member name="T:PX.Common.MIME.BodyMessageRfc822">
            <summary>
            This class represents MIME message/rfc822 body. Defined in RFC 2046 5.2.1.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.BodyMessageRfc822.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.BodyMessageRfc822.Parse(PX.Common.MIME.Entity,PX.Common.MIME.HeaderContentType,PX.Common.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyMessageRfc822.ToStream(System.IO.Stream,PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.MIME.BodyMessageRfc822.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.BodyMessageRfc822.Message">
            <summary>
            Gets embbed mail message.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="T:PX.Common.MIME.BodyMultipart">
            <summary>
            This class represents MIME application/xxx bodies. Defined in RFC 2046 5.1.
            </summary>
            <remarks>
            The "multipart" represents single MIME body containing multiple child MIME entities.
            The "multipart" body must contain at least 1 MIME entity.
            </remarks>
        </member>
        <member name="T:PX.Common.MIME.BodyMultipart._MultipartReader">
            <summary>
            Implements  multipart "body parts" reader.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.BodyMultipart._MultipartReader.State">
            <summary>
            This enum specified multipart reader sate.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.BodyMultipart._MultipartReader.State.SeekFirst">
            <summary>
            First boundary must be seeked.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.BodyMultipart._MultipartReader.State.ReadNext">
            <summary>
            Read next boundary. (Method Next must be called to continue next boundary reading)
            </summary>
        </member>
        <member name="F:PX.Common.MIME.BodyMultipart._MultipartReader.State.InBoundary">
            <summary>
            Active boundary reading pending.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.BodyMultipart._MultipartReader.State.Done">
            <summary>
            All boundraies readed.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.BodyMultipart._MultipartReader._DataLine">
            <summary>
            This class holds readed data line info.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipart._MultipartReader._DataLine.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipart._MultipartReader._DataLine.AssignFrom(PX.Common.IO.SmartStream.ReadLineAsyncOP)">
            <summary>
            Assigns data line info from rea line operation.
            </summary>
            <param name="op">Read line operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.MIME.BodyMultipart._MultipartReader._DataLine.LineBuffer">
            <summary>
            Gets line data buffer.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.BodyMultipart._MultipartReader._DataLine.BytesInBuffer">
            <summary>
            Gets number of bytes used in <b>LineBuffer</b>.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipart._MultipartReader.#ctor(PX.Common.IO.SmartStream,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream from where to read body part.</param>
            <param name="boundary">Boundry ID what separates body parts.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>boundary</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipart._MultipartReader.Next">
            <summary>
            Moves to next "body part". Returns true if moved to next "body part" or false if there are no more parts.
            </summary>
            <returns>Returns true if moved to next "body part" or false if there are no more body parts.</returns>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipart._MultipartReader.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipart._MultipartReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipart._MultipartReader.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="M:PX.Common.MIME.BodyMultipart._MultipartReader.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipart._MultipartReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipart._MultipartReader.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="P:PX.Common.MIME.BodyMultipart._MultipartReader.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.BodyMultipart._MultipartReader.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.BodyMultipart._MultipartReader.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.BodyMultipart._MultipartReader.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.MIME.BodyMultipart._MultipartReader.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.MIME.BodyMultipart._MultipartReader.TextPreamble">
            <summary>
            Gets "preamble" text. Defined in RFC 2046 5.1.1.
            </summary>
            <remarks>Preamble text is text between MIME entiy headers and first boundary.</remarks>
        </member>
        <member name="P:PX.Common.MIME.BodyMultipart._MultipartReader.TextEpilogue">
            <summary>
            Gets "epilogue" text. Defined in RFC 2046 5.1.1.
            </summary>
            <remarks>Epilogue text is text after last boundary end.</remarks>
        </member>
        <member name="P:PX.Common.MIME.BodyMultipart._MultipartReader.ReaderState">
            <summary>
            Gets reader state.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipart.#ctor(PX.Common.MIME.HeaderContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipart.Parse(PX.Common.MIME.Entity,PX.Common.MIME.HeaderContentType,PX.Common.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipart.ParseInternal(PX.Common.MIME.Entity,System.String,PX.Common.IO.SmartStream,PX.Common.MIME.BodyMultipart)">
            <summary>
            Internal body parsing.
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="mediaType">MIME media type. For example: text/plain.</param>
            <param name="stream">Stream from where to read body.</param>
            <param name="body">Multipart body instance.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>mediaType</b>, <b>stream</b> or <b>body</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipart.SetParent(PX.Common.MIME.Entity,System.Boolean)">
            <summary>
            Sets body parent.
            </summary>
            <param name="entity">Owner entity.</param>
            <param name="setContentType">If true sets entity.ContentType header value.</param>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipart.ToStream(System.IO.Stream,PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.MIME.BodyMultipart.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.BodyMultipart.DefaultBodyPartContentType">
            <summary>
            Gets default body part Content-Type. For more info see RFC 2046 5.1.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.BodyMultipart.BodyParts">
            <summary>
            Gets multipart body body-parts collection.
            </summary>
            <remarks>Multipart entity child entities are called "body parts" in RFC 2045.</remarks>
        </member>
        <member name="P:PX.Common.MIME.BodyMultipart.TextPreamble">
            <summary>
            Gets or sets "preamble" text. Defined in RFC 2046 5.1.1.
            </summary>
            <remarks>Preamble text is text between MIME entiy headers and first boundary.</remarks>
        </member>
        <member name="P:PX.Common.MIME.BodyMultipart.TextEpilogue">
            <summary>
            Gets or sets "epilogue" text. Defined in RFC 2046 5.1.1.
            </summary>
            <remarks>Epilogue text is text after last boundary end.</remarks>
        </member>
        <member name="T:PX.Common.MIME.BodyMultipartAlternative">
            <summary>
            This class represents MIME multipart/alternative body. Defined in RFC 2046 5.1.4.
            </summary>
            <remarks>
            The "multipart/alternative" is intended for use when each of the body parts is an "alternative" version of the same information.
            In general, user agents that compose "multipart/alternative" entities
            must place the body parts in increasing order of preference, that is,
            with the preferred format last.
            </remarks>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipartAlternative.#ctor(PX.Common.MIME.HeaderContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipartAlternative.Parse(PX.Common.MIME.Entity,PX.Common.MIME.HeaderContentType,PX.Common.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:PX.Common.MIME.BodyMultipartDigest">
            <summary>
            This class represents MIME multipart/digest body. Defined in RFC 2046 5.1.5.
            </summary>
            <remarks>
            The "multipart/digest" Content-Type is intended to be used to send collections of messages.
            </remarks>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipartDigest.#ctor(PX.Common.MIME.HeaderContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipartDigest.Parse(PX.Common.MIME.Entity,PX.Common.MIME.HeaderContentType,PX.Common.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="P:PX.Common.MIME.BodyMultipartDigest.DefaultBodyPartContentType">
            <summary>
            Gets default body part Content-Type. For more info see RFC 2046 5.1.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.BodyMultipartEncrypted">
            <summary>
            This class represents MIME multipart/encrypted body. Defined in rfc 1847.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipartEncrypted.#ctor(PX.Common.MIME.HeaderContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipartEncrypted.Parse(PX.Common.MIME.Entity,PX.Common.MIME.HeaderContentType,PX.Common.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:PX.Common.MIME.BodyMultipartFormData">
            <summary>
            This class represents MIME multipart/form-data body. Defined in RFC 2046.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipartFormData.#ctor(PX.Common.MIME.HeaderContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipartFormData.Parse(PX.Common.MIME.Entity,PX.Common.MIME.HeaderContentType,PX.Common.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:PX.Common.MIME.BodyMultipartMixed">
            <summary>
            This class represents MIME multipart/mixed body. Defined in RFC 2046 5.1.3.
            </summary>
            <remarks>
            The "mixed" subtype of "multipart" is intended for use when the body
            parts are independent and need to be bundled in a particular order.
            </remarks>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipartMixed.#ctor(PX.Common.MIME.HeaderContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipartMixed.Parse(PX.Common.MIME.Entity,PX.Common.MIME.HeaderContentType,PX.Common.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:PX.Common.MIME.BodyMultipartParallel">
            <summary>
            This class represents MIME multipart/parallel bodies.  Defined in RFC 2046 5.1.6.
            </summary>
            <remarks>
            The "parallel" subtype of "multipart" is intended for use when the body
            parts are independent and their order is not important. Parts can be processed parallel.
            </remarks>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipartParallel.#ctor(PX.Common.MIME.HeaderContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipartParallel.Parse(PX.Common.MIME.Entity,PX.Common.MIME.HeaderContentType,PX.Common.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:PX.Common.MIME.BodyMultipartRelated">
            <summary>
            This class represents MIME multipart/related body. Defined in RFC 2387.
            </summary>
            <remarks>
             The Multipart/Related content-type provides a common mechanism for
             representing objects that are aggregates of related MIME body parts.
            </remarks>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipartRelated.#ctor(PX.Common.MIME.HeaderContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipartRelated.Parse(PX.Common.MIME.Entity,PX.Common.MIME.HeaderContentType,PX.Common.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:PX.Common.MIME.BodyMultipartReport">
            <summary>
            This class represents MIME multipart/report body. Defined in RFC 3462.
            </summary>
            <remarks>
            The Multipart/Report Multipurpose Internet Mail Extensions (MIME) content-type is a general "family" or 
            "container" type for electronic mail reports of any kind. The most used type is <b>delivery-status</b>.
            </remarks>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipartReport.#ctor(PX.Common.MIME.HeaderContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipartReport.Parse(PX.Common.MIME.Entity,PX.Common.MIME.HeaderContentType,PX.Common.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:PX.Common.MIME.BodyMultipartSigned">
            <summary>
            This class represents MIME multipart/signed body. Defined in RFC 5751.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipartSigned.#ctor(PX.Common.MIME.HeaderContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyMultipartSigned.Parse(PX.Common.MIME.Entity,PX.Common.MIME.HeaderContentType,PX.Common.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>mediaTypedefaultContentTypeb></b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:PX.Common.MIME.BodyProvider">
            <summary>
            This class represent MIME entity body provider.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.BodyProvider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.BodyProvider.Parse(PX.Common.MIME.Entity,PX.Common.IO.SmartStream,PX.Common.MIME.HeaderContentType)">
            <summary>
            Parses MIME entity body from specified stream.
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="stream">Stream from where to parse entity body.</param>
            <param name="defaultContentType">Default content type.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b>, <b>strean</b> or <b>defaultContentType</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="T:PX.Common.MIME.BodySinglepartBase">
            <summary>
            This class is base class for singlepart media bodies like: text,video,audio,image.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.BodySinglepartBase.#ctor(PX.Common.MIME.HeaderContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodySinglepartBase.Finalize">
            <summary>
            Destructor - Just incase user won't call dispose.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.BodySinglepartBase.SetParent(PX.Common.MIME.Entity,System.Boolean)">
            <summary>
            Sets body parent.
            </summary>
            <param name="entity">Owner entity.</param>
            <param name="setContentType">If true sets entity.ContentType header value.</param>
        </member>
        <member name="M:PX.Common.MIME.BodySinglepartBase.ToStream(System.IO.Stream,PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodySinglepartBase.SetModified(System.Boolean)">
            <summary>
            Sets IsModified property value.
            </summary>
            <param name="isModified">Modified flag.</param>
        </member>
        <member name="M:PX.Common.MIME.BodySinglepartBase.GetEncodedDataStream">
            <summary>
            Gets body encoded data stream.
            </summary>
            <returns>Returns body encoded data stream.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodySinglepartBase.SetEncodedData(System.String,System.IO.Stream)">
            <summary>
            Sets body encoded data from specified stream.
            </summary>
            <param name="contentTransferEncoding">Content-Transfer-Encoding in what encoding <b>stream</b> data is.</param>
            <param name="stream">Stream data to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentTransferEncoding</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the argumennts has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodySinglepartBase.GetDataStream">
            <summary>
            Gets body decoded data stream.
            </summary>
            <returns>Returns body decoded data stream.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when body contains not supported Content-Transfer-Encoding.</exception>
            <remarks>The returned stream should be closed/disposed as soon as it's not needed any more.</remarks>
        </member>
        <member name="M:PX.Common.MIME.BodySinglepartBase.SetData(System.IO.Stream,System.String)">
            <summary>
            Sets body data from the specified stream.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="transferEncoding">Specifies content-transfer-encoding to use to encode data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>transferEncoding</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodySinglepartBase.SetDataFromFile(System.String,System.String)">
            <summary>
            Sets body data from the specified file.
            </summary>
            <param name="file">File name with optional path.</param>
            <param name="transferEncoding">Specifies content-transfer-encoding to use to encode data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="P:PX.Common.MIME.BodySinglepartBase.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.BodySinglepartBase.EncodedDataSize">
            <summary>
            Gets encoded body data size in bytes.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.BodySinglepartBase.EncodedData">
            <summary>
            Gets body encoded data. 
            </summary>
            <remarks>NOTE: Use this property with care, because body data may be very big and you may run out of memory.
            For bigger data use <see cref="M:PX.Common.MIME.BodySinglepartBase.GetEncodedDataStream"/> method instead.</remarks>
        </member>
        <member name="P:PX.Common.MIME.BodySinglepartBase.Data">
            <summary>
            Gets body decoded data.
            </summary>
            <remarks>NOTE: Use this property with care, because body data may be very big and you may run out of memory.
            For bigger data use <see cref="M:PX.Common.MIME.BodySinglepartBase.GetDataStream"/> method instead.</remarks>
            <exception cref="T:System.NotSupportedException">Is raised when body contains not supported Content-Transfer-Encoding.</exception>
        </member>
        <member name="P:PX.Common.MIME.BodySinglepartBase.EncodedStream">
            <summary>
            Gets encoded data stream.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.BodyText">
            <summary>
            This class represents MIME text/xxx bodies. Defined in RFC 2045.
            </summary>
            <remarks>
            The "text" media type is intended for sending material which is principally textual in form.
            </remarks>
        </member>
        <member name="M:PX.Common.MIME.BodyText.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaSubType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyText.Parse(PX.Common.MIME.Entity,PX.Common.MIME.HeaderContentType,PX.Common.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>mediaType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyText.SetText(System.String,System.Text.Encoding,System.String)">
            <summary>
            Sets text.
            </summary>
            <param name="transferEncoding">Content transfer encoding.</param>
            <param name="charset">Charset to use to encode text. If not sure, utf-8 is recommended.</param>
            <param name="text">Text.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>transferEncoding</b>, <b>charset</b> or <b>text</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when body contains not supported Content-Transfer-Encoding.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyText.GetCharset">
            <summary>
            Gets charset from Content-Type. If char set isn't specified, "ascii" is defined as default and it will be returned.
            </summary>
            <returns>Returns content charset.</returns>
            <exception cref="T:System.ArgumentException">Is raised when Content-Type has not supported charset parameter value.</exception>
        </member>
        <member name="P:PX.Common.MIME.BodyText.Text">
            <summary>
            Gets body decoded text.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when not supported content-type charset or not supported content-transfer-encoding value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when body contains not supported Content-Transfer-Encoding.</exception>
        </member>
        <member name="T:PX.Common.MIME.BodyUnknown">
            <summary>
            This class represents MIME unknown bodies.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.BodyUnknown.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyUnknown.Parse(PX.Common.MIME.Entity,PX.Common.MIME.HeaderContentType,PX.Common.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>strean</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:PX.Common.MIME.BodyVideo">
            <summary>
            This class represents MIME video/xxx bodies. Defined in RFC 2046 4.4.
            </summary>
            <remarks>
            A media type of "video" indicates that the body contains a time-
            varying-picture image, possibly with color and coordinated sound.
            </remarks>
        </member>
        <member name="M:PX.Common.MIME.BodyVideo.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.BodyVideo.Parse(PX.Common.MIME.Entity,PX.Common.MIME.HeaderContentType,PX.Common.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>mediaType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:PX.Common.MIME.DispositionTypes">
            <summary>
            This class holds MIME content disposition types. Defined in RFC 2183.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.DispositionTypes.Inline">
            <summary>
            A bodypart should be marked `inline' if it is intended to be displayed automatically upon display of the message. 
            Inline bodyparts should be presented in the order in which they occur, subject to the normal semantics of multipart messages.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.DispositionTypes.Attachment">
            <summary>
            Bodyparts can be designated `attachment' to indicate that they are separate from the main body of the mail message, 
            and that their display should not be automatic, but contingent upon some further action of the user.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.EncodedWordEncoding">
            <summary>
            This enum specifies MIME RFC 2047 'encoded-word' encoding method.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.EncodedWordEncoding.Q">
            <summary>
            The "B" encoding. Defined in RFC 2047 (section 4.1).
            </summary>
        </member>
        <member name="F:PX.Common.MIME.EncodedWordEncoding.B">
            <summary>
            The "Q" encoding. Defined in RFC 2047 (section 4.2).
            </summary>
        </member>
        <member name="T:PX.Common.MIME.EncodingEncodedWord">
            <summary>
            Implements 'encoded-word' encoding. Defined in RFC 2047.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.EncodingEncodedWord.#ctor(PX.Common.MIME.EncodedWordEncoding,System.Text.Encoding)">
            <summary>
            Default constructor.
            </summary>
            <param name="encoding">Encoding to use to encode text.</param>
            <param name="charset">Charset to use for encoding. If not sure UTF-8 is strongly recommended.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>charset</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.EncodingEncodedWord.Encode(System.String)">
            <summary>
            Encodes specified text if it contains 8-bit chars, otherwise text won't be encoded.
            </summary>
            <param name="text">Text to encode.</param>
            <returns>Returns encoded text.</returns>
        </member>
        <member name="M:PX.Common.MIME.EncodingEncodedWord.Decode(System.String)">
            <summary>
            Decodes specified encoded-word.
            </summary>
            <param name="text">Encoded-word value.</param>
            <returns>Returns decoded text.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.EncodingEncodedWord.MustEncode(System.String)">
            <summary>
            Checks if specified text must be encoded.
            </summary>
            <param name="text">Text to encode.</param>
            <returns>Returns true if specified text must be encoded, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.EncodingEncodedWord.EncodeS(PX.Common.MIME.EncodedWordEncoding,System.Text.Encoding,System.Boolean,System.String)">
            <summary>
            Encodes specified text if it contains 8-bit chars, otherwise text won't be encoded.
            </summary>
            <param name="encoding">Encoding to use to encode text.</param>
            <param name="charset">Charset to use for encoding. If not sure UTF-8 is strongly recommended.</param>
            <param name="split">If true, words are splitted after 75 chars.</param>
            <param name="text">Text to encode.</param>
            <returns>Returns encoded text.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>charset</b> or <b>text</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.EncodingEncodedWord.DecodeS(System.String)">
            <summary>
            Decodes non-ascii word with MIME <b>encoded-word</b> method. Defined in RFC 2047 2.
            </summary>
            <param name="word">MIME encoded-word value.</param>
            <returns>Returns decoded word.</returns>
            <remarks>If <b>word</b> is not encoded-word or has invalid syntax, <b>word</b> is leaved as is.</remarks>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>word</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.EncodingEncodedWord.DecodeTextS(System.String)">
            <summary>
            Decodes non-ascii text with MIME <b>encoded-word</b> method. Defined in RFC 2047 2.
            </summary>
            <param name="text">Text.</param>
            <returns>Returns decoded text.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.MIME.EncodingEncodedWord.Split">
            <summary>
            Gets or sets if long words(over 75 char) are splitted.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.Entity">
            <summary>
            Represents a MIME entity. Defined in RFC 2045 2.4.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.Entity.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.Entity.Dispose">
            <summary>
            Cleans up any resources being used. This method is thread-safe.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.Entity.ToFile(System.String,PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding)">
            <summary>
            Stores MIME entity to the specified file.
            </summary>
            <param name="file">File name with path where to store MIME entity.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.MIME.Entity.ToFile(System.String,PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Stores MIME entity to the specified file.
            </summary>
            <param name="file">File name with path where to store MIME entity.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.MIME.Entity.ToStream(System.IO.Stream,PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding)">
            <summary>
            Store MIME enity to the specified stream.
            </summary>
            <param name="stream">Stream where to store MIME entity. Storing starts form stream current position.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:PX.Common.MIME.Entity.ToStream(System.IO.Stream,PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Store MIME enity to the specified stream.
            </summary>
            <param name="stream">Stream where to store MIME entity. Storing starts form stream current position.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:PX.Common.MIME.Entity.ToString">
            <summary>
            Returns MIME entity as string.
            </summary>
            <returns>Returns MIME entity as string.</returns>
        </member>
        <member name="M:PX.Common.MIME.Entity.ToString(PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding)">
            <summary>
            Returns MIME entity as string.
            </summary>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <returns>Returns MIME entity as string.</returns>
        </member>
        <member name="M:PX.Common.MIME.Entity.ToString(PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns MIME entity as string.
            </summary>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <returns>Returns MIME entity as string.</returns>
        </member>
        <member name="M:PX.Common.MIME.Entity.ToByte(PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding)">
            <summary>
            Returns MIME entity as byte[].
            </summary>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <returns>Returns MIME entity as byte[].</returns>
        </member>
        <member name="M:PX.Common.MIME.Entity.ToByte(PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns MIME entity as byte[].
            </summary>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <returns>Returns MIME entity as byte[].</returns>
        </member>
        <member name="M:PX.Common.MIME.Entity.Parse(PX.Common.IO.SmartStream,System.Text.Encoding,PX.Common.MIME.HeaderContentType)">
            <summary>
            Parses MIME entiry from the specified stream.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="headerEncoding">Header reading encoding. If not sure UTF-8 is recommended.</param>
            <param name="defaultContentType">Default content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>,<b>headerEncoding</b> or <b>defaultContentType</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.Entity.SetParent(PX.Common.MIME.Entity)">
            <summary>
            Sets MIME entity parent entity.
            </summary>
            <param name="parent">Parent entity.</param>
        </member>
        <member name="P:PX.Common.MIME.Entity.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.Entity.IsModified">
            <summary>
            Gets if this entity is modified since it has loaded.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.MIME.Entity.Parent">
            <summary>
            Gets the parent entity of this entity, returns null if this is the root entity.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.MIME.Entity.Header">
            <summary>
            Gets MIME entity header field collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.MIME.Entity.MimeVersion">
            <summary>
            Gets or sets MIME version number. Value null means that header field does not exist. Normally this value is 1.0. Defined in RFC 2045 section 4.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>An indicator that this message is formatted according to the MIME
            standard, and an indication of which version of MIME is used.</remarks>
        </member>
        <member name="P:PX.Common.MIME.Entity.ContentID">
            <summary>
            Gets or sets content body part ID. Value null means that header field does not exist. Defined in RFC 2045 7.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Specifies a Unique ID for one MIME body part of the content of a message.</remarks>
        </member>
        <member name="P:PX.Common.MIME.Entity.ContentDescription">
            <summary>
            Gets or sets description of message body part. Value null means that header field does not exist. Defined in RFC 2045 8.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Description of a particular body part of a message; for example, a caption for an image body part.</remarks>
        </member>
        <member name="P:PX.Common.MIME.Entity.ContentTransferEncoding">
            <summary>
            Gets or sets content transfer encoding. Value null means that header field does not exist. 
            RFC defined values are in <see cref="T:PX.Common.MIME.TransferEncodings">TransferEncodings</see>. Defined in RFC 2045 6.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Coding method used in a MIME message body part.</remarks>
        </member>
        <member name="P:PX.Common.MIME.Entity.ContentType">
            <summary>
            Gets or sets MIME content type. Value null means that header field does not exist. Defined in RFC 2045 5.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:PX.Common.MIME.Entity.ContentBase">
            <summary>
            Gets or sets base to be used for resolving relative URIs within this content part. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Base to be used for resolving relative URIs within this content part. See also Content-Location.</remarks>
        </member>
        <member name="P:PX.Common.MIME.Entity.ContentLocation">
            <summary>
            Gets or sets URI for retrieving a body part. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>URI using which the content of this body-part part was retrieved,
            might be retrievable, or which otherwise gives a globally unique identification of the content.</remarks>
        </member>
        <member name="P:PX.Common.MIME.Entity.Contentfeatures">
            <summary>
            Gets or sets content features of a MIME body part. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>The 'Content-features:' header can be used to annotate a MIME body part with a media feature expression, 
            to indicate features of the body part content. See also RFC 2533, RFC 2506, and RFC 2045.</remarks>
        </member>
        <member name="P:PX.Common.MIME.Entity.ContentDisposition">
            <summary>
            Gets or sets content disposition. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Indicates whether a MIME body part is to be shown inline or is an attachment; can also indicate a 
            suggested filename for use when saving an attachment to a file.</remarks>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:PX.Common.MIME.Entity.ContentLanguage">
            <summary>
            Gets or sets language of message content. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Can include a code for the natural language used in a message; e.g., 'en' for English. 
            Can also contain a list of languages for a message containing more than one language.</remarks>
        </member>
        <member name="P:PX.Common.MIME.Entity.ContentAlternative">
            <summary>
            Gets or sets message alternative content. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Information about the media features of alternative content formats available for the current message.</remarks>
        </member>
        <member name="P:PX.Common.MIME.Entity.ContentMD5">
            <summary>
            Gets or sets content MD5 checksum. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Checksum of content to ensure that it has not been modified.</remarks>
        </member>
        <member name="P:PX.Common.MIME.Entity.ContentDuration">
            <summary>
            Gets or sets time duration of content. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Time duration of body part content, in seconds (e.g., for audio message).</remarks>
        </member>
        <member name="P:PX.Common.MIME.Entity.Body">
            <summary>
            Gets or sets MIME entity body.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
        </member>
        <member name="T:PX.Common.MIME.EntityCollection">
            <summary>
            Represents MIME child entity collection in multipart/xxx entity.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.EntityCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.EntityCollection.Add(PX.Common.MIME.Entity)">
            <summary>
            Adds specified MIME enity to the collection.
            </summary>
            <param name="entity">MIME entity.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>entity</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.EntityCollection.Insert(System.Int32,PX.Common.MIME.Entity)">
            <summary>
            Inserts a new MIME entity into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the MIME entity.</param>
            <param name="entity">MIME entity.</param>
            <exception cref="T:System.IndexOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>entity</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.EntityCollection.Remove(PX.Common.MIME.Entity)">
            <summary>
            Removes specified MIME entity from the collection.
            </summary>
            <param name="entity">MIME entity.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.EntityCollection.Remove(System.Int32)">
            <summary>
            Removes MIME entity at the specified index from the collection.
            </summary>
            <param name="index">The index of the MIME entity to remove.</param>
            <exception cref="T:System.IndexOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
        </member>
        <member name="M:PX.Common.MIME.EntityCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.EntityCollection.Contains(PX.Common.MIME.Entity)">
            <summary>
            Gets if the collection contains specified MIME entity.
            </summary>
            <param name="entity">MIME entity.</param>
            <returns>Returns true if the specified MIME entity exists in the collection, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>entity</b> is null.</exception>
        </member>
        <member name="M:PX.Common.MIME.EntityCollection.SetModified(System.Boolean)">
            <summary>
            Sets IsModified property value.
            </summary>
            <param name="isModified">Modified flag.</param>
        </member>
        <member name="M:PX.Common.MIME.EntityCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns>Returns IEnumerator interface.</returns>
        </member>
        <member name="P:PX.Common.MIME.EntityCollection.IsModified">
            <summary>
            Gets if enity collection has modified.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.EntityCollection.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.EntityCollection.Item(System.Int32)">
            <summary>
            Gets MIME entity at the specified index.
            </summary>
            <param name="index">MIME entity zero-based index.</param>
            <returns>Returns MIME entity.</returns>
        </member>
        <member name="T:PX.Common.MIME.Header">
            <summary>
            This is base class for MIME header fields. Defined in RFC 2045 3.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.Header.ToString">
            <summary>
            Returns header field as string.
            </summary>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="M:PX.Common.MIME.Header.ToString(PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.
            If encoding needed, UTF-8 is strongly reccomended if not sure.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="M:PX.Common.MIME.Header.ToString(PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded. 
            If encoding needed, UTF-8 is strongly reccomended if not sure.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="M:PX.Common.MIME.Header.ValueToString">
            <summary>
            Returns header field value as string.
            </summary>
            <returns>Returns header field value as string.</returns>
        </member>
        <member name="M:PX.Common.MIME.Header.ValueToString(PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field value as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.
            If encoding needed, UTF-8 is strongly reccomended if not sure.</param>
            <returns>Returns header field value as string.</returns>
        </member>
        <member name="P:PX.Common.MIME.Header.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.MIME.Header.Name">
            <summary>
            Gets header field name. For example "Content-Type".
            </summary>
        </member>
        <member name="T:PX.Common.MIME.HeaderCollection">
            <summary>
            This class represents MIME header fields collection. Defined in RFC 2045.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.#ctor(PX.Common.MIME.HeaderProvider)">
            <summary>
            Default constructor.
            </summary>
            <param name="provider">Header fields provider.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>provider</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.Insert(System.Int32,PX.Common.MIME.Header)">
            <summary>
            Inserts a new header field into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the item.</param>
            <param name="field">Header field to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.Add(System.String)">
            <summary>
            Parses and adds specified header field to the end of the collection.
            </summary>
            <param name="field">Header field string (Name: value).</param>
            <returns>Retunrs added header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.Add(PX.Common.MIME.Header)">
            <summary>
            Adds specified header field to the end of the collection.
            </summary>
            <param name="field">Header field to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference value.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.Remove(PX.Common.MIME.Header)">
            <summary>
            Removes specified header field from the collection.
            </summary>
            <param name="field">Header field to remove.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference value.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.RemoveAll(System.String)">
            <summary>
            Removes all header fields with the specified name.
            </summary>
            <param name="name">Header field name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.Contains(System.String)">
            <summary>
            Gets if collection has item with the specified name.
            </summary>
            <param name="name">Header field name.</param>
            <returns>Returns true if specified item exists in the collection, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.Contains(PX.Common.MIME.Header)">
            <summary>
            Gets if collection contains the specified item.
            </summary>
            <param name="field">Header field.</param>
            <returns>Returns true if specified item exists in the collection, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.GetFirst(System.String)">
            <summary>
            Gets first header field with the specified name. returns null if specified header field doesn't exist.
            </summary>
            <param name="name">Header field name.</param>
            <returns>Returns first header field with the specified name. returns null if specified header field doesn't exist.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.ReplaceFirst(PX.Common.MIME.Header)">
            <summary>
            Replaces first header field with specified name with specified value.
            </summary>
            <param name="field">Hedaer field.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.ToArray">
            <summary>
            Copies header fields to new array.
            </summary>
            <returns>Returns header fields array.</returns>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.ToFile(System.String,PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding)">
            <summary>
            Stores header to the specified file.
            </summary>
            <param name="fileName">File name with optional path.</param>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>fileName</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.ToByte(PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding)">
            <summary>
            Returns header as byte[] data.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <returns>Returns header as byte[] data.</returns>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.ToStream(System.IO.Stream,PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding)">
            <summary>
            Stores header to the specified stream.
            </summary>
            <param name="stream">Stream where to store header.</param>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.ToStream(System.IO.Stream,PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Stores header to the specified stream.
            </summary>
            <param name="stream">Stream where to store header.</param>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="reEncod">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.ToString">
            <summary>
            Returns MIME header as string.
            </summary>
            <returns>Returns MIME header as string.</returns>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.ToString(PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding)">
            <summary>
            Returns MIME header as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <returns>Returns MIME header as string.</returns>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.ToString(PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns MIME header as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header fields which value not modified, original encoding is kept.</param>
            <returns>Returns MIME header as string.</returns>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.Parse(System.String)">
            <summary>
            Parses MIME header from the specified value.
            </summary>
            <param name="value">MIME header string.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.Parse(PX.Common.IO.SmartStream)">
            <summary>
            Parses MIME header from the specified stream.
            </summary>
            <param name="stream">MIME header stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.Parse(PX.Common.IO.SmartStream,System.Text.Encoding)">
            <summary>
            Parses MIME header from the specified stream.
            </summary>
            <param name="stream">MIME header stream.</param>
            <param name="encoding">Headers fields reading encoding. If not sure, UTF-8 is recommended.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>encoding</b> is null.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PX.Common.MIME.HeaderCollection.IsModified">
            <summary>
            Gets if header has modified since it was loaded.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.HeaderCollection.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.HeaderCollection.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>Returns the element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
        </member>
        <member name="P:PX.Common.MIME.HeaderCollection.Item(System.String)">
            <summary>
            Gets header fields with the specified name.
            </summary>
            <param name="name">Header field name.</param>
            <returns>Returns header fields with the specified name.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.MIME.HeaderCollection.FieldsProvider">
            <summary>
            Gets header fields provider.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.HeaderContentDisposition">
             <summary>
             Represents "Content-Disposition:" header. Defined in RFC 2183.
             </summary>
             <example>
             <code>
             RFC 2183.
                 In the extended BNF notation of [RFC 822], the Content-Disposition
                 header field is defined as follows:
            
                 disposition := "Content-Disposition" ":" disposition-type *(";" disposition-parm)
            
                 disposition-type := "inline" / "attachment" / extension-token
                                     ; values are not case-sensitive
            
                 disposition-parm := filename-parm 
                                     / creation-date-parm
                                     / modification-date-parm
                                     / read-date-parm
                                     / size-parm
                                     / parameter
            
                 filename-parm := "filename" "=" value
            
                 creation-date-parm := "creation-date" "=" quoted-date-time
             
                 modification-date-parm := "modification-date" "=" quoted-date-time
            
                 read-date-parm := "read-date" "=" quoted-date-time
            
                 size-parm := "size" "=" 1*DIGIT
            
                 quoted-date-time := quoted-string
                                     ; contents MUST be an RFC 822 `date-time'
                                     ; numeric timezones (+HHMM or -HHMM) MUST be used
             </code>
             </example>
        </member>
        <member name="M:PX.Common.MIME.HeaderContentDisposition.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="dispositionType">The disposition-type. Known values are in <see cref="T:PX.Common.MIME.DispositionTypes">DispositionTypes</see>.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>dispositionType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderContentDisposition.#ctor">
            <summary>
            Internal parser constructor.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.HeaderContentDisposition.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderContentDisposition.ToString(PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:PX.Common.MIME.HeaderContentDisposition.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.MIME.HeaderContentDisposition.Name">
            <summary>
            Returns always "Content-Disposition".
            </summary>
        </member>
        <member name="P:PX.Common.MIME.HeaderContentDisposition.DispositionType">
            <summary>
            Gets the disposition-type. Known values are in <see cref="T:PX.Common.MIME.DispositionTypes">DispositionTypes</see>.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.HeaderContentDisposition.Parameters">
            <summary>
            Gets Content-Type parameters collection.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.HeaderContentDisposition.Param_FileName">
            <summary>
            Gets or sets the suggested file name. Value DateTime.MinValue means not specified. Defined in RFC 2183 2.3.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.HeaderContentDisposition.Param_CreationDate">
            <summary>
            Gets or sets the creation date for a file. Value DateTime.MinValue means not specified. Defined in RFC 2183 2.4.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.HeaderContentDisposition.Param_ModificationDate">
            <summary>
            Gets or sets the modification date of a file. Value DateTime.MinValue means not specified. Defined in RFC 2183 2.5.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.HeaderContentDisposition.Param_ReadDate">
            <summary>
            Gets or sets the last read date of a file. Value DateTime.MinValue means not specified. Defined in RFC 2183 2.6.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.HeaderContentDisposition.Param_Size">
            <summary>
            Gets or sets the size of a file. Value -1 means not specified. Defined in RFC 2183 2.7.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.HeaderContentType">
             <summary>
             Represents "Content-Type:" header. Defined in RFC 2045 5.1.
             </summary>
             <remarks>
             <code>
             RFC 2045 5.1.
             In the Augmented BNF notation of RFC 822, a Content-Type header field
             value is defined as follows:
            
                 content := "Content-Type" ":" type "/" subtype
                            *(";" parameter)
                            ; Matching of media type and subtype
                            ; is ALWAYS case-insensitive.
            
                 type := discrete-type / composite-type
            
                 discrete-type := "text" / "image" / "audio" / "video" / "application" / extension-token
            
                 composite-type := "message" / "multipart" / extension-token
            
                 extension-token := ietf-token / x-token
            
                 ietf-token := (An extension token defined by a standards-track RFC and registered with IANA.)
            
                 x-token := (The two characters "X-" or "x-" followed, with no intervening white space, by any token)
            
                 subtype := extension-token / iana-token
            
                 iana-token := (A publicly-defined extension token. Tokens of this form must be registered with IANA as specified in RFC 2048.)
            
                 parameter := attribute "=" value
            
                 attribute := token
                              ; Matching of attributes
                              ; is ALWAYS case-insensitive.
            
                 value := token / quoted-string
            
                 token := 1*(any (US-ASCII) CHAR except SPACE, CTLs,or tspecials)
            
                 tspecials :=  "(" / ")" / "&lt;" / "&gt;" / "@" /
                               "," / ";" / ":" / "\" / "
                               "/" / "[" / "]" / "?" / "="
                               ; Must be in quoted-string,
                               ; to use within parameter values
             </code>
             </remarks>
        </member>
        <member name="M:PX.Common.MIME.HeaderContentType.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">Media type with subtype. For example <b>text/plain</b>.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderContentType.#ctor">
            <summary>
            Internal parser constructor.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.HeaderContentType.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderContentType.ToString(PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:PX.Common.MIME.HeaderContentType.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.MIME.HeaderContentType.Name">
            <summary>
            Returns always "Content-Type".
            </summary>
        </member>
        <member name="P:PX.Common.MIME.HeaderContentType.Type">
            <summary>
            Gets media type. For example: application,image,text, ... .
            </summary>
            <remarks>The official list of reggistered types are http://www.iana.org/assignments/media-types .</remarks>
        </member>
        <member name="P:PX.Common.MIME.HeaderContentType.SubType">
            <summary>
            Gets media sub-type. For example for text/plain, sub-type is 'plain'.
            </summary>
            <remarks>The official list of reggistered types are http://www.iana.org/assignments/media-types .</remarks>
        </member>
        <member name="P:PX.Common.MIME.HeaderContentType.TypeWithSubype">
            <summary>
            Gets media type with subtype as Type/SubType. Well known value are in <see cref="T:PX.Common.MIME.MediaTypes">MediaTypes</see>. For example: text/plain.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.HeaderContentType.TypeWithSubtype">
            <summary>
            Gets media type with subtype as Type/SubType. Well known value are in <see cref="T:PX.Common.MIME.MediaTypes">MediaTypes</see>. For example: text/plain.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.HeaderContentType.Parameters">
            <summary>
            Gets Content-Type parameters collection.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.HeaderContentType.Param_Name">
            <summary>
            Gets or sets Content-Type <b>name</b> parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.HeaderContentType.Param_Charset">
            <summary>
            Gets or sets Content-Type <b>charset</b> parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.HeaderContentType.Param_Boundary">
            <summary>
            Gets or sets Content-Type <b>boundary</b> parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.HeaderParameter">
            <summary>
            Represents MIME header field parameter.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.HeaderParameter.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value. Value null means not specified.</param>
        </member>
        <member name="P:PX.Common.MIME.HeaderParameter.IsModified">
            <summary>
            Gets if this header field parameter is modified since it has loaded.
            </summary>
            <remarks>All new added header fields parameters has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.MIME.HeaderParameter.Name">
            <summary>
            Gets parameter name.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.HeaderParameter.Value">
            <summary>
            Gets or sets parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.HeaderParameterCollection">
            <summary>
            Represents MIME header field parameters collection.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.HeaderParameterCollection._ParameterBuilder">
            <summary>
            This class represents header field parameter builder.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.HeaderParameterCollection._ParameterBuilder.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Parameter name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderParameterCollection._ParameterBuilder.AddPart(System.Int32,System.Boolean,System.String)">
            <summary>
            Adds header field parameter part to paramter buffer.
            </summary>
            <param name="index">Parameter part index.</param>
            <param name="encoded">If true parameter part is encoded.</param>
            <param name="value">Parameter part value.</param>
        </member>
        <member name="M:PX.Common.MIME.HeaderParameterCollection._ParameterBuilder.GetParamter">
            <summary>
            Gets header field parameter(splitted paramter values concated).
            </summary>
            <returns>Returns header field parameter.</returns>
        </member>
        <member name="P:PX.Common.MIME.HeaderParameterCollection._ParameterBuilder.Name">
            <summary>
            Gets parameter name.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.HeaderParameterCollection.#ctor(PX.Common.MIME.Header)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner MIME header field.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderParameterCollection.Remove(System.String)">
            <summary>
            Removes specified parametr from the collection.
            </summary>
            <param name="name">Parameter name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderParameterCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.HeaderParameterCollection.ToArray">
            <summary>
            Copies header fields parameters to new array.
            </summary>
            <returns>Returns header fields parameters array.</returns>
        </member>
        <member name="M:PX.Common.MIME.HeaderParameterCollection.ToString">
            <summary>
            Returns header field parameters as string.
            </summary>
            <returns>Returns header field parameters as string.</returns>
        </member>
        <member name="M:PX.Common.MIME.HeaderParameterCollection.ToString(System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field parameters as string.
            </summary>
            <param name="charset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field parameters as string.</returns>
        </member>
        <member name="M:PX.Common.MIME.HeaderParameterCollection.Parse(System.String)">
            <summary>
            Parses parameters from the specified value.
            </summary>
            <param name="value">Header field parameters string.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderParameterCollection.Parse(PX.Common.MIME.MimeReader)">
            <summary>
            Parses parameters from the specified reader.
            </summary>
            <param name="mimeReader">MIME reader.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>reader</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderParameterCollection.DecodeExtOctet(System.String,System.Text.Encoding)">
            <summary>
            Decodes non-ascii text with MIME <b>ext-octet</b> method. Defined in RFC 2231 7.
            </summary>
            <param name="text">Text to decode,</param>
            <param name="charset">Charset to use.</param>
            <returns>Returns decoded text.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> or <b>charset</b> is null.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderParameterCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PX.Common.MIME.HeaderParameterCollection.IsModified">
            <summary>
            Gets if this header field parameters are modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.MIME.HeaderParameterCollection.Owner">
            <summary>
            Gets owner MIME header field.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.HeaderParameterCollection.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.HeaderParameterCollection.Item(System.String)">
            <summary>
            Gets or sets specified header field parameter value. Value null means not specified.
            </summary>
            <param name="name">Header field name.</param>
            <returns>Returns specified header field value or null if specified parameter doesn't exist.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
        </member>
        <member name="T:PX.Common.MIME.HeaderProvider">
            <summary>
            This class represents MIME headers provider.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.HeaderProvider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.HeaderProvider.Parse(System.String)">
            <summary>
            Parses specified header field.
            </summary>
            <param name="field">Header field string (Name: value).</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:PX.Common.MIME.HeaderProvider.DefaultHeaderField">
            <summary>
            Gets or sets default header field what is used to reperesent unknown header fields.
            </summary>
            <remarks>This property value value must be based on <see cref="T:PX.Common.MIME.Header"/> class.</remarks>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:PX.Common.MIME.HeaderProvider.HeaderFields">
            <summary>
            Gets header fields parsers collection.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.HeaderUnparsed">
            <summary>
            This class represent header field what parsing has failed.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.HeaderUnparsed.#ctor(System.String,System.Exception)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <param name="exception">Parsing error.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderUnparsed.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.InvalidOperationException">Is alwyas raised when this mewthod is accsessed.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderUnparsed.ToString(PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:PX.Common.MIME.HeaderUnparsed.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.MIME.HeaderUnparsed.Name">
            <summary>
            Gets header field name.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.HeaderUnparsed.Value">
            <summary>
            Gets header field value.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.HeaderUnparsed.Exception">
            <summary>
            Gets error happened during parse.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.HeaderUnstructured">
            <summary>
            This class represents normal unstructured text header field.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.HeaderUnstructured.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Header field name.</param>
            <param name="value">Header field value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> or <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderUnstructured.#ctor">
            <summary>
            Internal parser constructor.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.HeaderUnstructured.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:PX.Common.MIME.HeaderUnstructured.ToString(PX.Common.MIME.EncodingEncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:PX.Common.MIME.HeaderUnstructured.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.MIME.HeaderUnstructured.Name">
            <summary>
            Gets header field name.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.HeaderUnstructured.Value">
            <summary>
            Gets or sets header field value.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when when null reference is passed.</exception>
        </member>
        <member name="T:PX.Common.MIME.MediaTypes">
            <summary>
            This class holds well known Content-Type header field media types. For example: text/plain, application/octet-stream.
            Full IANA registered list can be found from: http://www.iana.org/assignments/media-types.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.MediaTypes.Application">
            <summary>
            This class holds well-known application/xxx media types.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Application.octet_stream">
            <summary>
            "application/octet-stream". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Application.json">
            <summary>
            "application/json". Defined in RFC 4627.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Application.pdf">
            <summary>
            "application/pdf". Defined in RFC 3778.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Application.sdp">
            <summary>
            "application/sdp". Defined in RFC 4566.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Application.xml">
            <summary>
            "application/xml". Defined RFC 3023.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Application.zip">
            <summary>
            "application/zip". Defined in RFC 4566.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Application.x_pkcs7_signature">
            <summary>
            "application/x-pkcs7-signature". Defined in RFC 2311,2633.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Application.pkcs7_mime">
            <summary>
            "application/pkcs7-mime". Defined in RFC 5751.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.MediaTypes.Image">
            <summary>
            This class holds well-known image/xxx media types.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Image.gif">
            <summary>
            "image/gif".
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Image.jpeg">
            <summary>
            "image/jpeg".
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Image.tiff">
            <summary>
            "image/tiff".
            </summary>
        </member>
        <member name="T:PX.Common.MIME.MediaTypes.Text">
            <summary>
            This class holds well-known text/xxx media types.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Text.calendar">
            <summary>
            "text/calendar". Defined in RFC 2445.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Text.css">
            <summary>
            "text/css". Defined in RFC 2854
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Text.html">
            <summary>
            "text/html". Defined in RFC 2854.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Text.plain">
            <summary>
            "text/plain". Defined in RFC 2646,2046.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Text.rfc822_headers">
            <summary>
            "text/rfc822-headers". Defined in RFC 1892.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Text.richtext">
            <summary>
            "text/richtext". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Text.xml">
            <summary>
            "text/xml". Defined in RFC 3023.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.MediaTypes.Multipart">
            <summary>
            This class holds well-known multipart/xxx media types.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Multipart.alternative">
            <summary>
            "multipart/alternative". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Multipart.digest">
            <summary>
            "multipart/digest". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Multipart.encrypted">
            <summary>
            "multipart/digest". Defined in RFC 1847.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Multipart.form_data">
            <summary>
            "multipart/form-data". Defined in RFC 2388.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Multipart.mixed">
            <summary>
            "multipart/mixed". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Multipart.parallel">
            <summary>
            "multipart/parallel". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Multipart.related">
            <summary>
            "multipart/related". Defined in RFC 2387.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Multipart.report">
            <summary>
            "multipart/report". Defined in RFC 1892.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Multipart.signed">
            <summary>
            "multipart/signed". Defined in RFC 1847.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Multipart.voice_message">
            <summary>
            "multipart/voice-message". Defined in RFC 2421,2423.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.MediaTypes.Message">
            <summary>
            This class holds well-known message/xxx media types.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Message.rfc822">
            <summary>
            "message/rfc822". 
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Message.disposition_notification">
            <summary>
            "message/disposition-notification". 
            </summary>
        </member>
        <member name="F:PX.Common.MIME.MediaTypes.Message.delivery_status">
            <summary>
            "message/delivery-status". Defined in RFC 3464.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.Message">
            <summary>
            Represents a MIME message. Defined in RFC 2045 2.3.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.Message.ParseFromFile(System.String)">
            <summary>
            Parses MIME message from the specified file.
            </summary>
            <param name="file">File name with path from where to parse MIME message.</param>
            <returns>Returns parsed MIME message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.MIME.Message.ParseFromFile(System.String,System.Text.Encoding)">
            <summary>
            Parses MIME message from the specified file.
            </summary>
            <param name="file">File name with path from where to parse MIME message.</param>
            <param name="headerEncoding">Header reading encoding. If not sure UTF-8 is recommended.</param>
            <returns>Returns parsed MIME message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> or <b>headerEncoding</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.MIME.Message.ParseFromStream(System.IO.Stream)">
            <summary>
            Parses MIME message from the specified stream.
            </summary>
            <param name="stream">Stream from where to parse MIME message. Parsing starts from current stream position.</param>
            <returns>Returns parsed MIME message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:PX.Common.MIME.Message.ParseFromStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Parses MIME message from the specified stream.
            </summary>
            <param name="stream">Stream from where to parse MIME message. Parsing starts from current stream position.</param>
            <param name="headerEncoding">Header reading encoding. If not sure UTF-8 is recommended.</param>
            <returns>Returns parsed MIME message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>headerEncoding</b> is null.</exception>
        </member>
        <member name="M:PX.Common.MIME.Message.CreateAttachment(System.String)">
            <summary>
            Creates attachment entity.
            </summary>
            <param name="file">File name with optional path.</param>
            <returns>Returns created attachment entity.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.Message.CreateAttachment(System.IO.Stream,System.String)">
            <summary>
            Creates attachment entity.
            </summary>
            <param name="stream">Attachment data stream.</param>
            <param name="fileName">File name.</param>
            <returns>Returns created attachment entity.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>fileName</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.Message.GetAllEntities(System.Boolean)">
            <summary>
            Gets all MIME entities as list.
            </summary>
            <param name="includeEmbbedMessage">If true, then embbed RFC822 message child entities as included.</param>
            <returns>Returns all MIME entities as list.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.MIME.Message.GetEntityByCID(System.String)">
            <summary>
            Gets MIME entity with the specified Content-ID. Returns null if no such entity.
            </summary>
            <param name="cid">Content ID.</param>
            <returns>Returns MIME entity with the specified Content-ID or null if no such entity.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>cid</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:PX.Common.MIME.Message.AllEntities">
            <summary>
            Gets all MIME entities as list.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is disposed and this property is accessed.</exception>
            <remarks>The nestetd entities of embbed messages with <b>Content-Type: Message/Rfc822</b> are also included.</remarks>
        </member>
        <member name="T:PX.Common.MIME.MimeReader">
            <summary>
            MIME lexical tokens parser.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Value to read.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null.</exception>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.Atom">
            <summary>
            Reads RFC 2822 'atom' from source stream.
            </summary>
            <returns>Returns RFC 2822 'atom' or null if end of stream reached.</returns>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.DotAtom">
            <summary>
            Reads RFC 2822 'dot-atom' from source stream.
            </summary>
            <returns>Returns RFC 2822 'dot-atom' or null if end of stream reached.</returns>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.Token">
            <summary>
            Reads RFC 2045 (section 5) 'token' from source stream.
            </summary>
            <returns>Returns RFC 2045 (section 5) 'token' or null if end of stream reached.</returns>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.Comment">
            <summary>
            Reads RFC 822 'comment' from source stream.
            </summary>
            <returns>Returns RFC 822 'comment' or null if end of stream reached.</returns>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.Word">
            <summary>
            Reads RFC 2822 (section 3.2.6) 'word' from source stream.
            </summary>
            <returns>Returns RFC 2822 (section 3.2.6) 'word' or null if end of stream reached.</returns>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.EncodedWord">
            <summary>
            Reads RFC 2047 'encoded-word' from source stream.
            </summary>
            <returns>Returns RFC 2047 'encoded-word' or null if end of stream reached.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when source stream has no encoded-word at current position.</exception>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.QuotedString">
            <summary>
            Reads RFC 822 'quoted-string' from source stream.
            </summary>
            <returns>Returns RFC 822 'quoted-string' or null if end of stream reached.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when source stream has no quoted-string at current position.</exception>
            <exception cref="T:System.ArgumentException">Is raised when not valid 'quoted-string'.</exception>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.Value">
            <summary>
            Reads RFC 2045 (section 5) 'token' from source stream.
            </summary>
            <returns>Returns 2045 (section 5) 'token' or null if end of stream reached.</returns>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.Phrase">
            <summary>
            Reads RFC 2047 (section 5) 'phrase' from source stream.
            </summary>
            <returns>Returns RFC 2047 (section 5) 'phrase' or null if end of stream reached.</returns>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.Text">
            <summary>
            Reads RFC 822 '*text' from source stream.
            </summary>
            <returns>Returns RFC 822 '*text' or null if end of stream reached.</returns>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.ToFirstChar">
            <summary>
            Reads all white-space chars + CR and LF.
            </summary>
            <returns>Returns readed chars.</returns>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.Char(System.Boolean)">
            <summary>
            Reads 1 char from source stream.
            </summary>
            <param name="readToFirstChar">Specifies if postion is moved to char(skips white spaces).</param>
            <returns>Returns readed char or -1 if end of stream reached.</returns>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.Peek(System.Boolean)">
            <summary>
            Shows next char in source stream, this method won't consume that char.
            </summary>
            <param name="readToFirstChar">Specifies if postion is moved to char(skips white spaces).</param>
            <returns>Returns next char in source stream, returns -1 if end of stream.</returns>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.StartsWith(System.String)">
            <summary>
            Gets if source stream valu starts with the specified value. Compare is case-insensitive.
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns true if source steam satrs with specified string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null.</exception>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.ToEnd">
            <summary>
            Reads all data from current postion to the end.
            </summary>
            <returns>Retruns readed data. Returns null if end of string is reached.</returns>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.IsAlpha(System.Char)">
            <summary>
            Gets if the specified char is RFC 822 'ALPHA'.
            </summary>
            <param name="c">Char to check.</param>
            <returns>Returns true if specified char is RFC 822 'ALPHA'.</returns>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.IsAText(System.Char)">
            <summary>
            Gets if the specified char is RFC 2822 'atext'.
            </summary>
            <param name="c">Char to check.</param>
            <returns>Returns true if specified char is RFC 2822 'atext'.</returns>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.IsDotAtom(System.String)">
            <summary>
            Gets if the specified value can be represented as "dot-atom".
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns true if the specified value can be represented as "dot-atom".</returns>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.IsToken(System.String)">
            <summary>
            Gets if specified valu is RFC 2045 (section 5) 'token'.
            </summary>
            <param name="text">Text to check.</param>
            <returns>Returns true if specified char is RFC 2045 (section 5) 'token'.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null.</exception>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.IsToken(System.Char)">
            <summary>
            Gets if the specified char is RFC 2045 (section 5) 'token'.
            </summary>
            <param name="c">Char to check.</param>
            <returns>Returns true if specified char is RFC 2045 (section 5) 'token'.</returns>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.IsAttributeChar(System.Char)">
            <summary>
            Gets if the specified char is RFC 2231 (section 7) 'attribute-char'.
            </summary>
            <param name="c">Char to check.</param>
            <returns>Returns true if specified char is RFC 2231 (section 7) 'attribute-char'.</returns>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.ReadParenthesized">
            <summary>
            Reads parenthesized value. Supports {},(),[],&lt;&gt; parenthesis. 
            Throws exception if there isn't parenthesized value or closing parenthesize is missing.
            </summary>
            <returns>Returns value between parenthesized.</returns>
        </member>
        <member name="M:PX.Common.MIME.MimeReader.QuotedReadToDelimiter(System.Char[])">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiters in quoted string is skipped. 
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <returns>Returns readed string or null if end of string reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>delimiters</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.MIME.MimeReader.Available">
            <summary>
            Gets number of chars has left for processing.
            </summary>
        </member>
        <member name="P:PX.Common.MIME.MimeReader.Position">
            <summary>
            Gets position in string.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.TransferEncodings">
            <summary>
            This class holds MIME content transfer encodings. Defined in RFC 2045 6.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.TransferEncodings.SevenBit">
            <summary>
            Up to 998 octets per line of the code range 1..127 with CR and LF (codes 13 and 10 respectively) only allowed to 
            appear as part of a CRLF line ending. This is the default value.
            Defined in RFC 2045 6.2.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.TransferEncodings.EightBit">
            <summary>
            Up to 998 octets per line with CR and LF (codes 13 and 10 respectively) only allowed to appear as part of a CRLF line ending.
            Defined in RFC 2045 6.2.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.TransferEncodings.QuotedPrintable">
            <summary>
            Used to encode arbitrary octet sequences into a form that satisfies the rules of 7bit. 
            Designed to be efficient and mostly human readable when used for text data consisting primarily of US-ASCII characters 
            but also containing a small proportion of bytes with values outside that range.
            Defined in RFC 2045 6.7.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.TransferEncodings.Base64">
            <summary>
            Used to encode arbitrary octet sequences into a form that satisfies the rules of 7bit. Has a fixed overhead and is 
            intended for non text data and text that is not ASCII heavy.
            Defined in RFC 2045 6.8.
            </summary>
        </member>
        <member name="F:PX.Common.MIME.TransferEncodings.Binary">
            <summary>
            Any sequence of octets. This type is not widely used. Defined in RFC 3030.
            </summary>
        </member>
        <member name="T:PX.Common.MIME.Utils">
            <summary>
            Provides MIME related utility methods.
            </summary>
        </member>
        <member name="M:PX.Common.MIME.Utils.DateTimeToRfc2822(System.DateTime)">
            <summary>
            Converts date to RFC 2822 date time string.
            </summary>
            <param name="dateTime">Date time value to convert..</param>
            <returns>Returns RFC 2822 date time string.</returns>
        </member>
        <member name="M:PX.Common.MIME.Utils.ParseRfc2822DateTime(System.String)">
            <summary>
            Parses RFC 2822 date-time from the specified value.
            </summary>
            <param name="value">RFC 2822 date-time string value.</param>
            <returns>Returns parsed datetime value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.MIME.Utils.UnfoldHeader(System.String)">
            <summary>
            Unfolds folded header field.
            </summary>
            <param name="value">Header field.</param>
            <returns>Returns unfolded header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.Utils.CreateMessageID">
            <summary>
            Creates Rfc 2822 3.6.4 message-id. Syntax: '&lt;' id-left '@' id-right '&gt;'.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Common.MIME.Utils.ParseHeaders(System.IO.Stream)">
            <summary>
            Parses headers from message or mime entry.
            </summary>
            <param name="entryStrm">Stream from where to read headers.</param>
            <returns>Returns header lines.</returns>
        </member>
        <member name="M:PX.Common.MIME.Utils.ParseHeaderField(System.String,System.IO.Stream)">
            <summary>
            Parse header specified header field value.
            
            Use this method only if you need to get only one header field, otherwise use
            MimeParser.ParseHeaderField(string fieldName,string headers).
            This avoid parsing headers multiple times.
            </summary>
            <param name="fieldName">Header field which to parse. Eg. Subject: .</param>
            <param name="entryStrm">Stream from where to read headers.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.MIME.Utils.ParseHeaderField(System.String,System.String)">
            <summary>
            Parse header specified header field value.
            </summary>
            <param name="fieldName">Header field which to parse. Eg. Subject: .</param>
            <param name="headers">Full headers string. Use MimeParser.ParseHeaders() to get this value.</param>
        </member>
        <member name="M:PX.Common.MIME.Utils.QDecode(System.Text.Encoding,System.String)">
            <summary>
            "Q" decoder. This is same as quoted-printable, except '_' is converted to ' '.
            Defined in RFC 2047 4.2.
            </summary>
            <param name="encoding">Input string encoding.</param>
            <param name="data">String which to encode.</param>
            <returns>Returns decoded string.</returns>		
            <exception cref="T:System.ArgumentNullException">Is raised when <b>encoding</b> or <b>data</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.MIME.Utils.QuotedPrintableDecode(System.Byte[])">
            <summary>
            quoted-printable decoder. Defined in RFC 2045 6.7.
            </summary>
            <param name="data">Data which to encode.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="T:PX.Common.Net_Utils">
            <summary>
            Common utility methods.
            </summary>
        </member>
        <member name="M:PX.Common.Net_Utils.GetLocalHostName(System.String)">
            <summary>
            Gets local host name or argument <b>hostName</b> value if it's specified.
            </summary>
            <param name="hostName">Host name or null.</param>
            <returns>Returns local host name or argument <b>hostName</b> value if it's specified.</returns>
        </member>
        <member name="M:PX.Common.Net_Utils.CompareArray(System.Array,System.Array)">
            <summary>
            Compares if specified array itmes equals.
            </summary>
            <param name="array1">Array 1.</param>
            <param name="array2">Array 2</param>
            <returns>Returns true if both arrays are equal.</returns>
        </member>
        <member name="M:PX.Common.Net_Utils.CompareArray(System.Array,System.Array,System.Int32)">
            <summary>
            Compares if specified array itmes equals.
            </summary>
            <param name="array1">Array 1.</param>
            <param name="array2">Array 2</param>
            <param name="array2Count">Number of bytes in array 2 used for compare.</param>
            <returns>Returns true if both arrays are equal.</returns>
        </member>
        <member name="M:PX.Common.Net_Utils.ReverseArray(System.Array)">
            <summary>
            Reverses the specified array elements.
            </summary>
            <param name="array">Array elements to reverse.</param>
            <returns>Returns array with reversed items.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>array</b> is null.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.ArrayToString(System.String[],System.String)">
            <summary>
            Convert array elements to string.
            </summary>
            <param name="values">String values.</param>
            <param name="delimiter">Values delimiter.</param>
            <returns>Returns array elements as string.</returns>
        </member>
        <member name="M:PX.Common.Net_Utils.StreamCopy(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies <b>source</b> stream data to <b>target</b> stream.
            </summary>
            <param name="source">Source stream. Reading starts from stream current position.</param>
            <param name="target">Target stream. Writing starts from stream current position.</param>
            <param name="blockSize">Specifies transfer block size in bytes.</param>
            <returns>Returns number of bytes copied.</returns>
        </member>
        <member name="M:PX.Common.Net_Utils.CompareIP(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Compares 2 IP addresses. Returns 0 if IPs are equal, 
            returns positive value if destination IP is bigger than source IP,
            returns negative value if destination IP is smaller than source IP.
            </summary>
            <param name="source">Source IP address.</param>
            <param name="destination">Destination IP address.</param>
            <returns>Returns 0 if IPs are equal, 
            returns positive value if destination IP is bigger than source IP,
            returns negative value if destination IP is smaller than source IP.
            </returns>
        </member>
        <member name="M:PX.Common.Net_Utils.IsIPAddress(System.String)">
            <summary>
            Gets if the specified string value is IP address.
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns true if specified value is IP address.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.IsMulticastAddress(System.Net.IPAddress)">
            <summary>
            Gets if the specified IP address is multicast address.
            </summary>
            <param name="ip">IP address.</param>
            <returns>Returns true if <b>ip</b> is muticast address, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> s null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.IsPrivateIP(System.String)">
            <summary>
            Gets if specified IP address is private LAN IP address. For example 192.168.x.x is private ip.
            </summary>
            <param name="ip">IP address to check.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
            <returns>Returns true if IP is private IP.</returns>
        </member>
        <member name="M:PX.Common.Net_Utils.IsPrivateIP(System.Net.IPAddress)">
            <summary>
            Gets if specified IP address is private LAN IP address. For example 192.168.x.x is private ip.
            </summary>
            <param name="ip">IP address to check.</param>
            <returns>Returns true if IP is private IP.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.ParseIPEndPoint(System.String)">
            <summary>
            Parses IPEndPoint from the specified string value.
            </summary>
            <param name="value">IPEndPoint string value.</param>
            <returns>Returns parsed IPEndPoint.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.IsInteger(System.String)">
            <summary>
            Checks if specified string is integer(int/long).
            </summary>
            <param name="value"></param>
            <returns>Returns true if specified string is integer.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.IsAscii(System.String)">
            <summary>
            Gets if the specified string is ASCII string.
            </summary>
            <param name="value">String value.</param>
            <returns>Returns true if specified string is ASCII string, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.IsIoCompletionPortsSupported">
            <summary>
            Gets if IO completion ports supported by OS.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Common.Net_Utils.CreateSocket(System.Net.IPEndPoint,System.Net.Sockets.ProtocolType)">
            <summary>
            Creates new socket for the specified end point.
            </summary>
            <param name="localEP">Local end point.</param>
            <param name="protocolType">Protocol type.</param>
            <returns>Retruns newly created socket.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>localEP</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.ToHex(System.Byte[])">
            <summary>
            Converts specified data to HEX string.
            </summary>
            <param name="data">Data to convert.</param>
            <returns>Returns hex string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.ToHex(System.String)">
            <summary>
            Converts specified string to HEX string.
            </summary>
            <param name="text">String to convert.</param>
            <returns>Returns hex string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.FromHex(System.Byte[])">
            <summary>
            Converts hex byte data to normal byte data. Hex data must be in two bytes pairs, for example: 0F,FF,A3,... .
            </summary>
            <param name="hexData">Hex data.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hexData</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.FromBase64(System.String)">
            <summary>
            Decodes specified base64 data.
            </summary>
            <param name="data">Base64 string.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.FromBase64(System.Byte[])">
            <summary>
            Decodes specified base64 data.
            </summary>
            <param name="data">Base64 data.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.Base64Encode(System.Byte[])">
            <summary>
            Encodes specified data with base64 encoding.
            </summary>
            <param name="data">Data to encode.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.Net_Utils.Base64EncodeEx(System.Byte[],System.Char[],System.Boolean)">
            <summary>
            Encodes specified data with bas64 encoding.
            </summary>
            <param name="data">Data to to encode.</param>
            <param name="base64Chars">Custom base64 chars (64 chars) or null if default chars used.</param>
            <param name="padd">Padd missing block chars. Normal base64 must be 4 bytes blocks, if not 4 bytes in block, 
            missing bytes must be padded with '='. Modified base64 just skips missing bytes.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.Net_Utils.Base64DecodeEx(System.Byte[],System.Char[])">
            <summary>
            Decodes base64 data. Defined in RFC 2045 6.8.  Base64 Content-Transfer-Encoding.
            </summary>
            <param name="base64Data">Base64 decoded data.</param>
            <param name="base64Chars">Custom base64 chars (64 chars) or null if default chars used.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.Net_Utils.ComputeMd5(System.String,System.Boolean)">
            <summary>
            Computes md5 hash.
            </summary>
            <param name="text">Text to hash.</param>
            <param name="hex">Specifies if md5 value is returned as hex string.</param>
            <returns>Returns md5 value or md5 hex value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.RemoveTrailingZerosInIPAddress(System.String)">
            <summary>
            Removes trailing zeros because C# interprets them as octal number indicator.
            </summary>
        </member>
        <member name="M:PX.Common.Net_Utils.ParseIPAddress(System.String)">
            <summary>
            Parses IP address. This method should be used instead of IPAddress.Parse because it includes input preprocessing.
            </summary>
        </member>
        <member name="M:PX.Common.Net_Utils.TryParseIPAddress(System.String,System.Net.IPAddress@)">
            <summary>
            Parses IP address. This method should be used instead of IPAddress.TryParse because it includes input preprocessing.
            </summary>
        </member>
        <member name="T:PX.Common.NonGenericIEnumerableExtensions">
            <summary>
            Helper class that contains LINQ methods for non-generic IEnumerable.
            </summary>
        </member>
        <member name="M:PX.Common.NonGenericIEnumerableExtensions.Concat_(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Concatenates two sequences.
            </summary>
            <param name="first">The first sequence to concatenate.</param>
            <param name="second">The sequence to concatenate to the first sequence.</param>
            <returns>An IEnumerable that contains the concatenated elements of the two input sequences.</returns>
        </member>
        <member name="M:PX.Common.NonGenericIEnumerableExtensions.Any_(System.Collections.IEnumerable)">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <returns>
            true if the source sequence contains any elements; otherwise, false.
            </returns>
        </member>
        <member name="M:PX.Common.NonGenericIEnumerableExtensions.Empty_(System.Collections.IEnumerable)">
            <summary>
            Determines whether a sequence contains is empty.
            </summary>
            <returns>
            true if the source sequence doesn't contain any elements; otherwise, false.
            </returns>
        </member>
        <member name="T:PX.Common.ParseException">
            <summary>
            This exception is thrown when parse errors are encountered.
            </summary>
        </member>
        <member name="M:PX.Common.ParseException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:PX.Common.Parser.AggregateNode">
            <summary>
            Defines the aggregate expression node.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.AggregateNode.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the AggregateNode with specified name and field.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.AggregateNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AggregateNode with specified name.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.AggregateNode.Argument">
            <summary>
            Gets or sets the aggregate function argument.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.AggregateNode.Name">
            <summary>
            Gets the aggregate function name;
            </summary>
        </member>
        <member name="M:PX.Common.Parser.AggregateNode.Bind(System.Object)">
            <summary>
            Perform the current node data binding.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.AggregateNode.ConvertToText(PX.Common.Parser.ExpressionNode.ConvertMethod)">
            <summary>
            Convert expression node to source formula text.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.ConstantNode">
            <summary>
            Defines the constant expression node.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.ConstantNode.IsConstant">
            <summary>
            Gets a value indicating whether the node is constant.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.ConstantNode.Type">
            <summary>
            Gets the expression value type.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.ConstantNode.Value">
            <summary>
            Gets the expression value.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.ConstantNode.Text">
            <summary>
            Gets the raw constant text.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ConstantNode.FindConstantNodes(PX.Common.Parser.ExpressionNode)">
            <summary>
            Searches for constant nodes in specified ExpressionNode object.
            </summary>
            <param name="node">ExpressionNode object to search constants in.</param>
            <returns>An array of found constant nodes. Null in case of failure.</returns>
        </member>
        <member name="M:PX.Common.Parser.ConstantNode.Eval(System.Object)">
            <summary>
            Evaluates the current node expression.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ConstantNode.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ConstantNode.Init(PX.Common.Parser.ValueType,System.String)">
            <summary>
            Calculte the current node value.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.DataType">
            <summary>
            Specifies the report data types.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.TypePrecedence">
            <summary>
            Specifies the data types precedence.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.ValueType">
            <summary>
            Specifies the expression data types.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.Token">
            <summary>
            Specifies the expression lexemes.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.OperandType">
            <summary>
            Specifies the expression operand types.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.ExpressionException">
            <summary>
            The exception that is thrown when the report expression is invalid.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionException.CreateException(System.String,System.Object[])">
            <summary>
            Create exception object with specified parameters.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionException.CreateException(System.String,System.Exception,System.Object[])">
            <summary>
            Create exception object with specified inner exception and parameters.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.ParserException">
            <summary>
            Represents errors that occur during expression parsing.
            </summary>
        </member>
        <member name="F:PX.Common.Parser.ParserException.Context">
            <summary>
            Gets or sets the context of the parser exception.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.ExpressionContext">
            <summary>
            Provides the base class of the expression context.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.ExpressionContext.HasExternalObjects">
            <summary>
            Gets the expression object by specified name.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.ExpressionContext.Item(System.String)">
            <summary>
            Gets or sets the custom property value.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.CopyProperties(System.String,PX.Common.Parser.ExpressionContext)">
            <summary>
            Copy all properties from specified expression context.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.RegisterProperty(System.String,System.Object)">
            <summary>
            Register custom property with specified name.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.UnregisterProperty(System.String)">
            <summary>
            Unregister custom property with specified name.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.UnregisterProperties">
            <summary>
            Unregister all custom properties.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.HasProperty(System.String)">
            <summary>
            Check if object has custom property with specified name.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.RegisterExternalObject(System.String,System.Object)">
            <summary>
            Register specified object for using inside report expressions.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.UnregisterExternalObject(System.String)">
            <summary>
            Unregister expression object with specified name.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.GetExternalObject(System.String)">
            <summary>
            Gets the expression object by specified name.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.CBool(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Converts the specified value to its Boolean equivalent.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.CDate(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Converts the specified value to its DateTime equivalent.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.CStr(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Converts the specified value to its String equivalent.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.CDbl(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Converts the specified value to its Double equivalent.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.CSng(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Converts the specified value to its Single equivalent.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.CDec(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Converts the specified value to its Double equivalent.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.CInt(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Converts the specified value to its Integer equivalent.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.CShort(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Converts the specified value to its Integer equivalent.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.CLong(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Converts the specified value to its Long equivalent.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.LTrim(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Removes all occurrences of a space characters from the beginning of this instance.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.RTrim(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Removes all occurrences of a space characters from the end of this instance.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Trim(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Removes all occurrences of a space characters from the beginning and end of this instance.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Format(PX.Common.Parser.FunctionContext,System.Object,System.Object[])">
            <summary>
            Returns a string formatted according to instructions contained in a format String expression.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.UCase(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Returns a string or character containing the specified string converted to uppercase.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.LCase(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Returns a string or character containing the specified string converted to lowercase.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.InStr(PX.Common.Parser.FunctionContext,System.Object,System.Object)">
            <summary>
            Returns an integer specifying the start position of the first occurrence 
            of one string within another.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.InStrRev(PX.Common.Parser.FunctionContext,System.Object,System.Object)">
            <summary>
            Returns the position of the first occurrence of one string within another, 
            starting from the right side of the string.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Len(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Gets the number of characters in this instance.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Left(PX.Common.Parser.FunctionContext,System.Object,System.Object)">
            <summary>
            Returns a string containing a specified number of characters from the 
            left side of a string.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Right(PX.Common.Parser.FunctionContext,System.Object,System.Object)">
            <summary>
            Returns a string containing a specified number of characters from the 
            right side of a string.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Substring(PX.Common.Parser.FunctionContext,System.Object,System.Object,System.Object)">
            <summary>
            Returns a string containing a specified number of characters from the specified position.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Replace(PX.Common.Parser.FunctionContext,System.Object,System.Object,System.Object)">
            <summary>
            Returns a string in which a specified substring has been replaced with another substring.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.PadRight(PX.Common.Parser.FunctionContext,System.Object,System.Object,System.Object)">
            <summary>
            Left-aligns the characters in this string, padding on the right with a specified
            Unicode character, for a specified total length.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.PadLeft(PX.Common.Parser.FunctionContext,System.Object,System.Object,System.Object)">
            <summary>
            Right-aligns the characters in this instance, padding on the left with a
            specified Unicode character for a specified total length.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Concat(PX.Common.Parser.FunctionContext,System.Object[])">
            <summary>
            Concatenates several strings into a single one.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Abs(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Returns the absolute value of a floating-point number.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Floor(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Returns the largest integer less than or equal to the specified floating-point number.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Ceiling(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Returns the smallest integer greater than or equal to the floating-point decimal number.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Round(PX.Common.Parser.FunctionContext,System.Object,System.Object)">
            <summary>
            Rounds a floating-point value to a specified precision.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Min(PX.Common.Parser.FunctionContext,System.Object,System.Object)">
            <summary>
            Returns the smaller of two floating-point numbers.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Max(PX.Common.Parser.FunctionContext,System.Object,System.Object)">
            <summary>
            Returns the larger of two floating-point numbers.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Pow(PX.Common.Parser.FunctionContext,System.Object,System.Object)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Now(PX.Common.Parser.FunctionContext)">
            <summary>
            Gets the current DateTime object using user's timezone.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.NowUTC(PX.Common.Parser.FunctionContext)">
            <summary>
            Gets the current DateTime object.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Today(PX.Common.Parser.FunctionContext)">
            <summary>
            Gets the current date using user's timezone.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.TodayUTC(PX.Common.Parser.FunctionContext)">
            <summary>
            Gets the current date.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.DateDiff(PX.Common.Parser.FunctionContext,System.Object,System.Object,System.Object)">
            <summary>
            Returns a Date value containing a date and time value to which a specified time 
            interval has been added.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.DateAdd(PX.Common.Parser.FunctionContext,System.Object,System.Object,System.Object)">
            <summary>
            Returns a Date value containing a date and time value to which a specified time 
            interval has been added.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Year(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Gets the year component of the date.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Month(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Gets the month component of the date.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Day(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Gets the day component of the date.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.MonthName(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Gets the month name.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.DayOfWeek(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Gets the day of the week.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.DayOfYear(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Gets the day of the year.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Hour(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Gets the Hour component of the date.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Minute(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Gets the minute component of the date.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Second(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Gets the second component of the date.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.DayOrdinal(PX.Common.Parser.FunctionContext,System.Object)">
            <summary>
            Converts the specified integer value to an ordinal number string with suffix. 
            For numbers less than 1 or greater than 31 returns empty string.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.IsNull(PX.Common.Parser.FunctionContext,System.Object,System.Object)">
            <summary>
            Gets the default value if value is nullable.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.IIf(PX.Common.Parser.FunctionContext,System.Object,System.Object,System.Object)">
            <summary>
            Calculate expression and returns the true or false part.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.NullIf(PX.Common.Parser.FunctionContext,System.Object,System.Object)">
            <summary>
            Returns the first value if the two values are not equal. If the values are equal, NULLIF returns a null value.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Switch(PX.Common.Parser.FunctionContext,System.Object[])">
            <summary>
            Implements the switch operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Assign(PX.Common.Parser.FunctionContext,System.Object,System.Object)">
            <summary>
            Register a custom variable with specified name.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.Assign(PX.Common.Parser.FunctionContext,System.Object,System.Object,System.Object)">
            <summary>
            Register a custom variable with specified name.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.LineNbr(PX.Common.Parser.FunctionContext)">
            <summary>
            Return line number from PXContext (for import/export scenarios)
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.GetProperties">
            <summary>
            Get the object properties collection.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.CheckNumericProperty(System.String,System.Object,System.Int32)">
            <summary>
            Check if specified value is numeric.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.CheckIntegerProperty(System.String,System.Object,System.Int32)">
            <summary>
            Check if specified value is integer.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionContext.CheckDateProperty(System.String,System.Object,System.Int32)">
            <summary>
            Check if specified value is DateTime.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.ExpressionContext.CustomDescriptor">
            <summary>
            Defines the property descriptor.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.ExpressionNode">
            <summary>
            Provides the base class for all expression node types.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionNode.Bind(System.Object)">
            <summary>
            Perform the current node data binding.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionNode.Eval(System.Object)">
            <summary>
            Evaluates the current node expression.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionNode.ToText(PX.Common.Parser.ExpressionNode.ConvertMethod)">
            <summary>
            Convert expression node using specified convert method.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionNode.ConvertToText(PX.Common.Parser.ExpressionNode.ConvertMethod)">
            <summary>
            Convert expression node to source formula text.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionNode.ToFormulaText(PX.Common.Parser.ExpressionNode,System.String[])">
            <summary>
            Convert expression node to source formula text.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.ExpressionNode.IsConstant">
            <summary>
            Gets a value indicating whether the node is constant.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.ExpressionNode.DataSource">
            <summary>
            Gets the data source object.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.ExpressionNode.Culture">
            <summary>
            Gets the CultureInfo that represents the culture used by node.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.ExpressionNode.LinkedItem">
            <summary>
            Gets the linked item refrence.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.ZeroOpNode">
            <summary>
            Defines the fiction expression node.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.ZeroOpNode.IsConstant">
            <summary>
            Gets a value indicating whether the node is constant.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.ZeroOpNode.Op">
            <summary>
            Gets the operator reference.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ZeroOpNode.Eval(System.Object)">
            <summary>
            Evaluates the current node expression.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ZeroOpNode.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.UnaryOpNode">
            <summary>
            Defines the unary operation node.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.UnaryOpNode.IsConstant">
            <summary>
            Gets a value indicating whether the node is constant.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.UnaryOpNode.Right">
            <summary>
            Gets the unary operation operand.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.UnaryOpNode.Op">
            <summary>
            Gets the expression operator reference.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.UnaryOpNode.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.UnaryOpNode.ConvertToText(PX.Common.Parser.ExpressionNode.ConvertMethod)">
            <summary>
            Convert expression node to source formula text.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.UnaryOpNode.Bind(System.Object)">
            <summary>
            Perform the current node data binding.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.UnaryOpNode.Eval(System.Object)">
            <summary>
            Evaluates the current node expression.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.BinaryOpNode">
            <summary>
            Defines the unary operation node.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.BinaryOpNode.IsConstant">
            <summary>
            Gets a value indicating whether the node is constant.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.BinaryOpNode.Op">
            <summary>
            Gets the expression operator reference.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.BinaryOpNode.Left">
            <summary>
            Gets the left-hand operand for this operator.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.BinaryOpNode.Right">
            <summary>
            Gets the right-hand operand for this operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.BinaryOpNode.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.BinaryOpNode.ConvertToText(PX.Common.Parser.ExpressionNode.ConvertMethod)">
            <summary>
            Convert expression node to source formula text.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.BinaryOpNode.Bind(System.Object)">
            <summary>
            Perform the current node data binding.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.BinaryOpNode.Eval(System.Object)">
            <summary>
            Evaluates the current node expression.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.LikeNode">
            <summary>
            Defines the Like operation node.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.LikeNode.Eval(System.Object)">
            <summary>
            Evaluates the current node expression.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.ExpressionParser">
            <summary>
            Provides the base class of the expression parser.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ExpressionParser class.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.ExpressionParser.ValidateNames">
            <summary>
            Specifies whether the parser perform data field names validation.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.ExpressionParser.Context">
            <summary>
            Gets the expressions context object.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionParser.CreateContext">
            <summary>
            Create and return the report expressions context object.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionParser.CreateNameNode(PX.Common.Parser.ExpressionNode,System.String)">
            <summary>
            Create and return the name node.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionParser.ValidateName(PX.Common.Parser.NameNode,System.String)">
            <summary>
            Validate the specified name node.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionParser.IsAggregate(System.String)">
            <summary>
            Check if method with specified name is aggregate function.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionParser.CreateFunctionNode(PX.Common.Parser.ExpressionNode,System.String)">
            <summary>
            Create and return the function node.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionParser.CreateAggregateNode(System.String,System.String)">
            <summary>
            Create and return aggregate node.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionParser.StartParse">
            <summary>
            Starts the expression parsing.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionParser.SetContext(System.Type,System.String,System.String)">
            <summary>
            Sets the parsed expression context.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionParser.StripComments(System.String)">
            <summary>
            Remove comments from specified string.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionParser.Parse">
            <summary>
            Parse the current report expression.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionParser.CreateScalarNode(PX.Common.Parser.Token,System.String)">
            <summary>
            Create the scalar expression node.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionParser.ParseAggregateArgument(System.String)">
            <summary>
            Parse the aggregate function argument.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ExpressionParser.BuildExpression(System.Int32)">
            <summary>
            Build the expression nodes stack for operators with pripority 
            greater then specified.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.FunctionNode">
            <summary>
            Defines the function expression node.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.FunctionNode.Arguments">
            <summary>
            Gets the list of the function argument nodes.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.FunctionNode.IsConstant">
            <summary>
            Gets a value indicating whether the node is constant.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.FunctionNode.Name">
            <summary>
            Gets the function name.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.FunctionNode.AddArgument(PX.Common.Parser.ExpressionNode)">
            <summary>
            Append the specified function argument.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.FunctionNode.Bind(System.Object)">
            <summary>
            Perform the current node data binding.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.FunctionNode.Eval(System.Object)">
            <summary>
            Evaluates the current node expression.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.FunctionNode.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.FunctionNode.ConvertToText(PX.Common.Parser.ExpressionNode.ConvertMethod)">
            <summary>
            Convert expression node to source formula text.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.FunctionNode.GetMethodInfo(System.Object,System.Object@,System.Int32@)">
            <summary>
            Find the method descriptor inside target object.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.FunctionNode.GetTypeMethods(System.Object)">
            <summary>
            Gets the public methods info for specified object.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.FunctionContext">
            <summary>
            Provides the report expression functions context.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.Lexer">
            <summary>
            Defines the lexical analyzer object.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.Lexer.Operator">
            <summary>
            Get the current operator reference.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.Lexer.StartPos">
            <summary>
            Gets the lexeme start position.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.Lexer.TokenString">
            <summary>
            Gets the current lexeme string.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.Lexer.Token">
            <summary>
            Gets the current lexeme type.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Lexer.IsHexDigit(System.Char)">
            <summary>
            Check if specified char is valid hexadecimal digit.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Lexer.TokenToString(PX.Common.Parser.Token)">
            <summary>
            Convert the specified token to its string representation.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Lexer.Read(PX.Common.Parser.Token)">
            <summary>
            Read the next lexeme and check specified tooken.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Lexer.StartRead">
            <summary>
            Reset the reader position.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Lexer.Read">
            <summary>
            Read the next lexeme.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Lexer.CheckToken(PX.Common.Parser.Token)">
            <summary>
            Check if specified tooken equals to the current tooken.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Lexer.ReadDate">
            <summary>
            Read the date constant lexeme.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Lexer.ReadDigits">
            <summary>
            Read the digits sequence.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Lexer.ReadHex">
            <summary>
            Read the hex digit constant lexeme.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Lexer.ReadNumber">
            <summary>
            Read the numeric literal lexeme.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Lexer.ReadName">
            <summary>
            Read the identifier name lexeme.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Lexer.ReadName(System.Char,System.Char,System.String)">
            <summary>
            Read the identifier name lexeme to the specified end character.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Lexer.ReadReserved">
            <summary>
            Read the reserved word lexeme.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Lexer.ReadWhiteSpaces">
            <summary>
            Read the white spaces sequence.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Lexer.ReadString(System.Char)">
            <summary>
            Read the string literal lexeme.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.Lexer.StringReader">
            <summary>
            Provides the expression string reader.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Lexer.StringReader.GetString(System.Int32,System.Int32)">
            <summary>
            Gets string with specified length for specified position.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Lexer.StringReader.Peek">
            <summary>
            Gets the next buffer char.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Lexer.StringReader.Read">
            <summary>
            Read the current char and increment position.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Lexer.StringReader.Restart">
            <summary>
            Reset the buffer position.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Lexer.StringReader.LoadString(System.String)">
            <summary>
            Load the specified string to the buffer.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.Lexer.StringReader.Length">
            <summary>
            Gets the reader buffer length.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.Lexer.StringReader.Position">
            <summary>
            Gets the curreny reader position.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.Lexer.StringReader.CanRead">
            <summary>
            Check if position before buffer end.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.Lexer.StringReader.Current">
            <summary>
            Gets the current char.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.Lexer.StringReader.End">
            <summary>
            Check if position at the end of buffer.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.NameNode">
            <summary>
            Defines the name expression node.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.NameNode.Name">
            <summary>
            Gets the expression identifier name.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.NameNode.RawName">
            <summary>
            Gets the source identifier name.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.NameNode.Node">
            <summary>
            Get the linked node object.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.NameNode.Format">
            <summary>
            Gets the expression format string.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.NameNode.SuppressFormat">
            <summary>
            Gets or sets a value indicating whether the node suppress value formating.
            </summary>
        </member>
        <member name="F:PX.Common.Parser.NameNode.ForceFetchFormat">
            <summary>
            Fetch format even if SuppresFormat is applied.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.NameNode.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.NameNode.Bind(System.Object)">
            <summary>
            Perform the current node data binding.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.NameNode.Eval(System.Object)">
            <summary>
            Evaluates the current node expression.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.NameNode.FormatVal(System.Object,System.String)">
            <summary>
            Format the speicifed value with specified format.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.NameNode.FormatVal(System.Object)">
            <summary>
            Format the speicifed value.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.NameNode.FormatValue(System.Object,System.String)">
            <summary>
            Format the speicifed value.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.NameNode.ParseName(System.String,System.String@)">
            <summary>
            Get the effective identifier name.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.NameNode.ParseName(System.String)">
            <summary>
            Get the effective identifier name.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.Operand">
            <summary>
            Defines the report expression operand.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.Operand.IsConstant">
            <summary>
            Gets a value indicating whether the expression is constant.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.Operand.Node">
            <summary>
            Get the linked node object.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.Operand.SuppressFormat">
            <summary>
            Gets or sets a value indicating whether the NameNode suppress value formating.
            </summary>
        </member>
        <member name="P:PX.Common.Parser.Operand.Value">
            <summary>
            Gets the expression result.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.Operator">
            <summary>
            Defines the report expression operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.IsUnary(PX.Common.Parser.Operator)">
            <summary>
            Check if specified operator is unary.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.IsBinary(PX.Common.Parser.Operator)">
            <summary>
            Check if specified operator is binary.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.IsArithmetical(PX.Common.Parser.Operator)">
            <summary>
            Check if specified operator is arithmetical.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.IsLogical(PX.Common.Parser.Operator)">
            <summary>
            Check if specified operator is logical.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.IsRelational(PX.Common.Parser.Operator)">
            <summary>
            Check if specified operator is relational.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.BinaryCompare(System.Object,System.Object,PX.Common.Parser.DataType,PX.Common.Parser.Operator,System.IFormatProvider)">
            <summary>
            Perform the binary compare of the specified values.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.GetResultType(PX.Common.Parser.Operator,PX.Common.Parser.Operand,PX.Common.Parser.Operand,PX.Common.Parser.DataType@,System.Object@)">
            <summary>
            Get the result type for specified operation.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.AddFunc(PX.Common.Parser.Operand,PX.Common.Parser.Operand,PX.Common.Parser.OperatorContext)">
            <summary>
            Implements the adding operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.SubtractFunc(PX.Common.Parser.Operand,PX.Common.Parser.Operand,PX.Common.Parser.OperatorContext)">
            <summary>
            Implements the subtraction operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.MultiplyFunc(PX.Common.Parser.Operand,PX.Common.Parser.Operand,PX.Common.Parser.OperatorContext)">
            <summary>
            Implements the multiply operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.DivideFunc(PX.Common.Parser.Operand,PX.Common.Parser.Operand,PX.Common.Parser.OperatorContext)">
            <summary>
            Implements the multiply operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.ModuloFunc(PX.Common.Parser.Operand,PX.Common.Parser.Operand,PX.Common.Parser.OperatorContext)">
            <summary>
            Implements the modulo operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.AndFunc(PX.Common.Parser.Operand,PX.Common.Parser.Operand,PX.Common.Parser.OperatorContext)">
            <summary>
            Implements the AND operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.OrFunc(PX.Common.Parser.Operand,PX.Common.Parser.Operand,PX.Common.Parser.OperatorContext)">
            <summary>
            Implements the OR operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.NotFunc(PX.Common.Parser.Operand,PX.Common.Parser.Operand,PX.Common.Parser.OperatorContext)">
            <summary>
            Implements the NOT operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.IsFunc(PX.Common.Parser.Operand,PX.Common.Parser.Operand,PX.Common.Parser.OperatorContext)">
            <summary>
            Implements the IS operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.IsNotFunc(PX.Common.Parser.Operand,PX.Common.Parser.Operand,PX.Common.Parser.OperatorContext)">
            <summary>
            Implements the Is Not operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.EqualToFunc(PX.Common.Parser.Operand,PX.Common.Parser.Operand,PX.Common.Parser.OperatorContext)">
            <summary>
            Implements the Equal operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.NotEqualFunc(PX.Common.Parser.Operand,PX.Common.Parser.Operand,PX.Common.Parser.OperatorContext)">
            <summary>
            Implements the NotEqual operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.GreaterThenFunc(PX.Common.Parser.Operand,PX.Common.Parser.Operand,PX.Common.Parser.OperatorContext)">
            <summary>
            Implements the GreaterThen operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.GreaterOrEqualFunc(PX.Common.Parser.Operand,PX.Common.Parser.Operand,PX.Common.Parser.OperatorContext)">
            <summary>
            Implements the GreaterOrEqual operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.LessThenFunc(PX.Common.Parser.Operand,PX.Common.Parser.Operand,PX.Common.Parser.OperatorContext)">
            <summary>
            Implements the LessThen operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.LessOrEqualFunc(PX.Common.Parser.Operand,PX.Common.Parser.Operand,PX.Common.Parser.OperatorContext)">
            <summary>
            Implements the LessOrEqual operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.NegativeFunc(PX.Common.Parser.Operand,PX.Common.Parser.Operand,PX.Common.Parser.OperatorContext)">
            <summary>
            Implements the unary minus operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.PositiveFunc(PX.Common.Parser.Operand,PX.Common.Parser.Operand,PX.Common.Parser.OperatorContext)">
            <summary>
            Implements the unary plus operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.Operator.InFunc(PX.Common.Parser.Operand,PX.Common.Parser.Operand,PX.Common.Parser.OperatorContext)">
            <summary>
            Implements the IN operator.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.OperatorContext">
            <summary>
            Provides the expression operator context.
            </summary>
        </member>
        <member name="T:PX.Common.Parser.ParserTypeHelper">
            <summary>
            Provide utility function for work with data types.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ParserTypeHelper.GetPrecedence(PX.Common.Parser.DataType)">
            <summary>
            Gets precedence for specified data type.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ParserTypeHelper.GetPrecedenceType(PX.Common.Parser.TypePrecedence)">
            <summary>
            Gets data type from specified type precedence.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ParserTypeHelper.GetDataType(System.Object)">
            <summary>
            Get a type code from specified object.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ParserTypeHelper.GetDataType(System.Type)">
            <summary>
            Get a type code from specified Type.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ParserTypeHelper.GetType(PX.Common.Parser.DataType)">
            <summary>
            Get a Type object for specified type code.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ParserTypeHelper.ToBoolean(System.Object)">
            <summary>
            Converts the value of the specified Object to an equivalent Boolean value.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ParserTypeHelper.ResultType(PX.Common.Parser.DataType,PX.Common.Parser.DataType,System.Boolean,System.Boolean,PX.Common.Parser.Operator)">
            <summary>
            Get the result type for binary operator.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ParserTypeHelper.GetNull(PX.Common.Parser.DataType)">
            <summary>
            Gets correct "null" constant value for the specified data type.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ParserTypeHelper.IsUnknown(System.Object)">
            <summary>
            Gets a value indicating whether the specified value represents an unknown object.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ParserTypeHelper.IsObjectNull(System.Object)">
            <summary>
            Gets a value indicating whether the specified value represents an null object.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ParserTypeHelper.IsUnsigned(PX.Common.Parser.DataType)">
            <summary>
            Gets a value indicating whether the specified type code represents an unsigned numeric type.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ParserTypeHelper.IsSigned(PX.Common.Parser.DataType)">
            <summary>
            Gets a value indicating whether the specified type code represents an signed numeric type.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ParserTypeHelper.IsFloat(PX.Common.Parser.DataType)">
            <summary>
            Gets a value indicating whether the specified type code represents an floating point type.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ParserTypeHelper.IsInteger(PX.Common.Parser.DataType)">
            <summary>
            Gets a value indicating whether the specified type code represents an integer type.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ParserTypeHelper.IsNumeric(PX.Common.Parser.DataType)">
            <summary>
            Gets a value indicating whether the specified type code represents an numeric type.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ParserTypeHelper.IsMixed(PX.Common.Parser.DataType,PX.Common.Parser.DataType)">
            <summary>
            Gets a value indicating whether the specified types has mixed numeric type.
            </summary>
        </member>
        <member name="M:PX.Common.Parser.ParserTypeHelper.IsNullOrEmpty(PX.Common.Parser.DataType)">
            <summary>
            Gets a value indicating whether the specified type code represents Empty or DBNull type.
            </summary>
        </member>
        <member name="T:PX.Common.PdfPrinter.PdfPrinterConfigurationManager">
            <summary>
            Configure registry for AppPool user to use pdf printer 
            </summary>
        </member>
        <member name="M:PX.Common.PdfPrinter.PdfPrinterConfigurationManager.SetDefaultPrinter(System.String,System.String)">
            <summary>
            Setting default printer for printer and disable windows printer managment
            </summary>
            <param name="printerRegistryName">Printe name and params. You can get this information from regkey: Software\Microsoft\Windows NT\CurrentVersion\Devices. Example (Acumatica_PrinterSite_Landscape, winspool,Ne08:)</param>
            <param name="sid">User Security Identifier</param>
            <returns>False if can't edit registry</returns>
        </member>
        <member name="M:PX.Common.PdfPrinter.PdfPrinterConfigurationManager.SetDefaultIEConfiguration(System.String)">
            <summary>
            Setting default IE configuration for printing. Remove header, footer and allow print background
            </summary>
            <param name="sid">User Security Identifier</param>
            <returns>False if can't edit registry</returns>
        </member>
        <member name="M:PX.Common.PdfPrinter.PdfPrinterConfigurationManager.SetIEPageOrientation(System.String,System.Boolean)">
            <summary>
            Setting default page orientation for printing.
            </summary>
            <param name="printerName">Printer name from web.config</param>
        </member>
        <member name="M:PX.Common.PdfPrinter.PrinterWinApiCommands.ChangePrinterLayout(System.String,System.Boolean)">
            <summary>
            based on this demo https://www.codeproject.com/KB/dotnet/NET_Printer_Library.aspx?display=PrintAll
            </summary> 
        </member>
        <member name="M:PX.Common.PdfPrinter.PrinterWinApiCommands.GetPrinterSettings(System.String)">
            <summary>
            TODO: optimize getting printer params (mb get from Win32_PrinterConfiguration)
            </summary>
            <param name="PrinterName"></param>
            <returns></returns>
        </member>
        <member name="T:PX.Common.POP3.Client.Pop3Client">
            <summary>
            POP3 Client. Defined in RFC 1939.
            </summary>
            <example>
            <code>
            
            /*
             To make this code to work, you need to import following namespaces:
             using PX.Common.Mime;
             using PX.Common.POP3.Client; 
             */
            
            using(Pop3Client c = new Pop3Client()){
            	c.Connect("ivx",WellKnownPorts.POP3);
            	c.Authenticate("test","test",true);
            			
            	// Get first message if there is any
            	if(c.Messages.Count > 0){
            		// Do your suff
            		
            		// Parse message
            		Mime m = Mime.Parse(c.Messages[0].MessageToByte());
            		string from = m.MainEntity.From;
            		string subject = m.MainEntity.Subject;			
            		// ... 
            	}		
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3Client.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3Client.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3Client.Disconnect">
            <summary>
            Closes connection to POP3 server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected.</exception>
        </member>
        <member name="T:PX.Common.POP3.Client.Pop3Client.StartTLSDelegate">
            <summary>
            Internal helper method for asynchronous StartTLS method.
            </summary>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3Client.BeginStartTLS(System.AsyncCallback,System.Object)">
            <summary>
            Starts switching to SSL.
            </summary>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected or is authenticated or is already secure connection.</exception>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3Client.EndStartTLS(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous StartTLS request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:PX.Common.POP3.Client.Pop3ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3Client.StartTLS">
            <summary>
            Switches POP3 connection to SSL.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected or is authenticated or is already secure connection.</exception>
            <exception cref="T:PX.Common.POP3.Client.Pop3ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="T:PX.Common.POP3.Client.Pop3Client.AuthenticateDelegate">
            <summary>
            Internal helper method for asynchronous Authenticate method.
            </summary>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3Client.BeginAuthenticate(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts authentication.
            </summary>
            <param name="userName">User login name.</param>
            <param name="password">Password.</param>
            <param name="tryApop"> If true and POP3 server supports APOP, then APOP is used, otherwise normal login used.</param>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected or is already authenticated.</exception>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3Client.EndAuthenticate(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous authentication request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:PX.Common.POP3.Client.Pop3ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3Client.Authenticate(System.String,System.String,System.Boolean)">
            <summary>
            Authenticates user.
            </summary>
            <param name="userName">User login name.</param>
            <param name="password">Password.</param>
            <param name="tryApop"> If true and POP3 server supports APOP, then APOP is used, otherwise normal login used.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected or is already authenticated.</exception>
            <exception cref="T:PX.Common.POP3.Client.Pop3ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="T:PX.Common.POP3.Client.Pop3Client.NoopDelegate">
            <summary>
            Internal helper method for asynchronous Noop method.
            </summary>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3Client.BeginNoop(System.AsyncCallback,System.Object)">
            <summary>
            Starts sending NOOP command to server. This method can be used for keeping connection alive(not timing out).
            </summary>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected.</exception>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3Client.EndNoop(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous Noop request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:PX.Common.POP3.Client.Pop3ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3Client.Noop">
            <summary>
            Send NOOP command to server. This method can be used for keeping connection alive(not timing out).
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected.</exception>
            <exception cref="T:PX.Common.POP3.Client.Pop3ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="T:PX.Common.POP3.Client.Pop3Client.ResetDelegate">
            <summary>
            Internal helper method for asynchronous Reset method.
            </summary>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3Client.BeginReset(System.AsyncCallback,System.Object)">
            <summary>
            Starts resetting session. Messages marked for deletion will be unmarked.
            </summary>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected and authenticated.</exception>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3Client.EndReset(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous reset request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:PX.Common.POP3.Client.Pop3ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3Client.Reset">
            <summary>
            Resets session. Messages marked for deletion will be unmarked.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected and authenticated.</exception>
            <exception cref="T:PX.Common.POP3.Client.Pop3ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3Client.OnConnected">
            <summary>
            This method is called after TCP client has sucessfully connected.
            </summary>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3Client.MarkMessageForDeletion(System.Int32)">
            <summary>
            Marks specified message for deletion.
            </summary>
            <param name="sequenceNumber">Message sequence number.</param>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3Client.GetMessage(System.Int32,System.IO.Stream)">
            <summary>
            Stores specified message to the specified stream.
            </summary>
            <param name="sequenceNumber">Message 1 based sequence number.</param>
            <param name="stream">Stream where to store message.</param>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3Client.GetTopOfMessage(System.Int32,System.IO.Stream,System.Int32)">
            <summary>
            Stores specified message header + specified lines of body to the specified stream.
            </summary>
            <param name="sequenceNumber">Message 1 based sequence number.</param>
            <param name="stream">Stream where to store data.</param>
            <param name="lineCount">Number of lines of message body to get.</param>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3Client.FillMessages">
            <summary>
            Fills messages info.
            </summary>
        </member>
        <member name="P:PX.Common.POP3.Client.Pop3Client.GreetingText">
            <summary>
            Gets greeting text which was sent by POP3 server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and POP3 client is not connected.</exception>
        </member>
        <member name="P:PX.Common.POP3.Client.Pop3Client.ExtenededCapabilities">
            <summary>
            Gets POP3 exteneded capabilities supported by POP3 server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and POP3 client is not connected.</exception>
        </member>
        <member name="P:PX.Common.POP3.Client.Pop3Client.ExtendedCapabilities">
            <summary>
            Gets POP3 exteneded capabilities supported by POP3 server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and POP3 client is not connected.</exception>
        </member>
        <member name="P:PX.Common.POP3.Client.Pop3Client.IsUidlSupported">
            <summary>
            Gets if POP3 server supports UIDL command.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and 
            POP3 client is not connected and authenticated.</exception>
        </member>
        <member name="P:PX.Common.POP3.Client.Pop3Client.Messages">
            <summary>
            Gets messages collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and 
            POP3 client is not connected and authenticated.</exception>
        </member>
        <member name="P:PX.Common.POP3.Client.Pop3Client.AuthenticatedUserIdentity">
            <summary>
            Gets session authenticated user identity, returns null if not authenticated.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and POP3 client is not connected.</exception>
        </member>
        <member name="T:PX.Common.POP3.Client.Pop3ClientException">
            <summary>
            POP3 client exception.
            </summary>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3ClientException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="responseLine">IMAP server response line.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>responseLine</b> is null.</exception>
        </member>
        <member name="P:PX.Common.POP3.Client.Pop3ClientException.StatusCode">
            <summary>
            Gets POP3 server error status code.
            </summary>
        </member>
        <member name="P:PX.Common.POP3.Client.Pop3ClientException.ResponseText">
            <summary>
            Gets POP3 server response text after status code.
            </summary>
        </member>
        <member name="T:PX.Common.POP3.Client.Pop3ClientMessage">
            <summary>
            This class represents POP3 client message.
            </summary>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3ClientMessage.#ctor(PX.Common.POP3.Client.Pop3Client,System.Int32,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="pop3">Owner POP3 client.</param>
            <param name="seqNumber">Message 1 based sequence number.</param>
            <param name="size">Message size in bytes.</param>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3ClientMessage.MarkForDeletion">
            <summary>
            Marks message as deleted.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:PX.Common.POP3.Client.Pop3ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3ClientMessage.HeaderToString">
            <summary>
            Gets message header as string.
            </summary>
            <returns>Returns message header as string.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when message is marked for deletion and this method is accessed.</exception>
            <exception cref="T:PX.Common.POP3.Client.Pop3ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3ClientMessage.HeaderToByte">
            <summary>
            Gets message header as byte[] data.
            </summary>
            <returns>Returns message header as byte[] data.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when message is marked for deletion and this method is accessed.</exception>
            <exception cref="T:PX.Common.POP3.Client.Pop3ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3ClientMessage.HeaderToStream(System.IO.Stream)">
            <summary>
            Stores message header to the specified stream.
            </summary>
            <param name="stream">Stream where to store data.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>stream</b> value is null.</exception>
            <exception cref="T:PX.Common.POP3.Client.Pop3ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3ClientMessage.MessageToByte">
            <summary>
            Gets message as byte[] data.
            </summary>
            <returns>Returns message as byte[] data.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when message is marked for deletion and this method is accessed.</exception>
            <exception cref="T:PX.Common.POP3.Client.Pop3ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3ClientMessage.MessageToStream(System.IO.Stream)">
            <summary>
            Stores message to specified stream.
            </summary>
            <param name="stream">Stream where to store message.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>stream</b> value is null.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when message is marked for deletion and this method is accessed.</exception>
            <exception cref="T:PX.Common.POP3.Client.Pop3ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3ClientMessage.MessageTopLinesToByte(System.Int32)">
            <summary>
            Gets message header + specified number lines of message body.
            </summary>
            <param name="lineCount">Number of lines to get from message body.</param>
            <returns>Returns message header + specified number lines of message body.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when <b>numberOfLines</b> is negative value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when message is marked for deletion and this method is accessed.</exception>
            <exception cref="T:PX.Common.POP3.Client.Pop3ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3ClientMessage.MessageTopLinesToStream(System.IO.Stream,System.Int32)">
            <summary>
            Stores message header + specified number lines of message body to the specified stream.
            </summary>
            <param name="stream">Stream where to store data.</param>
            <param name="lineCount">Number of lines to get from message body.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>stream</b> value is null.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when message is marked for deletion and this method is accessed.</exception>
            <exception cref="T:PX.Common.POP3.Client.Pop3ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3ClientMessage.Dispose">
            <summary>
            Disposes message.
            </summary>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3ClientMessage.SetUID(System.String)">
            <summary>
            Sets message UID value.
            </summary>
            <param name="uid">UID value.</param>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3ClientMessage.SetMarkedForDeletion(System.Boolean)">
            <summary>
            Sets IsMarkedForDeletion flag value.
            </summary>
            <param name="isMarkedForDeletion">New IsMarkedForDeletion value.</param>
        </member>
        <member name="P:PX.Common.POP3.Client.Pop3ClientMessage.IsDisposed">
            <summary>
            Gets if POP3 message is Disposed.
            </summary>
        </member>
        <member name="P:PX.Common.POP3.Client.Pop3ClientMessage.SequenceNumber">
            <summary>
            Gets message 1 based sequence number.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.POP3.Client.Pop3ClientMessage.UID">
            <summary>
            Gets message UID. NOTE: Before accessing this property, check that server supports UIDL command.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when POP3 server doesnt support UIDL command.</exception>
        </member>
        <member name="P:PX.Common.POP3.Client.Pop3ClientMessage.Size">
            <summary>
            Gets message size in bytes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.POP3.Client.Pop3ClientMessage.IsMarkedForDeletion">
            <summary>
            Gets if message is marked for deletion.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.POP3.Client.Pop3ClientMessage.Exception">
            <summary>
            Exceptions occured
            </summary>
        </member>
        <member name="T:PX.Common.POP3.Client.Pop3ClientMessageCollection">
            <summary>
            This class represents POP3 client messages collection.
            </summary>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3ClientMessageCollection.#ctor(PX.Common.POP3.Client.Pop3Client)">
            <summary>
            Default constructor.
            </summary>
            <param name="pop3">Owner POP3 client.</param>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3ClientMessageCollection.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3ClientMessageCollection.Add(System.Int32)">
            <summary>
            Adds new message to messages collection.
            </summary>
            <param name="size">Message size in bytes.</param>
        </member>
        <member name="M:PX.Common.POP3.Client.Pop3ClientMessageCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns>Returns IEnumerator interface.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.POP3.Client.Pop3ClientMessageCollection.TotalSize">
            <summary>
            Gets total size of messages, messages marked for deletion are included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.POP3.Client.Pop3ClientMessageCollection.Count">
            <summary>
            Gets number of messages in the collection, messages marked for deletion are included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.POP3.Client.Pop3ClientMessageCollection.Item(System.Int32)">
            <summary>
            Gets message from specified index.
            </summary>
            <param name="index">Message zero based index in the collection.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when index is out of range.</exception>
        </member>
        <member name="P:PX.Common.POP3.Client.Pop3ClientMessageCollection.Item(System.String)">
            <summary>
            Gets message with specified UID value.
            </summary>
            <param name="uid">Message UID value.</param>
            <returns>Returns message or null if message doesn't exist.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when POP3 server doesn't support UIDL.</exception>
        </member>
        <member name="T:PX.Common.POP3.Pop3ExtendedCapabilities">
            <summary>
            This class holds known POP3 extended capabilities. Defined in http://www.iana.org/assignments/pop3-extension-mechanism.
            </summary>
        </member>
        <member name="F:PX.Common.POP3.Pop3ExtendedCapabilities.TOP">
            <summary>
            The TOP capability indicates the optional TOP command is available. Defined in RFC 2449.
            </summary>
        </member>
        <member name="F:PX.Common.POP3.Pop3ExtendedCapabilities.USER">
            <summary>
            The USER capability indicates that the USER and PASS commands are supported. Defined in RFC 2449.
            </summary>
        </member>
        <member name="F:PX.Common.POP3.Pop3ExtendedCapabilities.SASL">
            <summary>
            The SASL capability indicates that the AUTH command is available and that it supports an optional base64 
            encoded second argument for an initial client response as described in the SASL specification. Defined in RFC 2449.
            </summary>
        </member>
        <member name="F:PX.Common.POP3.Pop3ExtendedCapabilities.RESP_CODES">
            <summary>
            The RESP-CODES capability indicates that any response text issued by this server which begins with an open 
            square bracket ("[") is an extended response code. Defined in RFC 2449.
            </summary>
        </member>
        <member name="F:PX.Common.POP3.Pop3ExtendedCapabilities.LOGIN_DELAY">
            <summary>
            LOGIN-DELAY capability. Defined in RFC 2449.
            </summary>
        </member>
        <member name="F:PX.Common.POP3.Pop3ExtendedCapabilities.PIPELINING">
            <summary>
            The PIPELINING capability indicates the server is capable of accepting multiple commands at a time; 
            the client does not have to wait for the response to a command before issuing a subsequent command.
             Defined in RFC 2449.
            </summary>
        </member>
        <member name="F:PX.Common.POP3.Pop3ExtendedCapabilities.EXPIRE">
            <summary>
            EXPIRE capability. Defined in RFC 2449.
            </summary>
        </member>
        <member name="F:PX.Common.POP3.Pop3ExtendedCapabilities.UIDL">
            <summary>
            UIDL command is supported. Defined in RFC 2449.
            </summary>
        </member>
        <member name="F:PX.Common.POP3.Pop3ExtendedCapabilities.STLS">
            <summary>
            STLS(start TLS) command supported.  Defined in RFC 2449.
            </summary>
        </member>
        <member name="P:PX.Common.PXHostingEnvironment.IsHosted">
            <summary>
            Gets a value indicating whether the current application domain is being hosted
            by an <see cref="T:System.Web.Hosting.ApplicationManager"/> object, and the domain was not internally created
            from code for service purposes.
            </summary>
            <remarks>
            <para>Some parts of the system (like CustomizationProjectBuilder) may create an application domain from the code
            by using <see cref="M:System.Web.Hosting.ApplicationHost.CreateApplicationHost(System.Type,System.String,System.String)"/> method.</para>
            <para>In that case, <see cref="P:System.Web.Hosting.HostingEnvironment.IsHosted"/> is true but the list of running applications
            is empty because the new application is created with <see cref="F:System.Web.Hosting.HostingEnvironmentFlags.HideFromAppManager"/> flag.</para>
            </remarks>
        </member>
        <member name="M:PX.Common.PXReflectionSerializer.CloneSequence``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a sequence where each element was cloned by <see cref="M:PX.Common.PXReflectionSerializer.Clone``1(``0)"/> method from corresponding one of the source sequence
            </summary>
        </member>
        <member name="T:PX.Common.SparseMemoryStream">
            <summary>
            SparseMemoryStream is a re-implementation of MemoryStream that uses a dynamic list of byte arrays as a backing store, instead of a single byte array, the allocation
            of which will fail for relatively small streams as it requires contiguous memory.
            </summary>
        </member>
        <member name="P:PX.Common.SparseMemoryStream.block">
            <summary>
            The block of memory currently addressed by Position
            </summary>
        </member>
        <member name="P:PX.Common.SparseMemoryStream.blockId">
            <summary>
            The id of the block currently addressed by Position
            </summary>
        </member>
        <member name="P:PX.Common.SparseMemoryStream.blockOffset">
            <summary>
            The offset of the byte currently addressed by Position, into the block that contains it
            </summary>
        </member>
        <member name="M:PX.Common.SparseMemoryStream.ToArray">
            <summary>
            Returns the entire content of the stream as a byte array. This is not safe because the call to new byte[] may 
            fail if the stream is large enough. Where possible use methods which operate on streams directly instead.
            </summary>
            <returns>A byte[] containing the current data in the stream</returns>
        </member>
        <member name="M:PX.Common.SparseMemoryStream.ReadFrom(System.IO.Stream,System.Int64)">
            <summary>
            Reads length bytes from source into the this instance at the current position.
            </summary>
            <param name="source">The stream containing the data to copy</param>
            <param name="length">The number of bytes to copy</param>
        </member>
        <member name="M:PX.Common.SparseMemoryStream.WriteTo(System.IO.Stream)">
            <summary>
            Writes the entire stream into destination, regardless of Position, which remains unchanged.
            </summary>
            <param name="destination">The stream to write the content of this stream to</param>
        </member>
        <member name="T:PX.Common.PXReaderWriterScope">
            this class should not be used with recursive lock
        </member>
        <member name="M:PX.Common.PXUrl.IngoreAllQueryParameters(System.String)">
            <summary>
            Removes all the query parameters from the url.
            </summary>
        </member>
        <member name="M:PX.Common.PXUrl.QuoteString(System.String)">
            <summary>
            Encode the specified string value for JavaScript.
            </summary>
        </member>
        <member name="M:PX.Common.PXUrl.GetWebsiteUrl(System.Uri,System.Func{System.String,System.String})">
            <summary>
            Returns url for current website in format http(s)://hostname/ 
            This url can be used in external links.
            </summary>
            <param name="requestUrl">Request URL</param>
            <param name="headerProvider">Header provider. Must return <c>null</c> if header isn't found</param>
        </member>
        <member name="M:PX.Common.PXUrl.ToExternalUri(System.Uri,System.Func{System.String,System.String})">
            <summary>
            Returns new Uri for the current website that can be used in external links.
            </summary>
        </member>
        <member name="T:PX.Common.Range_long">
            <summary>
            This class represent 2-point <b>long</b> value range.
            </summary>
        </member>
        <member name="M:PX.Common.Range_long.#ctor(System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Start/End value.</param>
        </member>
        <member name="M:PX.Common.Range_long.#ctor(System.Int64,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="start">Range start value.</param>
            <param name="end">Range end value.</param>
        </member>
        <member name="M:PX.Common.Range_long.Contains(System.Int64)">
            <summary>
            Gets if the specified value is within range.
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns true if specified value is within range, otherwise false.</returns>
        </member>
        <member name="P:PX.Common.Range_long.Start">
            <summary>
            Gets range start.
            </summary>
        </member>
        <member name="P:PX.Common.Range_long.End">
            <summary>
            Gets range end.
            </summary>
        </member>
        <member name="T:PX.Common.Sign">
            <summary>
            Represents a sign, i.e. + or -
            </summary>
        </member>
        <member name="P:PX.Common.Sign.Plus">
            <summary>
            Represents the + sign
            </summary>
        </member>
        <member name="P:PX.Common.Sign.Minus">
            <summary>
            Represents the - sign
            </summary>
        </member>
        <member name="T:PX.Common.SMTP.Client.SmtpClient">
            <summary>
            This class implements SMTP client. Defined in RFC 5321.
            </summary>
            <example>
            Simple way:
            <code>
            /*
             To make this code to work, you need to import following namespaces:
             using PX.Common.SMTP.Client; 
            */
            
            // You can send any valid SMTP message here, from disk,memory, ... or
            // you can use PX.Common.Mail classes to compose valid SMTP mail message.
            
            // SMTP_Client.QuickSendSmartHost(...
            or
            // SMTP_Client.QuickSend(...
            </code>
            
            Advanced way:
            <code> 
            /*
             To make this code to work, you need to import following namespaces:
             using PX.Common.SMTP.Client; 
            */
            
            using(SMTP_Client smtp = new SMTP_Client()){      
                // You can use Dns_Client.GetEmailHosts(... to get target recipient SMTP hosts for Connect method.
            	smtp.Connect("hostName",WellKnownPorts.SMTP); 
            	smtp.EhloHelo("mail.domain.com");
                // Authenticate if target server requires.
                // smtp.Authenticate("user","password");
                smtp.MailFrom("sender@domain.com");
                // Repeat this for all recipients.
                smtp.RcptTo("to@domain.com");
            
                // Send message to server.
                // You can send any valid SMTP message here, from disk,memory, ... or
                // you can use PX.Common.Mail classes to compose valid SMTP mail message.
                // smtp.SendMessage(.... .
                
                smtp.Disconnect();
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.Disconnect">
            <summary>
            Closes connection to SMTP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.Disconnect(System.Boolean)">
            <summary>
            Closes connection to SMTP server.
            </summary>
            <param name="sendQuit">If true QUIT command is sent to SMTP server.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.EhloHelo(System.String)">
            <summary>
            Sends EHLO/HELO command to SMTP server.
            </summary>
            <param name="hostName">Local host DNS name.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hostName</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:PX.Common.SMTP.Client.SmtpClientException">Is raised when SMTP server returns error.</exception>
            <remarks>NOTE: EHLO command will reset all SMTP session state data.</remarks>
        </member>
        <member name="T:PX.Common.SMTP.Client.SmtpClient.EhloHeloAsyncOP">
            <summary>
            This class represents <see cref="M:PX.Common.SMTP.Client.SmtpClient.EhloHeloAsync(PX.Common.SMTP.Client.SmtpClient.EhloHeloAsyncOP)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.EhloHeloAsyncOP.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="hostName">Local host DNS name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hostName</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.EhloHeloAsyncOP.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.EhloHeloAsyncOP.Start(PX.Common.SMTP.Client.SmtpClient)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner SMTP client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.EhloHeloAsyncOP.SetState(PX.Common.AsyncOP_State)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.EhloHeloAsyncOP.EhloCommandSendingCompleted(System.IAsyncResult)">
            <summary>
            Is called when EHLO command sending has finished.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.EhloHeloAsyncOP.EhloReadResponseCompleted(PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP)">
            <summary>
            Is called when SMTP server EHLO command response reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.EhloHeloAsyncOP.HeloCommandSendingCompleted(System.IAsyncResult)">
            <summary>
            Is called when HELO command sending has finished.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.EhloHeloAsyncOP.HeloReadResponseCompleted(PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP)">
            <summary>
            Is called when SMTP server HELO command response reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.EhloHeloAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.EhloHeloAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.EhloHeloAsyncOP.SmptReplyLines">
            <summary>
            Gets SMTP server reply-lines.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="E:PX.Common.SMTP.Client.SmtpClient.EhloHeloAsyncOP.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.EhloHeloAsyncOP.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.EhloHeloAsync(PX.Common.SMTP.Client.SmtpClient.EhloHeloAsyncOP)">
            <summary>
            Starts sending EHLO/HELO command to SMTP server.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:PX.Common.SMTP.Client.SmtpClient.EhloHeloAsyncOP.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
            <remarks>NOTE: EHLO command will reset all SMTP session state data.</remarks>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.StartTLS">
            <summary>
            Sends STARTTLS command to SMTP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected or is already secure connection.</exception>
            <exception cref="T:PX.Common.SMTP.Client.SmtpClientException">Is raised when SMTP server returns error.</exception>
            <remarks>After sucessfult STARTTLS all SMTP session data(EHLO,MAIL FROM, ....) will be reset.
            If unknwon(not SMTP error) error happens during STARTTLS negotiation, SMTP client should disconnect.</remarks>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.StartTLS(System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Sends STARTTLS command to SMTP server.
            </summary>
            <param name="certCallback">SSL server certificate validation callback. Value null means any certificate is accepted.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected or is already secure connection.</exception>
            <exception cref="T:PX.Common.SMTP.Client.SmtpClientException">Is raised when SMTP server returns error.</exception>
            <remarks>After sucessfult STARTTLS all SMTP session data(EHLO,MAIL FROM, ....) will be reset.
            If unknwon(not SMTP error) error happens during STARTTLS negotiation, SMTP client should disconnect.</remarks>
        </member>
        <member name="T:PX.Common.SMTP.Client.SmtpClient.StartTlsAsyncOP">
            <summary>
            This class represents <see cref="M:PX.Common.SMTP.Client.SmtpClient.StartTlsAsync(PX.Common.SMTP.Client.SmtpClient.StartTlsAsyncOP)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.StartTlsAsyncOP.#ctor(System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Default constructor.
            </summary>
            <param name="certCallback">SSL server certificate validation callback. Value null means any certificate is accepted.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.StartTlsAsyncOP.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.StartTlsAsyncOP.Start(PX.Common.SMTP.Client.SmtpClient)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner SMTP client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.StartTlsAsyncOP.SetState(PX.Common.AsyncOP_State)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.StartTlsAsyncOP.StartTlsCommandSendingCompleted(System.IAsyncResult)">
            <summary>
            Is called when STARTTLS command sending has finished.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.StartTlsAsyncOP.StartTlsReadResponseCompleted(PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP)">
            <summary>
            Is called when STARTTLS command response reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.StartTlsAsyncOP.SwitchToSecureCompleted(PX.Common.TCP.TcpClient.SwitchToSecureAsyncOP)">
            <summary>
            Is called when TLS handshake has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.StartTlsAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.StartTlsAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="E:PX.Common.SMTP.Client.SmtpClient.StartTlsAsyncOP.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.StartTlsAsyncOP.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.StartTlsAsync(PX.Common.SMTP.Client.SmtpClient.StartTlsAsyncOP)">
            <summary>
            Starts sending STARTTLS command to SMTP server.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:PX.Common.SMTP.Client.SmtpClient.StartTlsAsyncOP.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected or connection is already secure.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
            <remarks>After sucessfult STARTTLS all SMTP session data(EHLO,MAIL FROM, ....) will be reset.
            If unknwon(not SMTP error) error happens during STARTTLS negotiation, SMTP client should disconnect.</remarks>
        </member>
        <member name="T:PX.Common.SMTP.Client.SmtpClient.AuthenticateDelegate">
            <summary>
            Internal helper method for asynchronous Authenticate method.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.BeginAuthenticate(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Starts authentication.
            </summary>
            <param name="userName">User login name.</param>
            <param name="password">Password.</param>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected or is already authenticated.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.EndAuthenticate(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous authentication request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:PX.Common.SMTP.Client.SmtpClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.Authenticate(System.String,System.String)">
            <summary>
            Authenticates user. Authenticate method chooses strongest possible authentication method supported by server, 
            preference order DIGEST-MD5 -> CRAM-MD5 -> LOGIN.
            </summary>
            <param name="userName">User login name.</param>
            <param name="password">Password.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected or is already authenticated.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> is null.</exception>
            <exception cref="T:PX.Common.SMTP.Client.SmtpClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.MailFrom(System.String,System.Int64)">
            <summary>
            Sends MAIL command to SMTP server.
            </summary>
            <param name="from">Sender email address. Value null means no sender info.</param>
            <param name="messageSize">Message size in bytes. Value -1 means that message size unknown.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:PX.Common.SMTP.Client.SmtpClientException">Is raised when SMTP server returns error.</exception>
            <remarks>Before using <b>ret</b> or <b>envid</b> arguments, check that remote server supports(SMTP_Client.EsmtpFeatures) SMTP DSN extention.</remarks>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.MailFrom(System.String,System.Int64,PX.Common.SMTP.DsnRet,System.String)">
            <summary>
            Sends MAIL command to SMTP server.
            </summary>
            <param name="from">Sender email address. Value null means no sender info.</param>
            <param name="messageSize">Message size in bytes. Value -1 means that message size unknown.</param>
            <param name="ret">Delivery satus notification(DSN) RET value. For more info see RFC 3461.</param>
            <param name="envid">Delivery satus notification(DSN) ENVID value. Value null means not specified. For more info see RFC 3461.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:PX.Common.SMTP.Client.SmtpClientException">Is raised when SMTP server returns error.</exception>
            <remarks>Before using <b>ret</b> or <b>envid</b> arguments, check that remote server supports(SMTP_Client.EsmtpFeatures) SMTP DSN extention.</remarks>
        </member>
        <member name="T:PX.Common.SMTP.Client.SmtpClient.MailFromAsyncOP">
            <summary>
            This class represents <see cref="M:PX.Common.SMTP.Client.SmtpClient.MailFromAsync(PX.Common.SMTP.Client.SmtpClient.MailFromAsyncOP)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.MailFromAsyncOP.#ctor(System.String,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="from">Sender email address. Value null means no sender info.</param>
            <param name="messageSize">Message size in bytes. Value -1 means that message size unknown.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.MailFromAsyncOP.#ctor(System.String,System.Int64,PX.Common.SMTP.DsnRet,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="from">Sender email address. Value null means no sender info.</param>
            <param name="messageSize">Message size in bytes. Value -1 means that message size unknown.</param>
            <param name="ret">Delivery satus notification(DSN) RET value. For more info see RFC 3461.</param>
            <param name="envid">Delivery satus notification(DSN) ENVID value. Value null means not specified. For more info see RFC 3461.</param>
            <remarks>Before using <b>ret</b> or <b>envid</b> arguments, check that remote server supports(SMTP_Client.EsmtpFeatures) SMTP DSN extention.</remarks>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.MailFromAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.MailFromAsyncOP.Start(PX.Common.SMTP.Client.SmtpClient)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner SMTP client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.MailFromAsyncOP.SetState(PX.Common.AsyncOP_State)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.MailFromAsyncOP.MailCommandSendingCompleted(System.IAsyncResult)">
            <summary>
            Is called when MAIL command sending has finished.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.MailFromAsyncOP.MailReadResponseCompleted(PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP)">
            <summary>
            Is called when SMTP server MAIL command response reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.MailFromAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.MailFromAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="E:PX.Common.SMTP.Client.SmtpClient.MailFromAsyncOP.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.MailFromAsyncOP.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.MailFromAsync(PX.Common.SMTP.Client.SmtpClient.MailFromAsyncOP)">
            <summary>
            Starts sending MAIL command to SMTP server.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:PX.Common.SMTP.Client.SmtpClient.MailFromAsyncOP.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
            <remarks>Before using <b>ret</b> or <b>envid</b> arguments, check that remote server supports(SMTP_Client.EsmtpFeatures) SMTP DSN extention.</remarks>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.RcptTo(System.String)">
            <summary>
            Sends RCPT TO: command to SMTP server.
            </summary>
            <param name="to">Recipient email address.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:PX.Common.SMTP.Client.SmtpClientException">Is raised when SMTP server returns error.</exception>
            <remarks>Before using <b>notify</b> or <b>orcpt</b> arguments, check that remote server supports(SMTP_Client.EsmtpFeatures) SMTP DSN extention.</remarks>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.RcptTo(System.String,PX.Common.SMTP.DsnNotify,System.String)">
            <summary>
            Sends RCPT TO: command to SMTP server.
            </summary>
            <param name="to">Recipient email address.</param>
            <param name="notify">Delivery satus notification(DSN) NOTIFY value. For more info see RFC 3461.</param>
            <param name="orcpt">Delivery satus notification(DSN) ORCPT value. Value null means not specified. For more info see RFC 3461.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:PX.Common.SMTP.Client.SmtpClientException">Is raised when SMTP server returns error.</exception>
            <remarks>Before using <b>notify</b> or <b>orcpt</b> arguments, check that remote server supports(SMTP_Client.EsmtpFeatures) SMTP DSN extention.</remarks>
        </member>
        <member name="T:PX.Common.SMTP.Client.SmtpClient.RcptToAsyncOP">
            <summary>
            This class represents <see cref="M:PX.Common.SMTP.Client.SmtpClient.RcptToAsync(PX.Common.SMTP.Client.SmtpClient.RcptToAsyncOP)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.RcptToAsyncOP.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="to">Recipient email address.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>to</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.RcptToAsyncOP.#ctor(System.String,PX.Common.SMTP.DsnNotify,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="to">Recipient email address.</param>
            <param name="notify">Delivery satus notification(DSN) NOTIFY value. For more info see RFC 3461.</param>
            <param name="orcpt">Delivery satus notification(DSN) ORCPT value. Value null means not specified. For more info see RFC 3461.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>to</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.RcptToAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.RcptToAsyncOP.Start(PX.Common.SMTP.Client.SmtpClient)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner SMTP client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.RcptToAsyncOP.SetState(PX.Common.AsyncOP_State)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.RcptToAsyncOP.RcptCommandSendingCompleted(System.IAsyncResult)">
            <summary>
            Is called when RCPT command sending has finished.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.RcptToAsyncOP.RcptReadResponseCompleted(PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP)">
            <summary>
            Is called when SMTP server RCPT command response reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.RcptToAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.RcptToAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="E:PX.Common.SMTP.Client.SmtpClient.RcptToAsyncOP.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.RcptToAsyncOP.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.RcptToAsync(PX.Common.SMTP.Client.SmtpClient.RcptToAsyncOP)">
            <summary>
            Starts sending RCPT command to SMTP server.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:PX.Common.SMTP.Client.SmtpClient.RcptToAsyncOP.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
            <remarks>Before using <b>notify</b> or <b>orcpt</b> arguments, check that remote server supports(SMTP_Client.EsmtpFeatures) SMTP DSN extention.</remarks>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.SendMessage(System.IO.Stream)">
            <summary>
            Sends raw message to SMTP server.
            </summary>
            <param name="stream">Message stream. Sending starts from stream current position.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:PX.Common.SMTP.Client.SmtpClientException">Is raised when SMTP server returns error.</exception>
            <remarks>The stream must contain data in MIME format, other formats normally are rejected by SMTP server.</remarks>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.SendMessage(System.IO.Stream,System.Boolean)">
            <summary>
            Sends raw message to SMTP server.
            </summary>
            <param name="stream">Message stream. Sending starts from stream current position.</param>
            <param name="useBdatIfPossibe">Specifies if BDAT command is used to send message, if remote server supports it.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:PX.Common.SMTP.Client.SmtpClientException">Is raised when SMTP server returns error.</exception>
            <remarks>The stream must contain data in MIME format, other formats normally are rejected by SMTP server.</remarks>
        </member>
        <member name="T:PX.Common.SMTP.Client.SmtpClient.SendMessageAsyncOP">
            <summary>
            This class represents <see cref="M:PX.Common.SMTP.Client.SmtpClient.SendMessageAsync(PX.Common.SMTP.Client.SmtpClient.SendMessageAsyncOP)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.SendMessageAsyncOP.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Message stream. Message sending starts from <b>stream</b> current position and all stream data will be sent.</param>
            <param name="useBdatIfPossibe">Specifies if BDAT command is used to send message, if remote server supports it.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.SendMessageAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.SendMessageAsyncOP.Start(PX.Common.SMTP.Client.SmtpClient)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner SMTP client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.SendMessageAsyncOP.SetState(PX.Common.AsyncOP_State)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.SendMessageAsyncOP.BdatChunkReadingCompleted(System.IAsyncResult)">
            <summary>
            Is called when message data block for BDAT reading has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.SendMessageAsyncOP.BdatCommandSendingCompleted(System.IAsyncResult)">
            <summary>
            Is called when BDAT command sending has finished.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.SendMessageAsyncOP.BdatReadResponseCompleted(PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP)">
            <summary>
            Is called when SMTP server BDAT command response reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.SendMessageAsyncOP.DataCommandSendingCompleted(System.IAsyncResult)">
            <summary>
            Is called when DATA command sending has finished.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.SendMessageAsyncOP.DataReadResponseCompleted(PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP)">
            <summary>
            Is called when SMTP server DATA command initial response reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.SendMessageAsyncOP.DataMsgSendingCompleted(PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP)">
            <summary>
            Is called when DATA command message sending has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.SendMessageAsyncOP.DataReadFinalResponseCompleted(PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP)">
            <summary>
            Is called when SMTP server DATA command final response reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.SendMessageAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.SendMessageAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="E:PX.Common.SMTP.Client.SmtpClient.SendMessageAsyncOP.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.SendMessageAsyncOP.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.SendMessageAsync(PX.Common.SMTP.Client.SmtpClient.SendMessageAsyncOP)">
            <summary>
            Starts sending message to SMTP server.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:PX.Common.SMTP.Client.SmtpClient.SendMessageAsyncOP.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.Rset">
            <summary>
            Send RSET command to server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:PX.Common.SMTP.Client.SmtpClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="T:PX.Common.SMTP.Client.SmtpClient.RsetAsyncOP">
            <summary>
            This class represents <see cref="M:PX.Common.SMTP.Client.SmtpClient.RsetAsync(PX.Common.SMTP.Client.SmtpClient.RsetAsyncOP)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.RsetAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.RsetAsyncOP.Start(PX.Common.SMTP.Client.SmtpClient)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner SMTP client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.RsetAsyncOP.SetState(PX.Common.AsyncOP_State)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.RsetAsyncOP.RsetCommandSendingCompleted(System.IAsyncResult)">
            <summary>
            Is called when RSET command sending has finished.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.RsetAsyncOP.RsetReadResponseCompleted(PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP)">
            <summary>
            Is called when SMTP server RSET command response reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.RsetAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.RsetAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="E:PX.Common.SMTP.Client.SmtpClient.RsetAsyncOP.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.RsetAsyncOP.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.RsetAsync(PX.Common.SMTP.Client.SmtpClient.RsetAsyncOP)">
            <summary>
            Starts sending RSET command to SMTP server.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:PX.Common.SMTP.Client.SmtpClient.RsetAsyncOP.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.Noop">
            <summary>
            Send NOOP command to server. This method can be used for keeping connection alive(not timing out).
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:PX.Common.SMTP.Client.SmtpClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="T:PX.Common.SMTP.Client.SmtpClient.NoopAsyncOP">
            <summary>
            This class represents <see cref="M:PX.Common.SMTP.Client.SmtpClient.NoopAsync(PX.Common.SMTP.Client.SmtpClient.NoopAsyncOP)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.NoopAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.NoopAsyncOP.Start(PX.Common.SMTP.Client.SmtpClient)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner SMTP client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.NoopAsyncOP.SetState(PX.Common.AsyncOP_State)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.NoopAsyncOP.NoopCommandSendingCompleted(System.IAsyncResult)">
            <summary>
            Is called when NOOP command sending has finished.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.NoopAsyncOP.NoopReadResponseCompleted(PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP)">
            <summary>
            Is called when NOOP command response reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.NoopAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.NoopAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="E:PX.Common.SMTP.Client.SmtpClient.NoopAsyncOP.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.NoopAsyncOP.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.NoopAsync(PX.Common.SMTP.Client.SmtpClient.NoopAsyncOP)">
            <summary>
            Starts sending NOOP command to SMTP server. This method can be used for keeping connection alive(not timing out).
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:PX.Common.SMTP.Client.SmtpClient.NoopAsyncOP.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.OnConnected(PX.Common.TCP.TcpClient.CompleteConnectCallback)">
            <summary>
            This method is called when TCP client has sucessfully connected.
            </summary>
            <param name="callback">Callback to be called to complete connect operation.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.ReadServerGreetingCompleted(PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP,PX.Common.TCP.TcpClient.CompleteConnectCallback)">
            <summary>
            Is called when SMTP server greeting reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <param name="connectCallback">Callback to be called to complete connect operation.</param>
        </member>
        <member name="T:PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP">
            <summary>
            This class represents <see cref="M:PX.Common.SMTP.Client.SmtpClient.ReadResponseAsync(PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP.Start(PX.Common.SMTP.Client.SmtpClient)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner SMTP client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP.SetState(PX.Common.AsyncOP_State)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP.ReadLineCompleted(PX.Common.IO.SmartStream.ReadLineAsyncOP)">
            <summary>
            Is called when read line has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if multiline response has more response lines.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP.SmptReplyLines">
            <summary>
            Gets SMTP server reply-lines.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="E:PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClient.ReadResponseAsync(PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP)">
            <summary>
            Reads SMTP server single or multiline response.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:PX.Common.SMTP.Client.SmtpClient.ReadResponseAsyncOP.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.LocalHostName">
            <summary>
            Gets or sets host name which is reported to SMTP server. If value null, then local computer name is used.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and SMTP client is connected.</exception>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.RemoteHostName">
            <summary>
            Gets SMTP server host name which it reported to us.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and SMTP client is not connected.</exception>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.GreetingText">
            <summary>
            Gets greeting text which was sent by SMTP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and SMTP client is not connected.</exception>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.IsEsmtpSupported">
            <summary>
            Gets if connected SMTP server suports ESMTP.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and SMTP client is not connected.</exception>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.EsmtpFeatures">
            <summary>
            Gets what ESMTP features are supported by connected SMTP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and SMTP client is not connected.</exception>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.SaslAuthMethods">
            <summary>
            Gets SMTP server supported SASL authentication method.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and SMTP client is not connected.</exception>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.MaxAllowedMessageSize">
            <summary>
            Gets maximum message size in bytes what SMTP server accepts. Value null means not known.
            </summary>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClient.AuthenticatedUserIdentity">
            <summary>
            Gets session authenticated user identity, returns null if not authenticated.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and SMTP client is not connected.</exception>
        </member>
        <member name="T:PX.Common.SMTP.Client.SmtpClientException">
            <summary>
            SMTP client exception.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClientException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="responseLine">SMTP server response line.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>responseLine</b> is null.</exception>
        </member>
        <member name="M:PX.Common.SMTP.Client.SmtpClientException.#ctor(PX.Common.SMTP.SmptReplyLine[])">
            <summary>
            Default constructor.
            </summary>
            <param name="smptReplyLines">SMTP server error reply lines.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>replyLines</b> is null reference.</exception>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClientException.StatusCode">
            <summary>
            Gets SMTP status code.
            </summary>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClientException.ResponseText">
            <summary>
            Gets SMTP server response text after status code.
            </summary>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClientException.SmptReplyLines">
            <summary>
            Gets SMTP server error reply lines.
            </summary>
        </member>
        <member name="P:PX.Common.SMTP.Client.SmtpClientException.IsPermanentError">
            <summary>
            Gets if it is permanent SMTP(5xx) error.
            </summary>
        </member>
        <member name="T:PX.Common.SMTP.DsnNotify">
            <summary>
            This value implements SMTP Notify value. Defined in RFC 3461.
            </summary>
            <remarks>Values Success,Failure,Delay may be mixed if NotSpecified or Never flag is not set.</remarks>
        </member>
        <member name="F:PX.Common.SMTP.DsnNotify.NotSpecified">
            <summary>
            Notify value not specified.
            </summary>
            <remarks>
            For compatibility with SMTP clients that do not use the NOTIFY
            facility, the absence of a NOTIFY parameter in a RCPT command may be
            interpreted as either NOTIFY=FAILURE or NOTIFY=FAILURE,DELAY.
            </remarks>
        </member>
        <member name="F:PX.Common.SMTP.DsnNotify.Never">
            <summary>
            DSN should not be returned to the sender under any conditions.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.DsnNotify.Success">
            <summary>
            DSN should be sent on successful delivery.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.DsnNotify.Failure">
            <summary>
            DSN should be sent on delivery failure.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.DsnNotify.Delay">
            <summary>
            DSN should be sent on delayed delivery.
            </summary>
        </member>
        <member name="T:PX.Common.SMTP.DsnRet">
            <summary>
            This value represents DSN RET value. Defined in RFC 3461 4.3.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.DsnRet.NotSpecified">
            <summary>
            Value not specified, server will choose default type.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.DsnRet.FullMessage">
            <summary>
            Requests that the entire message be returned in any "failed"
            Delivery Status Notification issued for this recipient.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.DsnRet.Headers">
            <summary>
            Requests that only the headers of the message be returned.
            </summary>
        </member>
        <member name="T:PX.Common.SMTP.SmptReplyLine">
            <summary>
            This class represent s SMTP server reply-line. Defined in RFC 5321 4.2.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.SmptReplyLine.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="replyCode">SMTP server reply code.</param>
            <param name="text">SMTP server reply text.</param>
            <param name="isLastLine">Specifies if this line is last line in response.</param>
        </member>
        <member name="M:PX.Common.SMTP.SmptReplyLine.Parse(System.String)">
            <summary>
            Parses SMTP reply-line from 
            </summary>
            <param name="line">SMTP server reply-line.</param>
            <returns>Returns parsed SMTP server reply-line.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>line</b> is null reference.</exception>
            <exception cref="T:PX.Common.ParseException">Is raised when reply-line parsing fails.</exception>
        </member>
        <member name="M:PX.Common.SMTP.SmptReplyLine.ToString">
            <summary>
            Returns this as SMTP server <b>reply-line</b>.
            </summary>
            <returns>Returns this as SMTP server <b>reply-line</b>.</returns>
        </member>
        <member name="P:PX.Common.SMTP.SmptReplyLine.ReplyCode">
            <summary>
            Gets SMTP server reply code.
            </summary>
        </member>
        <member name="P:PX.Common.SMTP.SmptReplyLine.Text">
            <summary>
            Gets SMTP server relpy text.
            </summary>
        </member>
        <member name="P:PX.Common.SMTP.SmptReplyLine.IsLastLine">
            <summary>
            Gets if this is last reply line.
            </summary>
        </member>
        <member name="T:PX.Common.SMTP.SmptServiceExtensions">
            <summary>
             This class holds known SMTP service extensions. Defined in http://www.iana.org/assignments/mail-parameters.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.SEND">
            <summary>
            Send as mail. Defined in RFC RFC 821.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.SOML">
            <summary>
            Send as mail or terminal. Defined in RFC 821.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.SAML">
            <summary>
            Send as mail and terminal. Defined in RFC 821.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.EXPN">
            <summary>
            Expand the mailing list. Defined in RFC 821,
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.HELP">
            <summary>
            Supply helpful information. Defined in RFC 821.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.TURN">
            <summary>
            Turn the operation around. Defined in RFC 821.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions._8BITMIME">
            <summary>
            Use 8-bit data. Defined in RFC 1652.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.SIZE">
            <summary>
            Message size declaration. Defined in RFC 1870.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.CHUNKING">
            <summary>
            Chunking. Defined in RFC 3030.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.BINARYMIME">
            <summary>
            Binary MIME. Defined in RFC 3030.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.CHECKPOINT">
            <summary>
            Checkpoint/Restart. Defined in RFC 1845.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.PIPELINING">
            <summary>
            Command Pipelining. Defined in RFC 2920.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.DSN">
            <summary>
            Delivery Status Notification. Defined in RFC 1891.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.ETRN">
            <summary>
            Extended Turn. Defined in RFC 1985.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.ENHANCEDSTATUSCODES">
            <summary>
            Enhanced Status Codes. Defined in RFC 2034.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.STARTTLS">
            <summary>
            Start TLS. Defined in RFC 3207.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.NO_SOLICITING">
            <summary>
            Notification of no soliciting. Defined in RFC 3865.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.MTRK">
            <summary>
            Message Tracking. Defined in RFC 3885.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.SUBMITTER">
            <summary>
            SMTP Responsible Submitter. Defined in RFC 4405.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.ATRN">
            <summary>
            Authenticated TURN. Defined in RFC 2645.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.AUTH">
            <summary>
            Authentication. Defined in RFC 4954.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.BURL">
            <summary>
            Remote Content. Defined in RFC 4468.
            </summary>
        </member>
        <member name="F:PX.Common.SMTP.SmptServiceExtensions.FUTURERELEASE">
            <summary>
            Future Message Release. Defined in RFC 4865.
            </summary>
        </member>
        <member name="T:PX.Common.SMTP.SmtpMailbox">
            <summary>
            This class represents SMTP "Mailbox" address. Defined in RFC 5321 4.1.2.
            </summary>
            <example>
            <code>
            RFC 5321 4.1.2.
                Mailbox    = Local-part "@" ( Domain / address-literal )
                Local-part = Dot-string / Quoted-string
                             ; MAY be case-sensitive
            </code>
            </example>
        </member>
        <member name="M:PX.Common.SMTP.SmtpMailbox.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="localPart">Local part of mailbox.</param>
            <param name="domain">Domain of mailbox.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>localPart</b> or <b>domain</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.SMTP.SmtpMailbox.ToString">
            <summary>
            Returns mailbox as string.
            </summary>
            <returns>Returns mailbox as string.</returns>
        </member>
        <member name="P:PX.Common.SMTP.SmtpMailbox.LocalPart">
            <summary>
            Gets local-part of mailbox.
            </summary>
            <remarks>If local-part is <b>Quoted-string</b>, quotes will not returned.</remarks>
        </member>
        <member name="P:PX.Common.SMTP.SmtpMailbox.Domain">
            <summary>
            Gets domain of mailbox.
            </summary>
            <remarks>If domain is <b>address-literal</b>, surrounding bracets will be removed.</remarks>
        </member>
        <member name="T:PX.Common.SMTP.Utils">
            <summary>
            This class provedes SMTP related utility methods.
            </summary>
        </member>
        <member name="M:PX.Common.SMTP.Utils.IsValidAddress(System.String)">
            <summary>
            Gets if specified smtp address has valid syntax.
            </summary>
            <param name="address">SMTP address, eg. ivar@lumisoft.ee.</param>
            <returns>Returns ture if address is valid, otherwise false.</returns>
        </member>
        <member name="T:PX.Common.SslMode">
            <summary>
            This enum holds SSL modes.
            </summary>
        </member>
        <member name="F:PX.Common.SslMode.None">
            <summary>
            No SSL is used.
            </summary>
        </member>
        <member name="F:PX.Common.SslMode.SSL">
            <summary>
            Connection is SSL.
            </summary>
        </member>
        <member name="F:PX.Common.SslMode.TLS">
            <summary>
            Connection will be switched to SSL with start TLS.
            </summary>
        </member>
        <member name="T:PX.Common.Str">
            <summary>
            Utility class for working with strings.
            </summary>
        </member>
        <member name="M:PX.Common.Str.NullIfWhitespace(System.String)">
            <summary>
            A string extension method that returns <c>null</c> if <paramref name="str"/> is null, empty or contains only whitespace characters.
            </summary>
            <param name="str">A string to act on.</param>
            <returns>
            Null or input string.
            </returns>
        </member>
        <member name="M:PX.Common.Str.Null(System.String)">
            <summary>
            Convert empty strings and strings with all whitespaces to null.
            </summary>
        </member>
        <member name="M:PX.Common.Str.Empty(System.Object)">
            <summary>
            Convert null-strings to the strings.Empty.
            </summary>
        </member>
        <member name="M:PX.Common.Str.IsEmpty(System.String)">
            <summary>
            Return true if string null or Empty.
            </summary>
        </member>
        <member name="M:PX.Common.Str.Join(System.String,System.Object[])">
            <summary>
            Join non-empty values and return result string.
            </summary>
        </member>
        <member name="M:PX.Common.Str.Coalesce(System.Object[])">
            <summary>
            Return first not-null value from array;
            </summary>
        </member>
        <member name="M:PX.Common.Str.GetFormatPlaceholderIndexes(System.String)">
            <summary>
            Gets the format placeholder indexes from the format string. For example, the format string "{0} - {2}" should return 0 and 2.
            </summary>
            <param name="formatString">The format string.</param>
            <returns>
            The pair - a flag if the format string is correct and format placeholder indexes.
            </returns>
        </member>
        <member name="M:PX.Common.Str.SplitByWords(System.String)">
            <summary>
            Splits given string by words.
            </summary>
            <param name="str">A string to split.</param>
            <returns>An array of strings containing words of this string.</returns>
        </member>
        <member name="T:PX.Common.StreamLineReader">
            <summary>
            Stream line reader.
            </summary>
        </member>
        <member name="M:PX.Common.StreamLineReader.#ctor(System.IO.Stream)">
            <summary>
            Default constructor.
            </summary>
            <param name="strmSource">Source stream from where to read data. Reading begins from stream current position.</param>
        </member>
        <member name="M:PX.Common.StreamLineReader.ReadLine">
            <summary>
            Reads byte[] line from stream. NOTE: Returns null if end of stream reached.
            </summary>
            <returns>Return null if end of stream reached.</returns>
        </member>
        <member name="M:PX.Common.StreamLineReader.ReadLineString">
            <summary>
            Reads string line from stream. String is converted with specified Encoding property from byte[] line. NOTE: Returns null if end of stream reached.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PX.Common.StreamLineReader.Encoding">
            <summary>
            Gets or sets charset encoding to use for string based methods. Default("") encoding is system default encoding.
            </summary>
        </member>
        <member name="T:PX.Common.StringReader">
            <summary>
            String reader.
            </summary>
        </member>
        <member name="M:PX.Common.StringReader.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="source">Source string.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>source</b> is null.</exception>
        </member>
        <member name="M:PX.Common.StringReader.AppenString(System.String)">
            <summary>
            Appends specified string to SourceString.
            </summary>
            <param name="str">String value to append.</param>
        </member>
        <member name="M:PX.Common.StringReader.ReadToFirstChar">
            <summary>
            Reads to first char, skips white-space(SP,VTAB,HTAB,CR,LF) from the beginning of source string.
            </summary>
            <returns>Returns white-space chars which was readed.</returns>
        </member>
        <member name="M:PX.Common.StringReader.ReadSpecifiedLength(System.Int32)">
            <summary>
            Reads string with specified length. Throws exception if read length is bigger than source string length.
            </summary>
            <param name="length">Number of chars to read.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.StringReader.QuotedReadToDelimiter(System.Char)">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiter in quoted string is skipped.
            Delimiter is removed by default.
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiter">Data delimiter.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.StringReader.QuotedReadToDelimiter(System.Char[])">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiters in quoted string is skipped.
            Delimiter is removed by default.
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.StringReader.QuotedReadToDelimiter(System.Char[],System.Boolean)">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiters in quoted string is skipped. 
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <param name="removeDelimiter">Specifies if delimiter is removed from underlying string.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.StringReader.ReadWord">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Common.StringReader.ReadWord(System.Boolean)">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <param name="unQuote">Specifies if quoted string word is unquoted.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.StringReader.ReadWord(System.Boolean,System.Char[],System.Boolean)">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <param name="unQuote">Specifies if quoted string word is unquoted.</param>
            <param name="wordTerminatorChars">Specifies chars what terminate word.</param>
            <param name="removeWordTerminator">Specifies if work terminator is removed.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.StringReader.ReadParenthesized">
            <summary>
            Reads parenthesized value. Supports {},(),[],&lt;&gt; parenthesis. 
            Throws exception if there isn't parenthesized value or closing parenthesize is missing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Common.StringReader.ReadToEnd">
            <summary>
            Reads all remaining string, returns null if no chars left to read.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Common.StringReader.StartsWith(System.String)">
            <summary>
            Gets if source string starts with specified value. Compare is case-sensitive.
            </summary>
            <param name="value">Start string value.</param>
            <returns>Returns true if source string starts with specified value.</returns>
        </member>
        <member name="M:PX.Common.StringReader.StartsWith(System.String,System.Boolean)">
            <summary>
            Gets if source string starts with specified value.
            </summary>
            <param name="value">Start string value.</param>
            <param name="case_sensitive">Specifies if compare is case-sensitive.</param>
            <returns>Returns true if source string starts with specified value.</returns>
        </member>
        <member name="M:PX.Common.StringReader.EndsWith(System.String)">
            <summary>
            Gets if source string ends with specified value. Compare is case-sensitive.
            </summary>
            <param name="value">Start string value.</param>
            <returns>Returns true if source string ends with specified value.</returns>
        </member>
        <member name="M:PX.Common.StringReader.EndsWith(System.String,System.Boolean)">
            <summary>
            Gets if source string ends with specified value.
            </summary>
            <param name="value">Start string value.</param>
            <param name="case_sensitive">Specifies if compare is case-sensitive.</param>
            <returns>Returns true if source string ends with specified value.</returns>
        </member>
        <member name="M:PX.Common.StringReader.StartsWithWord">
            <summary>
            Gets if current source string starts with word. For example if source string starts with
            whiter space or parenthesize, this method returns false.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PX.Common.StringReader.Available">
            <summary>
            Gets how many chars are available for reading.
            </summary>
        </member>
        <member name="P:PX.Common.StringReader.OriginalString">
            <summary>
            Gets original string passed to class constructor.
            </summary>
        </member>
        <member name="P:PX.Common.StringReader.SourceString">
            <summary>
            Gets currently remaining string.
            </summary>
        </member>
        <member name="P:PX.Common.StringReader.Position">
            <summary>
            Gets position in original string.
            </summary>
        </member>
        <member name="T:PX.Common.TCP.TcpClient">
            <summary>
            This class implements generic TCP client.
            </summary>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.Dispose">
            <summary>
            Cleans up any resources being used. This method is thread-safe.
            </summary>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.Connect(System.String,System.Int32)">
            <summary>
            Connects to the specified host. If the hostname resolves to more than one IP address, 
            all IP addresses will be tried for connection, until one of them connects.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.Connect(System.String,System.Int32,System.Boolean)">
            <summary>
            Connects to the specified host. If the hostname resolves to more than one IP address, 
            all IP addresses will be tried for connection, until one of them connects.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.Connect(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Connects to the specified remote end point.
            </summary>
            <param name="remoteEP">Remote IP end point where to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.Connect(System.Net.IPEndPoint,System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Connects to the specified remote end point.
            </summary>
            <param name="localEP">Local IP end point to use. Value null means that system will allocate it.</param>
            <param name="remoteEP">Remote IP end point to connect.</param>
            <param name="ssl">Specifies if connection switches to SSL affter connect.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.Connect(System.Net.IPEndPoint,System.Net.IPEndPoint,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Connects to the specified remote end point.
            </summary>
            <param name="localEP">Local IP end point to use. Value null means that system will allocate it.</param>
            <param name="remoteEP">Remote IP end point to connect.</param>
            <param name="ssl">Specifies if connection switches to SSL affter connect.</param>
            <param name="certCallback">SSL server certificate validation callback. Value null means any certificate is accepted.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null reference.</exception>
        </member>
        <member name="T:PX.Common.TCP.TcpClient.ConnectAsyncOP">
            <summary>
            This class represents <see cref="M:PX.Common.TCP.TcpClient.ConnectAsync(PX.Common.TCP.TcpClient.ConnectAsyncOP)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.ConnectAsyncOP.#ctor(System.Net.IPEndPoint,System.Net.IPEndPoint,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Default constructor.
            </summary>
            <param name="localEP">Local IP end point to use. Value null means that system will allocate it.</param>
            <param name="remoteEP">Remote IP end point to connect.</param>
            <param name="ssl">Specifies if connection switches to SSL affter connect.</param>
            <param name="certCallback">SSL server certificate validation callback. Value null means any certificate is accepted.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.ConnectAsyncOP.#ctor(System.Net.IPEndPoint,System.Net.IPEndPoint,System.Net.Sockets.TcpClient,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Default constructor.
            </summary>
            <param name="localEP">Local IP end point to use. Value null means that system will allocate it.</param>
            <param name="remoteEP">Remote IP end point to connect.</param>
            <param name="client">TCP client that provide connection to source.</param>
            <param name="ssl">Specifies if connection switches to SSL affter connect.</param>
            <param name="certCallback">SSL server certificate validation callback. Value null means any certificate is accepted.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.ConnectAsyncOP.#ctor(System.Net.IPEndPoint,System.String,System.Int32,System.Net.Sockets.TcpClient,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.ConnectAsyncOP.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.ConnectAsyncOP.Start(PX.Common.TCP.TcpClient)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner TCP client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.ConnectAsyncOP.SetState(PX.Common.AsyncOP_State)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.ConnectAsyncOP.BeginAuthenticateAsClientCompleted(System.IAsyncResult)">
            <summary>
            This method is called when "BeginAuthenticateAsClient" has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.ConnectAsyncOP.RemoteCertificateValidationCallback(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            This method is called when we need to validate remote server certificate.
            </summary>
            <param name="sender">Sender.</param>
            <param name="certificate">Certificate.</param>
            <param name="chain">Certificate chain.</param>
            <param name="sslPolicyErrors">SSL policy errors.</param>
            <returns>Returns true if certificate validated, otherwise false.</returns>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.ConnectAsyncOP.CleanupSocketRelated">
            <summary>
            Cleans up any socket related resources.
            </summary>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.ConnectAsyncOP.InternalConnectCompleted">
            <summary>
            Is called when when connecting has finished.
            </summary>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.ConnectAsyncOP.CompleteConnectCallback(System.Exception)">
            <summary>
            This method is called when this derrived class OnConnected processing has completed.
            </summary>
            <param name="error">Exception happened or null if no errors.</param>
        </member>
        <member name="P:PX.Common.TCP.TcpClient.ConnectAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:PX.Common.TCP.TcpClient.ConnectAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="P:PX.Common.TCP.TcpClient.ConnectAsyncOP.Stream">
            <summary>
            Gets connected TCP stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="E:PX.Common.TCP.TcpClient.ConnectAsyncOP.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.ConnectAsyncOP.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.ConnectAsync(PX.Common.TCP.TcpClient.ConnectAsyncOP)">
            <summary>
            Starts connecting to remote end point.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:PX.Common.TCP.TcpClient.ConnectAsyncOP.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.Disconnect">
            <summary>
            Disconnects connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="T:PX.Common.TCP.TcpClient.DisconnectDelegate">
            <summary>
            Internal helper method for asynchronous Disconnect method.
            </summary>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.BeginDisconnect(System.AsyncCallback,System.Object)">
            <summary>
            Starts disconnecting connection.
            </summary>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous disconnect.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.EndDisconnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous disconnect request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when argument <b>asyncResult</b> was not returned by a call to the <b>BeginDisconnect</b> method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndDisconnect</b> was previously called for the asynchronous connection.</exception>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.SwitchToSecure">
            <summary>
            Switches session to secure connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected or is already secure.</exception>
        </member>
        <member name="T:PX.Common.TCP.TcpClient.SwitchToSecureAsyncOP">
            <summary>
            This class represents <see cref="M:PX.Common.TCP.TcpClient.SwitchToSecureAsync(PX.Common.TCP.TcpClient.SwitchToSecureAsyncOP)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.SwitchToSecureAsyncOP.#ctor(System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Default constructor.
            </summary>
            <param name="certCallback">SSL server certificate validation callback. Value null means any certificate is accepted.</param>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.SwitchToSecureAsyncOP.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.SwitchToSecureAsyncOP.Start(PX.Common.TCP.TcpClient)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner TCP client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.SwitchToSecureAsyncOP.SetState(PX.Common.AsyncOP_State)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.SwitchToSecureAsyncOP.RemoteCertificateValidationCallback(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            This method is called when we need to validate remote server certificate.
            </summary>
            <param name="sender">Sender.</param>
            <param name="certificate">Certificate.</param>
            <param name="chain">Certificate chain.</param>
            <param name="sslPolicyErrors">SSL policy errors.</param>
            <returns>Returns true if certificate validated, otherwise false.</returns>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.SwitchToSecureAsyncOP.BeginAuthenticateAsClientCompleted(System.IAsyncResult)">
            <summary>
            This method is called when "BeginAuthenticateAsClient" has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="P:PX.Common.TCP.TcpClient.SwitchToSecureAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:PX.Common.TCP.TcpClient.SwitchToSecureAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="E:PX.Common.TCP.TcpClient.SwitchToSecureAsyncOP.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.SwitchToSecureAsyncOP.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.SwitchToSecureAsync(PX.Common.TCP.TcpClient.SwitchToSecureAsyncOP)">
            <summary>
            Starts switching connection to secure.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:PX.Common.TCP.TcpClient.SwitchToSecureAsyncOP.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected or connection is already secure.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.OnConnected">
            <summary>
            This method is called after TCP client has sucessfully connected.
            </summary>
        </member>
        <member name="T:PX.Common.TCP.TcpClient.CompleteConnectCallback">
            <summary>
            Represents callback to be called when to complete connect operation.
            </summary>
            <param name="error">Exception happened or null if no errors.</param>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.OnConnected(PX.Common.TCP.TcpClient.CompleteConnectCallback)">
            <summary>
            This method is called when TCP client has sucessfully connected.
            </summary>
            <param name="callback">Callback to be called to complete connect operation.</param>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.ReadLine">
            <summary>
            Reads and logs specified line from connected host.
            </summary>
            <returns>Returns readed line.</returns>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.WriteLine(System.String)">
            <summary>
            Sends and logs specified line to connected host.
            </summary>
            <param name="line">Line to send.</param>
        </member>
        <member name="P:PX.Common.TCP.TcpClient.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:PX.Common.TCP.TcpClient.IsConnected">
            <summary>
            Gets if TCP client is connected.
            </summary>
        </member>
        <member name="P:PX.Common.TCP.TcpClient.ID">
            <summary>
            Gets session ID.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:PX.Common.TCP.TcpClient.ConnectTime">
            <summary>
            Gets the time when session was connected.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:PX.Common.TCP.TcpClient.LastActivity">
            <summary>
            Gets the last time when data was sent or received.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:PX.Common.TCP.TcpClient.LocalEndPoint">
            <summary>
            Gets session local IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:PX.Common.TCP.TcpClient.RemoteEndPoint">
            <summary>
            Gets session remote IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:PX.Common.TCP.TcpClient.IsSecureConnection">
            <summary>
            Gets if this session TCP connection is secure connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:PX.Common.TCP.TcpClient.TcpStream">
            <summary>
            Gets TCP stream which must be used to send/receive data through this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:PX.Common.TCP.TcpClient.ValidateCertificateCallback">
            <summary>
            Gets or stes remote callback which is called when remote server certificate needs to be validated.
            Value null means not sepcified.
            </summary>
        </member>
        <member name="P:PX.Common.TCP.TcpClient.Timeout">
            <summary>
            Gets or sets default TCP read/write timeout.
            </summary>
            <remarks>This timeout applies only synchronous TCP read/write operations.</remarks>
        </member>
        <member name="T:PX.Common.TCP.TcpClient.BeginConnectHostDelegate">
            <summary>
            Internal helper method for asynchronous Connect method.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
        </member>
        <member name="T:PX.Common.TCP.TcpClient.BeginConnectEPDelegate">
            <summary>
            Internal helper method for asynchronous Connect method.
            </summary>
            <param name="localEP">Local IP end point to use for connect.</param>
            <param name="remoteEP">Remote IP end point where to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Starts connection to the specified host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.BeginConnect(System.String,System.Int32,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts connection to the specified host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.BeginConnect(System.Net.IPEndPoint,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts connection to the specified remote end point.
            </summary>
            <param name="remoteEP">Remote IP end point where to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.BeginConnect(System.Net.IPEndPoint,System.Net.IPEndPoint,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts connection to the specified remote end point.
            </summary>
            <param name="localEP">Local IP end point to use for connect.</param>
            <param name="remoteEP">Remote IP end point where to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.TCP.TcpClient.EndConnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connection request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when argument <b>asyncResult</b> was not returned by a call to the <b>BeginConnect</b> method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndConnect</b> was previously called for the asynchronous connection.</exception>
        </member>
        <member name="T:PX.Common.TCP.TcpSession">
            <summary>
            This is base class for TCP_Client and TCP_ServerSession.
            </summary>
        </member>
        <member name="M:PX.Common.TCP.TcpSession.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.TCP.TcpSession.Disconnect">
            <summary>
            Disconnects session.
            </summary>
        </member>
        <member name="P:PX.Common.TCP.TcpSession.IsConnected">
            <summary>
            Gets if session is connected.
            </summary>
        </member>
        <member name="P:PX.Common.TCP.TcpSession.ID">
            <summary>
            Gets session ID.
            </summary>
        </member>
        <member name="P:PX.Common.TCP.TcpSession.ConnectTime">
            <summary>
            Gets the time when session was connected.
            </summary>
        </member>
        <member name="P:PX.Common.TCP.TcpSession.LastActivity">
            <summary>
            Gets the last time when data was sent or received.
            </summary>
        </member>
        <member name="P:PX.Common.TCP.TcpSession.LocalEndPoint">
            <summary>
            Gets session local IP end point.
            </summary>
        </member>
        <member name="P:PX.Common.TCP.TcpSession.RemoteEndPoint">
            <summary>
            Gets session remote IP end point.
            </summary>
        </member>
        <member name="P:PX.Common.TCP.TcpSession.IsSecureConnection">
            <summary>
            Gets if this session TCP connection is secure connection.
            </summary>
        </member>
        <member name="P:PX.Common.TCP.TcpSession.IsAuthenticated">
            <summary>
            Gets if this session is authenticated.
            </summary>
        </member>
        <member name="P:PX.Common.TCP.TcpSession.AuthenticatedUserIdentity">
            <summary>
            Gets session authenticated user identity , returns null if not authenticated.
            </summary>
        </member>
        <member name="P:PX.Common.TCP.TcpSession.TcpStream">
            <summary>
            Gets TCP stream which must be used to send/receive data through this session.
            </summary>
        </member>
        <member name="T:PX.Common.TextUtils">
            <summary>
            This class provides usefull text methods.
            </summary>
        </member>
        <member name="M:PX.Common.TextUtils.QuoteString(System.String)">
            <summary>
            Qoutes string and escapes fishy('\',"') chars.
            </summary>
            <param name="text">Text to quote.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TextUtils.UnQuoteString(System.String)">
            <summary>
            Unquotes and unescapes escaped chars specified text. For example "xxx" will become to 'xxx', "escaped quote \"", will become to escaped 'quote "'.
            </summary>
            <param name="text">Text to unquote.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TextUtils.EscapeString(System.String,System.Char,System.Char)">
            <summary>
            Escapes specified chars in the specified string. Escaped chars get replaced with separator + one symbol index, which means that escaped characters no longer can be found
            in the string and can be used as separators when combinig such strings.
            </summary>
            <param name="text">string to escape</param>
            <param name="separator">escape character</param>
            <param name="charToEscape">character that gets replaced with escape character</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TextUtils.UnEscapeString(System.String,System.Char,System.Char)">
            <summary>
            Unescape string. Escaped sequences get replaced with the original symbols
            </summary>
            <param name="text">string to escape</param>
            <param name="separator">escape character</param>
            <param name="charToEscape">character that was replaced</param>
            <returns>unescaped string</returns>
        </member>
        <member name="M:PX.Common.TextUtils.EscapeString(System.String,System.Char,System.Char[])">
            <summary>
            Escapes specified chars in the specified string. Escaped chars get replaced with separator + one symbol index, which means that escaped characters no longer can be found
            in the string and can be used as separators when combinig such strings.
            </summary>
            <param name="text">string to escape</param>
            <param name="separator">escape character</param>
            <param name="charsToEscape">characters that get replaced with escape character</param>
            <returns>escaped string</returns>
        </member>
        <member name="M:PX.Common.TextUtils.UnEscapeString(System.String,System.Char,System.Char[])">
            <summary>
            Unescape string. Escaped sequences get replaced with the original symbols
            </summary>
            <param name="text">string to escape</param>
            <param name="separator">escape character</param>
            <param name="charsToEscape">characters that were replaced</param>
            <returns>unescaped string</returns>
        </member>
        <member name="M:PX.Common.TextUtils.EscapeString(System.String,System.Char[])">
            <summary>
            Escapes specified chars in the specified string.
            </summary>
            <param name="text">Text to escape.</param>
            <param name="charsToEscape">Chars to escape.</param>
        </member>
        <member name="M:PX.Common.TextUtils.UnEscapeString(System.String)">
            <summary>
            Unescapes all escaped chars.
            </summary>
            <param name="text">Text to unescape.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TextUtils.SplitQuotedString(System.String,System.Char)">
            <summary>
            Splits string into string arrays. This split method won't split qouted strings, but only text outside of qouted string.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TextUtils.SplitQuotedString(System.String,System.Char,System.Boolean)">
            <summary>
            Splits string into string arrays. This split method won't split qouted strings, but only text outside of qouted string.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <param name="unquote">If true, splitted parst will be unqouted if they are qouted.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TextUtils.SplitQuotedString(System.String,System.Char,System.Boolean,System.Int32)">
            <summary>
            Splits string into string arrays. This split method won't split qouted strings, but only text outside of qouted string.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <param name="unquote">If true, splitted parst will be unqouted if they are qouted.</param>
            <param name="count">Maximum number of substrings to return.</param>
            <returns>Returns splitted string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.TextUtils.QuotedIndexOf(System.String,System.Char)">
            <summary>
            Gets first index of specified char. The specified char in quoted string is skipped.
            Returns -1 if specified char doesn't exist.
            </summary>
            <param name="text">Text in what to check.</param>
            <param name="indexChar">Char what index to get.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TextUtils.SplitString(System.String,System.Char)">
            <summary>
            Splits string into string arrays.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char Char that splits text.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TextUtils.IsToken(System.String)">
            <summary>
            Gets if specified string is valid "token" value.
            </summary>
            <param name="value">String value to check.</param>
            <returns>Returns true if specified string value is valid "token" value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised if <b>value</b> is null.</exception>
        </member>
        <member name="M:PX.Common.TextUtils.Emphasize(System.String,System.String)">
            <summary>
            Finds the substrings in text and emphasizes it with BOLD tag. 
            </summary>
            <param name="text"></param>
            <param name="substring"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TextUtils.ConvertQueryToRegexPatern(System.String)">
            <summary>
            Converts phrase into regex pattern for matching. 
            </summary>
            <param name="phrase"></param>
            <returns></returns>
        </member>
        <member name="T:PX.Common.TimerEx">
            <summary>
            Simple timer implementation.
            </summary>
        </member>
        <member name="M:PX.Common.TimerEx.#ctor">
            <summary>
            Default contructor.
            </summary>
        </member>
        <member name="M:PX.Common.TimerEx.#ctor(System.Double)">
            <summary>
            Default contructor.
            </summary>
            <param name="interval">The time in milliseconds between events.</param>
        </member>
        <member name="M:PX.Common.TimerEx.#ctor(System.Double,System.Boolean)">
            <summary>
            Default contructor.
            </summary>
            <param name="interval">The time in milliseconds between events.</param>
            <param name="autoReset">Specifies if timer is auto reseted.</param>
        </member>
        <member name="M:PX.Common.Tools.ToCodeString(System.Type,System.Boolean)">
            <summary>
            Converts a type instance to its code representation
            </summary>
            <remarks>
            <code>typeof(Dictionary&lt;Tuple&lt;int, string&gt;, List&lt;double&gt;&gt;).ToCodeString()</code> will return "Dictionary&lt;Tuple&lt;int, string&gt;, List&lt;double&gt;&gt;"
            </remarks>
        </member>
        <member name="M:PX.Common.Tools.GetInheritanceDepth(System.Type)">
            <summary>
            Returns a number representing the length of the inheritance chain for the current type
            (count of base classes, including the current type itself).
            </summary>
            <remarks>Function will return 1 for <see cref="T:System.Object"/> type</remarks>
            <param name="type">Inspecting type</param>
        </member>
        <member name="M:PX.Common.Tools.GetInheritanceChain(System.Type)">
            <summary>
            Returns a sequence of base classes which are present in the inheritance chain of the current type, 
            starting with the current type itself and ending with an <see cref="T:System.Object"/> type.
            </summary>
            <param name="type">Inspecting type</param>
        </member>
        <member name="M:PX.Common.Tools.GetWeekNumber(System.DateTime)">
            <summary>
            ISO 8601
            </summary>
        </member>
        <member name="M:PX.Common.Tools.GetWeekStart(System.Int32,System.Int32)">
            <summary>
            ISO 8601
            </summary>
        </member>
        <member name="M:PX.Common.Tools.ToVoid``1(``0)">
            <summary>
            Suppress expression type
            </summary>
            <typeparam name="T">Expression original type</typeparam>
            <param name="expression">Expression whose type should be suppressed</param>
        </member>
        <member name="M:PX.Common.Tools.Implies(System.Boolean,System.Func{System.Boolean})">
            <summary>
            Logical implication (lazy)
            </summary>
            <param name="antecedent">Antecedent</param>
            <param name="consequent">Consequent</param>
            <returns>
            <c>false</c> if <paramref name="antecedent"/> is <c>true</c> 
            and <paramref name="consequent"/> is <c>false</c>, otherwise - <c>true</c>
            </returns>
        </member>
        <member name="M:PX.Common.Tools.Implies(System.Boolean,System.Boolean)">
            <summary>
            Logical implication (eager)
            </summary>
            <param name="antecedent">Antecedent</param>
            <param name="consequent">Consequent</param>
            <returns>
            <c>false</c> if <paramref name="antecedent"/> is <c>true</c> 
            and <paramref name="consequent"/> is <c>false</c>, otherwise - <c>true</c>
            </returns>
        </member>
        <member name="P:PX.Common.Array`1.Empty">
            <summary>
            Cached array instance of <typeparamref name="T"/> type.
            </summary>
        </member>
        <member name="M:PX.Common.Func.Id``1">
            <summary>
            Returns function that returns its parameter
            </summary>
        </member>
        <member name="M:PX.Common.Func.Memorize``1(System.Func{``0})">
            <summary>
            Apply memorizing behavior to the function,
            which means that original function would be
            called only once for a certain input parameter
            </summary>
            <typeparam name="TOut">Function output result type</typeparam>
            <param name="originalFunc">Function</param>
            <returns>Function with memorizing behavior</returns>
        </member>
        <member name="M:PX.Common.Func.Memorize``2(System.Func{``0,``1})">
            <summary>
            Apply memorizing behavior to the function,
            which means that original function would be
            called only once for a certain input parameter
            </summary>
            <typeparam name="TIn">Function input parameter type</typeparam>
            <typeparam name="TOut">Function output result type</typeparam>
            <param name="originalFunc">Function</param>
            <returns>Function with memorizing behavior</returns>
        </member>
        <member name="M:PX.Common.Func.Memorize``3(System.Func{``0,``1,``2})">
            <summary>
            Apply memorizing behavior to the function,
            which means that original function would be
            called only once for a certain input parameter
            </summary>
            <typeparam name="TIn1">Function first input parameter type</typeparam>
            <typeparam name="TIn2">Function second input parameter type</typeparam>
            <typeparam name="TOut">Function output result type</typeparam>
            <param name="originalFunc">Function</param>
            <returns>Function with memorizing behavior</returns>
        </member>
        <member name="M:PX.Common.Func.Memorize``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Apply memorizing behavior to the function,
            which means that original function would be
            called only once for a certain input parameter
            </summary>
            <typeparam name="TIn1">Function first input parameter type</typeparam>
            <typeparam name="TIn2">Function second input parameter type</typeparam>
            <typeparam name="TIn3">Function third input parameter type</typeparam>
            <typeparam name="TOut">Function output result type</typeparam>
            <param name="originalFunc">Function</param>
            <returns>Function with memorizing behavior</returns>
        </member>
        <member name="M:PX.Common.Func.Memorize``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Apply memorizing behavior to the function,
            which means that original function would be
            called only once for a certain input parameter
            </summary>
            <typeparam name="TIn1">Function first input parameter type</typeparam>
            <typeparam name="TIn2">Function second input parameter type</typeparam>
            <typeparam name="TIn3">Function third input parameter type</typeparam>
            <typeparam name="TIn4">Function fourth input parameter type</typeparam>
            <typeparam name="TOut">Function output result type</typeparam>
            <param name="originalFunc">Function</param>
            <returns>Function with memorizing behavior</returns>
        </member>
        <member name="M:PX.Common.Func.Memorize``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Apply memorizing behavior to the function,
            which means that original function would be
            called only once for a certain input parameter
            </summary>
            <typeparam name="TIn1">Function first input parameter type</typeparam>
            <typeparam name="TIn2">Function second input parameter type</typeparam>
            <typeparam name="TIn3">Function third input parameter type</typeparam>
            <typeparam name="TIn4">Function fourth input parameter type</typeparam>
            <typeparam name="TIn5">Function fifth input parameter type</typeparam>
            <typeparam name="TOut">Function output result type</typeparam>
            <param name="originalFunc">Function</param>
            <returns>Function with memorizing behavior</returns>
        </member>
        <member name="M:PX.Common.Func.Memorize``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Apply memorizing behavior to the function,
            which means that original function would be
            called only once for a certain input parameter
            </summary>
            <typeparam name="TIn1">Function first input parameter type</typeparam>
            <typeparam name="TIn2">Function second input parameter type</typeparam>
            <typeparam name="TIn3">Function third input parameter type</typeparam>
            <typeparam name="TIn4">Function fourth input parameter type</typeparam>
            <typeparam name="TIn5">Function fifth input parameter type</typeparam>
            <typeparam name="TIn6">Function sixth input parameter type</typeparam>
            <typeparam name="TOut">Function output result type</typeparam>
            <param name="originalFunc">Function</param>
            <returns>Function with memorizing behavior</returns>
        </member>
        <member name="M:PX.Common.Func.Memorize``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Apply memorizing behavior to the function,
            which means that original function would be
            called only once for a certain input parameter
            </summary>
            <typeparam name="TIn1">Function first input parameter type</typeparam>
            <typeparam name="TIn2">Function second input parameter type</typeparam>
            <typeparam name="TIn3">Function third input parameter type</typeparam>
            <typeparam name="TIn4">Function fourth input parameter type</typeparam>
            <typeparam name="TIn5">Function fifth input parameter type</typeparam>
            <typeparam name="TIn6">Function sixth input parameter type</typeparam>
            <typeparam name="TIn7">Function seventh input parameter type</typeparam>
            <typeparam name="TOut">Function output result type</typeparam>
            <param name="originalFunc">Function</param>
            <returns>Function with memorizing behavior</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PX.Common.Func.Conjoin``1(System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})" -->
        <member name="M:PX.Common.Func.Disjoin``1(System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Combines two Func delagates (OR condition)
            </summary>
            <typeparam name="TIn">Function input parameter type</typeparam>
            <param name="firstFunc">First function</param>
            <param name="secondFunc">Second function</param>
            <returns>Returns (firstFunc || secondFunc)</returns>
        </member>
        <member name="M:PX.Common.Func.Negate``1(System.Func{``0,System.Boolean})">
            <summary>
            Negates the Func delegate (NOT condition)
            </summary>
            <typeparam name="TIn">Function input parameter type</typeparam>
            <param name="func">Original function</param>
            <returns>Returns !func</returns>
        </member>
        <member name="T:PX.Common.IImplement`1">
            <summary>
            Allows to create tricky restrictions for generic parameters.
            </summary>
        </member>
        <member name="T:PX.Common.ITypeArrayOf`1">
            <summary>
            Save alternative of <see cref="T:System.Type"/>[].<para/>
            Gives ability to restrict the types which an array should consist of.<para/>
            To extract the underlying array, that is guaranteed to contain only types that are <typeparamref name="TBase"/> descendants, 
            use <see cref="M:PX.Common.TypeArray.CheckAndExtract``1(System.Type,System.String)"/> routine.
            </summary>
            <typeparam name="TBase">Elements restricting base class</typeparam>
        </member>
        <member name="M:PX.Common.TypeArray.CheckAndExtract``1(System.Type,System.String)">
            <summary>
            Checks that <paramref name="type"/> is a <see cref="T:PX.Common.TypeArrayOf`1"/> descendant
            (e.g. contains only types that are <typeparamref name="TBase"/> descendants)
            and extracts the underlying <see cref="T:System.Type"/>[].
            </summary>
            <typeparam name="TBase">Elements restricting base class</typeparam>
            <param name="type">inspectingType</param>
            <param name="argName">Original argument name (is used for debug simplifying)</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TypeArray.CheckAndExtractInstances``1(System.Type,System.String)">
            <summary>
            Checks that <paramref name="type"/> is a <see cref="T:PX.Common.TypeArrayOf`1"/> descendant
            (e.g. contains only types that are <typeparamref name="TBase"/> descendants)
            and extracts instances corresponding to the underlying <see cref="T:System.Type"/>[].
            </summary>
            <typeparam name="TBase">Elements restricting base class</typeparam>
            <param name="type">inspectingType</param>
            <param name="argName">Original argument name (is used for debug simplifying)</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TypeArray.Construct``1(System.Type[])">
            <summary>
            Construct a <see cref="T:PX.Common.TypeArrayOf`1"/> that is filled with passed <paramref name="elements"/>.
            Throws an <see cref="T:System.ArgumentException"/> if any element is not a <typeparamref name="TBase"/> descendant.
            Returns empty type array if elements array is null or empty.
            </summary>
            <typeparam name="TBase">Elements restricting base class</typeparam>
        </member>
        <member name="M:PX.Common.TypeArray.EmptyOrSingleOrSelf``1(System.Type)">
            <summary>
            Returns an empty <see cref="T:PX.Common.TypeArrayOf`1"/> if passed argument is null,
            constructs a <see cref="T:PX.Common.TypeArrayOf`1"/> that is filled with argument
            if <typeparamref name="TBase"/> is assignable from passed argument,
            or returns passed argument if it is already a <see cref="T:PX.Common.TypeArrayOf`1"/>.<para/>
            Throws an <see cref="T:System.ArgumentException"/> if passed argument neither a corresponding array nor a corresponding array element.
            </summary>
            <typeparam name="TBase">Elements restricting base class</typeparam>
        </member>
        <member name="M:PX.Common.TypeArray.IsTypeArrayOf``1(System.Type)">
            <summary>
            Checks that <paramref name="type"/> is a <see cref="T:PX.Common.TypeArrayOf`1"/> descendant
            (e.g. contains only types that are <typeparamref name="TBase"/> descendants).
            </summary>
            <typeparam name="TBase">Elements restricting base class</typeparam>
            <param name="type">inspectingType</param>
        </member>
        <member name="M:PX.Common.TypeArray.IsCompatibleElement``1(System.Type)">
            <summary>
            Checks that <paramref name="type"/> is compatible with a <see cref="T:PX.Common.TypeArrayOf`1"/> descendant
            (e.g. <see cref="T:PX.Common.TypeArrayOf`1"/> descendant can contain that  <paramref name="type"/>).
            </summary>
            <typeparam name="TBase">Elements restricting base class</typeparam>
            <param name="type">inspectingType</param>
            <returns></returns>
        </member>
        <member name="T:PX.Common.TypeArray.IsNotEmpty">
            <summary>
            Indicates that array must have at least one element
            </summary>
            <remarks>
            Use this interface in generic type parameter restrictions to ensure that passed <see cref="T:PX.Common.TypeArrayOf`1"/> is not emtpy
            </remarks>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1">
            <summary>
            Save alternative of <see cref="T:System.Type"/>[].<para/>
            Gives ability to restrict the types which an array should consist of.<para/>
            Each type that is mentioned in <see cref="T:PX.Common.TypeArrayOf`1.FilledWith`1"/>-clause should be a <typeparamref name="TBase"/> descendants.<para/>
            To extract the underlying array, that is guaranteed to contain only types that are <typeparamref name="TBase"/> descendants, 
            use <see cref="M:PX.Common.TypeArray.CheckAndExtract``1(System.Type,System.String)"/> routine.
            </summary>
            <typeparam name="TBase">Elements restricting base class</typeparam>
        </member>
        <member name="M:PX.Common.TypeArrayOf`1.CheckAndExtract(System.Type,System.String)">
            <summary>
            Checks that <paramref name="type"/> is a <see cref="T:PX.Common.TypeArrayOf`1"/> descendant
            (e.g. contains only types that are <typeparamref name="TBase"/> descendants)
            and extracts the underlying <see cref="T:System.Type"/>[].
            </summary>
            <param name="type">inspectingType</param>
            <param name="argName">Original argument name (is used for debug simplifying)</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TypeArrayOf`1.CheckAndExtractInstances(System.Type,System.String)">
            <summary>
            Checks that <paramref name="type"/> is a <see cref="T:PX.Common.TypeArrayOf`1"/> descendant
            (e.g. contains only types that are <typeparamref name="TBase"/> descendants)
            and extracts instances corresponding to the underlying <see cref="T:System.Type"/>[].
            </summary>
            <param name="type">inspectingType</param>
            <param name="argName">Original argument name (is used for debug simplifying)</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TypeArrayOf`1.Construct(System.Type[])">
            <summary>
            Construct a <see cref="T:PX.Common.TypeArrayOf`1"/> that is filled with passed <paramref name="elements"/>.
            Throws an <see cref="T:System.ArgumentException"/> if any element is not a <typeparamref name="TBase"/> descendant.
            Returns empty type array if elements array is null or empty.
            </summary>
        </member>
        <member name="M:PX.Common.TypeArrayOf`1.EmptyOrSingleOrSelf(System.Type)">
            <summary>
            Returns an empty <see cref="T:PX.Common.TypeArrayOf`1"/> if passed argument is null,
            constructs a <see cref="T:PX.Common.TypeArrayOf`1"/> that is filled with argument
            if <typeparamref name="TBase"/> is assignable from passed argument,
            or returns passed argument if it is already a <see cref="T:PX.Common.TypeArrayOf`1"/>.<para/>
            Throws an <see cref="T:System.ArgumentException"/> if passed argument neither a corresponding array nor a corresponding array element.
            </summary>
        </member>
        <member name="M:PX.Common.TypeArrayOf`1.IsTypeArray(System.Type)">
            <summary>
            Checks that <paramref name="type"/> is a <see cref="T:PX.Common.TypeArrayOf`1"/> descendant
            (e.g. contains only types that are <typeparamref name="TBase"/> descendants).
            </summary>
            <param name="type">inspectingType</param>
        </member>
        <member name="M:PX.Common.TypeArrayOf`1.IsCompatibleElement(System.Type)">
            <summary>
            Checks that <paramref name="type"/> is compatible with a <see cref="T:PX.Common.TypeArrayOf`1"/> descendant
            (e.g. <see cref="T:PX.Common.TypeArrayOf`1"/> descendant can contain that  <paramref name="type"/>).
            </summary>
            <param name="type">inspectingType</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TypeArrayOf`1.IsTypeArrayOrElement(System.Type)">
            <summary>
            Checks that <paramref name="type"/> is a <see cref="T:PX.Common.TypeArrayOf`1"/> descendant
            or an element compatible with a <see cref="T:PX.Common.TypeArrayOf`1"/> descendant.
            </summary>
            <param name="type">inspectingType</param>
            <returns></returns>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.Empty">
            <summary>
            An empty array.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`1">
            <summary>
            Array filled with a single element.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`1">
            <summary>
            Array filled with a single element.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`2">
            <summary>
            Array filled with 2 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`2">
            <summary>
            Array filled with 2 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`3">
            <summary>
            Array filled with 3 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`3">
            <summary>
            Array filled with 3 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`4">
            <summary>
            Array filled with 4 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`4">
            <summary>
            Array filled with 4 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`5">
            <summary>
            Array filled with 5 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`5">
            <summary>
            Array filled with 5 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`6">
            <summary>
            Array filled with 6 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`6">
            <summary>
            Array filled with 6 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`7">
            <summary>
            Array filled with 7 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`7">
            <summary>
            Array filled with 7 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`8">
            <summary>
            Array filled with 8 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`8">
            <summary>
            Array filled with 8 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`9">
            <summary>
            Array filled with 9 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`9">
            <summary>
            Array filled with 9 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`10">
            <summary>
            Array filled with 10 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`10">
            <summary>
            Array filled with 10 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`11">
            <summary>
            Array filled with 11 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`11">
            <summary>
            Array filled with 11 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`12">
            <summary>
            Array filled with 12 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`12">
            <summary>
            Array filled with 12 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`13">
            <summary>
            Array filled with 13 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`13">
            <summary>
            Array filled with 13 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`14">
            <summary>
            Array filled with 14 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`14">
            <summary>
            Array filled with 14 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`15">
            <summary>
            Array filled with 15 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`15">
            <summary>
            Array filled with 15 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`16">
            <summary>
            Array filled with 16 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`16">
            <summary>
            Array filled with 16 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`17">
            <summary>
            Array filled with 17 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`17">
            <summary>
            Array filled with 17 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`18">
            <summary>
            Array filled with 18 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`18">
            <summary>
            Array filled with 18 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`19">
            <summary>
            Array filled with 19 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`19">
            <summary>
            Array filled with 19 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`20">
            <summary>
            Array filled with 20 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`20">
            <summary>
            Array filled with 20 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`21">
            <summary>
            Array filled with 21 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`21">
            <summary>
            Array filled with 21 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`22">
            <summary>
            Array filled with 22 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`22">
            <summary>
            Array filled with 22 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`23">
            <summary>
            Array filled with 23 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`23">
            <summary>
            Array filled with 23 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`24">
            <summary>
            Array filled with 24 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`24">
            <summary>
            Array filled with 24 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`25">
            <summary>
            Array filled with 25 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`25">
            <summary>
            Array filled with 25 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`26">
            <summary>
            Array filled with 26 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`26">
            <summary>
            Array filled with 26 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`27">
            <summary>
            Array filled with 27 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`27">
            <summary>
            Array filled with 27 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`28">
            <summary>
            Array filled with 28 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`28">
            <summary>
            Array filled with 28 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`29">
            <summary>
            Array filled with 29 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`29">
            <summary>
            Array filled with 29 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`30">
            <summary>
            Array filled with 30 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`30">
            <summary>
            Array filled with 30 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`31">
            <summary>
            Array filled with 31 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`31">
            <summary>
            Array filled with 31 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`32">
            <summary>
            Array filled with 32 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`32">
            <summary>
            Array filled with 32 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`33">
            <summary>
            Array filled with 33 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`33">
            <summary>
            Array filled with 33 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`34">
            <summary>
            Array filled with 34 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`34">
            <summary>
            Array filled with 34 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`35">
            <summary>
            Array filled with 35 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`35">
            <summary>
            Array filled with 35 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`36">
            <summary>
            Array filled with 36 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`36">
            <summary>
            Array filled with 36 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`37">
            <summary>
            Array filled with 37 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`37">
            <summary>
            Array filled with 37 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`38">
            <summary>
            Array filled with 38 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`38">
            <summary>
            Array filled with 38 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`39">
            <summary>
            Array filled with 39 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`39">
            <summary>
            Array filled with 39 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`40">
            <summary>
            Array filled with 40 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`40">
            <summary>
            Array filled with 40 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`41">
            <summary>
            Array filled with 41 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`41">
            <summary>
            Array filled with 41 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`42">
            <summary>
            Array filled with 42 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`42">
            <summary>
            Array filled with 42 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`43">
            <summary>
            Array filled with 43 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`43">
            <summary>
            Array filled with 43 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`44">
            <summary>
            Array filled with 44 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`44">
            <summary>
            Array filled with 44 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`45">
            <summary>
            Array filled with 45 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`45">
            <summary>
            Array filled with 45 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`46">
            <summary>
            Array filled with 46 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`46">
            <summary>
            Array filled with 46 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`47">
            <summary>
            Array filled with 47 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`47">
            <summary>
            Array filled with 47 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`48">
            <summary>
            Array filled with 48 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`48">
            <summary>
            Array filled with 48 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`49">
            <summary>
            Array filled with 49 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`49">
            <summary>
            Array filled with 49 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`50">
            <summary>
            Array filled with 50 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`50">
            <summary>
            Array filled with 50 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`51">
            <summary>
            Array filled with 51 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`51">
            <summary>
            Array filled with 51 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`52">
            <summary>
            Array filled with 52 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`52">
            <summary>
            Array filled with 52 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`53">
            <summary>
            Array filled with 53 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`53">
            <summary>
            Array filled with 53 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`54">
            <summary>
            Array filled with 54 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`54">
            <summary>
            Array filled with 54 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`55">
            <summary>
            Array filled with 55 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`55">
            <summary>
            Array filled with 55 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`56">
            <summary>
            Array filled with 56 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`56">
            <summary>
            Array filled with 56 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`57">
            <summary>
            Array filled with 57 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`57">
            <summary>
            Array filled with 57 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`58">
            <summary>
            Array filled with 58 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`58">
            <summary>
            Array filled with 58 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`59">
            <summary>
            Array filled with 59 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`59">
            <summary>
            Array filled with 59 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`60">
            <summary>
            Array filled with 60 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`60">
            <summary>
            Array filled with 60 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`61">
            <summary>
            Array filled with 61 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`61">
            <summary>
            Array filled with 61 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`62">
            <summary>
            Array filled with 62 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`62">
            <summary>
            Array filled with 62 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`63">
            <summary>
            Array filled with 63 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`63">
            <summary>
            Array filled with 63 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`64">
            <summary>
            Array filled with 64 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`64">
            <summary>
            Array filled with 64 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`65">
            <summary>
            Array filled with 65 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`65">
            <summary>
            Array filled with 65 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`66">
            <summary>
            Array filled with 66 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`66">
            <summary>
            Array filled with 66 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`67">
            <summary>
            Array filled with 67 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`67">
            <summary>
            Array filled with 67 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`68">
            <summary>
            Array filled with 68 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`68">
            <summary>
            Array filled with 68 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`69">
            <summary>
            Array filled with 69 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`69">
            <summary>
            Array filled with 69 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`70">
            <summary>
            Array filled with 70 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`70">
            <summary>
            Array filled with 70 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`71">
            <summary>
            Array filled with 71 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`71">
            <summary>
            Array filled with 71 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`72">
            <summary>
            Array filled with 72 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`72">
            <summary>
            Array filled with 72 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`73">
            <summary>
            Array filled with 73 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`73">
            <summary>
            Array filled with 73 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`74">
            <summary>
            Array filled with 74 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`74">
            <summary>
            Array filled with 74 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`75">
            <summary>
            Array filled with 75 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`75">
            <summary>
            Array filled with 75 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`76">
            <summary>
            Array filled with 76 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`76">
            <summary>
            Array filled with 76 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`77">
            <summary>
            Array filled with 77 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`77">
            <summary>
            Array filled with 77 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`78">
            <summary>
            Array filled with 78 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`78">
            <summary>
            Array filled with 78 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`79">
            <summary>
            Array filled with 79 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`79">
            <summary>
            Array filled with 79 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`80">
            <summary>
            Array filled with 80 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`80">
            <summary>
            Array filled with 80 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`81">
            <summary>
            Array filled with 81 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`81">
            <summary>
            Array filled with 81 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`82">
            <summary>
            Array filled with 82 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`82">
            <summary>
            Array filled with 82 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`83">
            <summary>
            Array filled with 83 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`83">
            <summary>
            Array filled with 83 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`84">
            <summary>
            Array filled with 84 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`84">
            <summary>
            Array filled with 84 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`85">
            <summary>
            Array filled with 85 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`85">
            <summary>
            Array filled with 85 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`86">
            <summary>
            Array filled with 86 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`86">
            <summary>
            Array filled with 86 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`87">
            <summary>
            Array filled with 87 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`87">
            <summary>
            Array filled with 87 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`88">
            <summary>
            Array filled with 88 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`88">
            <summary>
            Array filled with 88 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`89">
            <summary>
            Array filled with 89 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`89">
            <summary>
            Array filled with 89 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`90">
            <summary>
            Array filled with 90 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`90">
            <summary>
            Array filled with 90 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`91">
            <summary>
            Array filled with 91 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`91">
            <summary>
            Array filled with 91 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`92">
            <summary>
            Array filled with 92 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`92">
            <summary>
            Array filled with 92 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`93">
            <summary>
            Array filled with 93 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`93">
            <summary>
            Array filled with 93 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`94">
            <summary>
            Array filled with 94 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`94">
            <summary>
            Array filled with 94 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`95">
            <summary>
            Array filled with 95 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`95">
            <summary>
            Array filled with 95 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`96">
            <summary>
            Array filled with 96 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`96">
            <summary>
            Array filled with 96 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`97">
            <summary>
            Array filled with 97 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`97">
            <summary>
            Array filled with 97 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`98">
            <summary>
            Array filled with 98 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`98">
            <summary>
            Array filled with 98 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`99">
            <summary>
            Array filled with 99 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`99">
            <summary>
            Array filled with 99 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`100">
            <summary>
            Array filled with 100 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`100">
            <summary>
            Array filled with 100 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeHelper">
            <summary>
            Utility class for working with system types.
            </summary>
        </member>
        <member name="M:PX.Common.TypeHelper.DefaultValue(System.TypeCode)">
            <summary>
            Convert empty-strings to null.
            </summary>
        </member>
        <member name="M:PX.Common.TypeHelper.IsNumeric(System.TypeCode)">
            <summary>
            Chech if type is numeric type.
            </summary>
        </member>
        <member name="T:PX.Common.UDP.UdpDataReceiver">
            <summary>
            This class implements high performance UDP data receiver.
            </summary>
            <remarks>NOTE: High performance server applications should create multiple instances of this class per one socket.</remarks>
        </member>
        <member name="M:PX.Common.UDP.UdpDataReceiver.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Default constructor.
            </summary>
            <param name="socket">UDP socket.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>socket</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.UDP.UdpDataReceiver.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.UDP.UdpDataReceiver.Start">
            <summary>
            Starts receiving data.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this calss is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.UDP.UdpDataReceiver.IOCompletionReceive">
            <summary>
            Receives synchornously(if packet(s) available now) or starts waiting UDP packet asynchronously if no packets at moment.
            </summary>
        </member>
        <member name="M:PX.Common.UDP.UdpDataReceiver.AsyncSocketReceive(System.IAsyncResult)">
            <summary>
            Is called BeginReceiveFrom has completed.
            </summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="E:PX.Common.UDP.UdpDataReceiver.PacketReceived">
            <summary>
            Is raised when when new UDP packet is available.
            </summary>
        </member>
        <member name="M:PX.Common.UDP.UdpDataReceiver.OnPacketReceived(System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <summary>
            Raises <b>PacketReceived</b> event.
            </summary>
            <param name="buffer">Data buffer.</param>
            <param name="count">Number of bytes stored in <b>buffer</b></param>
            <param name="remoteEP">Remote IP end point from where data was received.</param>
        </member>
        <member name="E:PX.Common.UDP.UdpDataReceiver.Error">
            <summary>
            Is raised when unhandled error happens.
            </summary>
        </member>
        <member name="M:PX.Common.UDP.UdpDataReceiver.OnError(System.Exception)">
            <summary>
            Raises <b>Error</b> event.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="T:PX.Common.UDP.PacketReceivedEventArgs">
            <summary>
            This class provides data for the <see cref="E:PX.Common.UDP.UdpDataReceiver.PacketReceived"/> event.
            </summary>
        </member>
        <member name="M:PX.Common.UDP.PacketReceivedEventArgs.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.UDP.PacketReceivedEventArgs.Reuse(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <summary>
            Reuses this class.
            </summary>
            <param name="socket">Socket which received data.</param>
            <param name="buffer">Data buffer.</param>
            <param name="count">Number of bytes stored in <b>buffer</b></param>
            <param name="remoteEP">Remote IP end point from where data was received.</param>
        </member>
        <member name="P:PX.Common.UDP.PacketReceivedEventArgs.Socket">
            <summary>
            Gets socket which received data.
            </summary>
        </member>
        <member name="P:PX.Common.UDP.PacketReceivedEventArgs.Buffer">
            <summary>
            Gets data buffer.
            </summary>
        </member>
        <member name="P:PX.Common.UDP.PacketReceivedEventArgs.Count">
            <summary>
            Gets number of bytes stored to <b>Buffer</b>.
            </summary>
        </member>
        <member name="P:PX.Common.UDP.PacketReceivedEventArgs.RemoteEP">
            <summary>
            Gets remote host from where data was received.
            </summary>
        </member>
        <member name="T:PX.Mail.MailException">
            <summary>
            This class represents a Mail Exception.
            </summary>
        </member>
        <member name="M:PX.Mail.MailException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PX.Mail.MailException"/> class.
            </summary>
        </member>
        <member name="M:PX.Mail.MailException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PX.Mail.MailException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:PX.Mail.MailException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PX.Mail.MailException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:PX.Mail.MailException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:PX.Mail.MailException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:PX.Mail.MailListItem">
            <summary>
            This class represents an item returned from the 
            Pop3 LIST command.
            </summary>
        </member>
        <member name="P:PX.Mail.MailListItem.MessageId">
            <summary>
            Gets or sets the message number.
            </summary>
            <value>The message number.</value>
        </member>
        <member name="M:PX.Mail.MailListItem.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PX.Mail.MailListItem"/> class.
            </summary>		
            <param name="messageId">Message Id.</param>
        </member>
        <member name="M:HttpRequestEx.GetWebsiteUrl(System.Web.HttpRequest)">
            <summary>
            Returns url for current website in format http(s)://hostname/ 
            This url can be used in external links.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:HttpRequestEx.GetWebsiteAuthority(System.Web.HttpRequest)">
            <summary>
            Returns scheme and hostname for current website.
            This url can be used in external links.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
    </members>
</doc>
